
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00002d72  00002e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800200  00800200  00002fa6  2**0
                  ALLOC
  3 .stab         00002b2c  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140b  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000705f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007232  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 32       	cpi	r26, 0x27	; 39
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fe 12 	call	0x25fc	; 0x25fc <main>
      8a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ed       	ldi	r26, 0xD3	; 211
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ed       	ldi	r24, 0xD3	; 211
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e5 52       	subi	r30, 0x25	; 37
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <LCD_VidSendData>:

/*********************************************/
/*********  Send a Character to LCD  *********/
/*********************************************/
ErrorState LCD_VidSendData(u8 Copy_U8Data)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <LCD_VidSendData+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
     ce2:	19 82       	std	Y+1, r1	; 0x01

	DIO_EnuSetPinVal(LCD_RS,HIGH) ;  	 // RS = 1  -> Send Data
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>

	LCD_VidLatch(Copy_U8Data) ;
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	0e 94 97 06 	call	0xd2e	; 0xd2e <LCD_VidLatch>

	error = ES_OK ;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <LCD_VidSendCommand>:

/*********************************************/
/***********  Send a Command to LCD  *********/
/*********************************************/
ErrorState LCD_VidSendCommand(u8 Copy_U8Command)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <LCD_VidSendCommand+0x6>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
     d0e:	19 82       	std	Y+1, r1	; 0x01

	DIO_EnuSetPinVal(LCD_RS,LOW) ;   	// RS = 0  -> Send Command
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>

	LCD_VidLatch(Copy_U8Command);
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	0e 94 97 06 	call	0xd2e	; 0xd2e <LCD_VidLatch>

	error = ES_OK ;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <LCD_VidLatch>:
/*********************************************************************************/
/***************  Latch Function for Sending data or command to LCD  *************/
/***********  Common Function for LCD_VidSendCommand and LCD_VidSendData *********/
/*********************************************************************************/
static void LCD_VidLatch(u8 Copy_U8Value)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	6d 97       	sbiw	r28, 0x1d	; 29
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_EnuSetPinVal(LCD_RW,LOW) ;	  	 // R/W =0  -> Write this data
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	/*------------ LCD_8BIT_MODE ---------*/
	/*---------------------------------*/
#if LCD_MODE == LCD_8BIT_MODE


	DIO_EnuSetPinVal ( LCD_D0 , ( Copy_U8Value  >> BIT0 ) & 1  ) ;
     d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d4e:	98 2f       	mov	r25, r24
     d50:	91 70       	andi	r25, 0x01	; 1
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	69 2f       	mov	r22, r25
     d56:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D1 , ( Copy_U8Value  >> BIT1 ) & 1  ) ;
     d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5c:	86 95       	lsr	r24
     d5e:	98 2f       	mov	r25, r24
     d60:	91 70       	andi	r25, 0x01	; 1
     d62:	89 e0       	ldi	r24, 0x09	; 9
     d64:	69 2f       	mov	r22, r25
     d66:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D2 , ( Copy_U8Value  >> BIT2 ) & 1  ) ;
     d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d6c:	86 95       	lsr	r24
     d6e:	86 95       	lsr	r24
     d70:	98 2f       	mov	r25, r24
     d72:	91 70       	andi	r25, 0x01	; 1
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	69 2f       	mov	r22, r25
     d78:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D3 , ( Copy_U8Value  >> BIT3 ) & 1  ) ;
     d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7e:	86 95       	lsr	r24
     d80:	86 95       	lsr	r24
     d82:	86 95       	lsr	r24
     d84:	98 2f       	mov	r25, r24
     d86:	91 70       	andi	r25, 0x01	; 1
     d88:	8b e0       	ldi	r24, 0x0B	; 11
     d8a:	69 2f       	mov	r22, r25
     d8c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D4 , ( Copy_U8Value  >> BIT4 ) & 1  ) ;
     d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d92:	82 95       	swap	r24
     d94:	8f 70       	andi	r24, 0x0F	; 15
     d96:	98 2f       	mov	r25, r24
     d98:	91 70       	andi	r25, 0x01	; 1
     d9a:	8c e0       	ldi	r24, 0x0C	; 12
     d9c:	69 2f       	mov	r22, r25
     d9e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D5 , ( Copy_U8Value  >> BIT5 ) & 1  ) ;
     da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     da4:	82 95       	swap	r24
     da6:	86 95       	lsr	r24
     da8:	87 70       	andi	r24, 0x07	; 7
     daa:	98 2f       	mov	r25, r24
     dac:	91 70       	andi	r25, 0x01	; 1
     dae:	8d e0       	ldi	r24, 0x0D	; 13
     db0:	69 2f       	mov	r22, r25
     db2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D6 , ( Copy_U8Value  >> BIT6 ) & 1  ) ;
     db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db8:	82 95       	swap	r24
     dba:	86 95       	lsr	r24
     dbc:	86 95       	lsr	r24
     dbe:	83 70       	andi	r24, 0x03	; 3
     dc0:	98 2f       	mov	r25, r24
     dc2:	91 70       	andi	r25, 0x01	; 1
     dc4:	8e e0       	ldi	r24, 0x0E	; 14
     dc6:	69 2f       	mov	r22, r25
     dc8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D7 , ( Copy_U8Value  >> BIT7 ) & 1  ) ;
     dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dce:	98 2f       	mov	r25, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	99 27       	eor	r25, r25
     dd4:	99 1f       	adc	r25, r25
     dd6:	8f e0       	ldi	r24, 0x0F	; 15
     dd8:	69 2f       	mov	r22, r25
     dda:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>

	DIO_EnuSetPinVal(LCD_EN,HIGH) ;   	 // EN = 1
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a0 e8       	ldi	r26, 0x80	; 128
     dec:	bf e3       	ldi	r27, 0x3F	; 63
     dee:	89 8f       	std	Y+25, r24	; 0x19
     df0:	9a 8f       	std	Y+26, r25	; 0x1a
     df2:	ab 8f       	std	Y+27, r26	; 0x1b
     df4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df6:	69 8d       	ldd	r22, Y+25	; 0x19
     df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a ef       	ldi	r20, 0xFA	; 250
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	8d 8b       	std	Y+21, r24	; 0x15
     e10:	9e 8b       	std	Y+22, r25	; 0x16
     e12:	af 8b       	std	Y+23, r26	; 0x17
     e14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e16:	6d 89       	ldd	r22, Y+21	; 0x15
     e18:	7e 89       	ldd	r23, Y+22	; 0x16
     e1a:	8f 89       	ldd	r24, Y+23	; 0x17
     e1c:	98 8d       	ldd	r25, Y+24	; 0x18
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	2c f4       	brge	.+10     	; 0xe38 <LCD_VidLatch+0x10a>
		__ticks = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9c 8b       	std	Y+20, r25	; 0x14
     e34:	8b 8b       	std	Y+19, r24	; 0x13
     e36:	3f c0       	rjmp	.+126    	; 0xeb6 <LCD_VidLatch+0x188>
	else if (__tmp > 65535)
     e38:	6d 89       	ldd	r22, Y+21	; 0x15
     e3a:	7e 89       	ldd	r23, Y+22	; 0x16
     e3c:	8f 89       	ldd	r24, Y+23	; 0x17
     e3e:	98 8d       	ldd	r25, Y+24	; 0x18
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4c:	18 16       	cp	r1, r24
     e4e:	4c f5       	brge	.+82     	; 0xea2 <LCD_VidLatch+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	69 8d       	ldd	r22, Y+25	; 0x19
     e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	9c 8b       	std	Y+20, r25	; 0x14
     e76:	8b 8b       	std	Y+19, r24	; 0x13
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <LCD_VidLatch+0x16a>
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9a 8b       	std	Y+18, r25	; 0x12
     e80:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e82:	89 89       	ldd	r24, Y+17	; 0x11
     e84:	9a 89       	ldd	r25, Y+18	; 0x12
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_VidLatch+0x158>
     e8a:	9a 8b       	std	Y+18, r25	; 0x12
     e8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	8b 89       	ldd	r24, Y+19	; 0x13
     e90:	9c 89       	ldd	r25, Y+20	; 0x14
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	69 f7       	brne	.-38     	; 0xe7a <LCD_VidLatch+0x14c>
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <LCD_VidLatch+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea2:	6d 89       	ldd	r22, Y+21	; 0x15
     ea4:	7e 89       	ldd	r23, Y+22	; 0x16
     ea6:	8f 89       	ldd	r24, Y+23	; 0x17
     ea8:	98 8d       	ldd	r25, Y+24	; 0x18
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9c 8b       	std	Y+20, r25	; 0x14
     eb4:	8b 8b       	std	Y+19, r24	; 0x13
     eb6:	8b 89       	ldd	r24, Y+19	; 0x13
     eb8:	9c 89       	ldd	r25, Y+20	; 0x14
     eba:	98 8b       	std	Y+16, r25	; 0x10
     ebc:	8f 87       	std	Y+15, r24	; 0x0f
     ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec0:	98 89       	ldd	r25, Y+16	; 0x10
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <LCD_VidLatch+0x194>
     ec6:	98 8b       	std	Y+16, r25	; 0x10
     ec8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_EnuSetPinVal(LCD_EN,LOW) ;   	 // EN = 0
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	bf e3       	ldi	r27, 0x3F	; 63
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <LCD_VidLatch+0x1f6>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <LCD_VidLatch+0x274>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <LCD_VidLatch+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <LCD_VidLatch+0x256>
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <LCD_VidLatch+0x244>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <LCD_VidLatch+0x238>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <LCD_VidLatch+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <LCD_VidLatch+0x280>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
#error " Wrong LCD_Mode Input "


#endif

}
     fb6:	6d 96       	adiw	r28, 0x1d	; 29
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <LCD_VidInit>:
/***********  Initialization of a LCD  *********/
/***********  LCD Connection Selection *********/
/*********** _8BIT MODE  or _4BIT MODE *********/
/***********************************************/
ErrorState LCD_VidInit(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	e9 97       	sbiw	r28, 0x39	; 57
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
	ErrorState error = ES_NOK ;
     fdc:	19 ae       	std	Y+57, r1	; 0x39
/*------------ _8BIT MODE ---------*/
/*---------------------------------*/
#if LCD_MODE==LCD_8BIT_MODE

	// Set Data Pins with Direction
	DIO_EnuSetPinDir ( LCD_D0 , OUTPUT  ) ;
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D1 , OUTPUT  ) ;
     fe6:	89 e0       	ldi	r24, 0x09	; 9
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D2 , OUTPUT  ) ;
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D3 , OUTPUT  ) ;
     ff6:	8b e0       	ldi	r24, 0x0B	; 11
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D4 , OUTPUT  ) ;
     ffe:	8c e0       	ldi	r24, 0x0C	; 12
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D5 , OUTPUT  ) ;
    1006:	8d e0       	ldi	r24, 0x0D	; 13
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D6 , OUTPUT  ) ;
    100e:	8e e0       	ldi	r24, 0x0E	; 14
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D7 , OUTPUT  ) ;
    1016:	8f e0       	ldi	r24, 0x0F	; 15
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>


	// Set Control Pins With Direction
	DIO_EnuSetPinDir( LCD_RS , OUTPUT );
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( LCD_RW , OUTPUT );
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( LCD_EN , OUTPUT );
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a8 e4       	ldi	r26, 0x48	; 72
    103c:	b2 e4       	ldi	r27, 0x42	; 66
    103e:	8d ab       	std	Y+53, r24	; 0x35
    1040:	9e ab       	std	Y+54, r25	; 0x36
    1042:	af ab       	std	Y+55, r26	; 0x37
    1044:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	6d a9       	ldd	r22, Y+53	; 0x35
    1048:	7e a9       	ldd	r23, Y+54	; 0x36
    104a:	8f a9       	ldd	r24, Y+55	; 0x37
    104c:	98 ad       	ldd	r25, Y+56	; 0x38
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a ef       	ldi	r20, 0xFA	; 250
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	89 ab       	std	Y+49, r24	; 0x31
    1060:	9a ab       	std	Y+50, r25	; 0x32
    1062:	ab ab       	std	Y+51, r26	; 0x33
    1064:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1066:	69 a9       	ldd	r22, Y+49	; 0x31
    1068:	7a a9       	ldd	r23, Y+50	; 0x32
    106a:	8b a9       	ldd	r24, Y+51	; 0x33
    106c:	9c a9       	ldd	r25, Y+52	; 0x34
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <LCD_VidInit+0xc0>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <LCD_VidInit+0x13e>
	else if (__tmp > 65535)
    1088:	69 a9       	ldd	r22, Y+49	; 0x31
    108a:	7a a9       	ldd	r23, Y+50	; 0x32
    108c:	8b a9       	ldd	r24, Y+51	; 0x33
    108e:	9c a9       	ldd	r25, Y+52	; 0x34
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <LCD_VidInit+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	6d a9       	ldd	r22, Y+53	; 0x35
    10a2:	7e a9       	ldd	r23, Y+54	; 0x36
    10a4:	8f a9       	ldd	r24, Y+55	; 0x37
    10a6:	98 ad       	ldd	r25, Y+56	; 0x38
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	98 ab       	std	Y+48, r25	; 0x30
    10c6:	8f a7       	std	Y+47, r24	; 0x2f
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <LCD_VidInit+0x120>
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9e a7       	std	Y+46, r25	; 0x2e
    10d0:	8d a7       	std	Y+45, r24	; 0x2d
    10d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    10d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <LCD_VidInit+0x10e>
    10da:	9e a7       	std	Y+46, r25	; 0x2e
    10dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e0:	98 a9       	ldd	r25, Y+48	; 0x30
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	98 ab       	std	Y+48, r25	; 0x30
    10e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ea:	98 a9       	ldd	r25, Y+48	; 0x30
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <LCD_VidInit+0x102>
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <LCD_VidInit+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	69 a9       	ldd	r22, Y+49	; 0x31
    10f4:	7a a9       	ldd	r23, Y+50	; 0x32
    10f6:	8b a9       	ldd	r24, Y+51	; 0x33
    10f8:	9c a9       	ldd	r25, Y+52	; 0x34
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	98 ab       	std	Y+48, r25	; 0x30
    1104:	8f a7       	std	Y+47, r24	; 0x2f
    1106:	8f a5       	ldd	r24, Y+47	; 0x2f
    1108:	98 a9       	ldd	r25, Y+48	; 0x30
    110a:	9c a7       	std	Y+44, r25	; 0x2c
    110c:	8b a7       	std	Y+43, r24	; 0x2b
    110e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1110:	9c a5       	ldd	r25, Y+44	; 0x2c
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCD_VidInit+0x14a>
    1116:	9c a7       	std	Y+44, r25	; 0x2c
    1118:	8b a7       	std	Y+43, r24	; 0x2b

	// Time Taken By LCD Rise VDD to 4.5v
	_delay_ms(50) ;

	// Function Set
	LCD_VidSendCommand(LCD_8BIT_MODE_SET_FUNCTION) ;
    111a:	88 e3       	ldi	r24, 0x38	; 56
    111c:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e8       	ldi	r26, 0x80	; 128
    1126:	bf e3       	ldi	r27, 0x3F	; 63
    1128:	8f a3       	std	Y+39, r24	; 0x27
    112a:	98 a7       	std	Y+40, r25	; 0x28
    112c:	a9 a7       	std	Y+41, r26	; 0x29
    112e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1130:	6f a1       	ldd	r22, Y+39	; 0x27
    1132:	78 a5       	ldd	r23, Y+40	; 0x28
    1134:	89 a5       	ldd	r24, Y+41	; 0x29
    1136:	9a a5       	ldd	r25, Y+42	; 0x2a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a ef       	ldi	r20, 0xFA	; 250
    113e:	54 e4       	ldi	r21, 0x44	; 68
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	8b a3       	std	Y+35, r24	; 0x23
    114a:	9c a3       	std	Y+36, r25	; 0x24
    114c:	ad a3       	std	Y+37, r26	; 0x25
    114e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1150:	6b a1       	ldd	r22, Y+35	; 0x23
    1152:	7c a1       	ldd	r23, Y+36	; 0x24
    1154:	8d a1       	ldd	r24, Y+37	; 0x25
    1156:	9e a1       	ldd	r25, Y+38	; 0x26
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	5f e3       	ldi	r21, 0x3F	; 63
    1160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1164:	88 23       	and	r24, r24
    1166:	2c f4       	brge	.+10     	; 0x1172 <LCD_VidInit+0x1aa>
		__ticks = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9a a3       	std	Y+34, r25	; 0x22
    116e:	89 a3       	std	Y+33, r24	; 0x21
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <LCD_VidInit+0x228>
	else if (__tmp > 65535)
    1172:	6b a1       	ldd	r22, Y+35	; 0x23
    1174:	7c a1       	ldd	r23, Y+36	; 0x24
    1176:	8d a1       	ldd	r24, Y+37	; 0x25
    1178:	9e a1       	ldd	r25, Y+38	; 0x26
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	4f e7       	ldi	r20, 0x7F	; 127
    1180:	57 e4       	ldi	r21, 0x47	; 71
    1182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1186:	18 16       	cp	r1, r24
    1188:	4c f5       	brge	.+82     	; 0x11dc <LCD_VidInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	6f a1       	ldd	r22, Y+39	; 0x27
    118c:	78 a5       	ldd	r23, Y+40	; 0x28
    118e:	89 a5       	ldd	r24, Y+41	; 0x29
    1190:	9a a5       	ldd	r25, Y+42	; 0x2a
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e2       	ldi	r20, 0x20	; 32
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9a a3       	std	Y+34, r25	; 0x22
    11b0:	89 a3       	std	Y+33, r24	; 0x21
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <LCD_VidInit+0x20a>
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	98 a3       	std	Y+32, r25	; 0x20
    11ba:	8f 8f       	std	Y+31, r24	; 0x1f
    11bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11be:	98 a1       	ldd	r25, Y+32	; 0x20
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <LCD_VidInit+0x1f8>
    11c4:	98 a3       	std	Y+32, r25	; 0x20
    11c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ca:	9a a1       	ldd	r25, Y+34	; 0x22
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9a a3       	std	Y+34, r25	; 0x22
    11d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	89 a1       	ldd	r24, Y+33	; 0x21
    11d4:	9a a1       	ldd	r25, Y+34	; 0x22
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	69 f7       	brne	.-38     	; 0x11b4 <LCD_VidInit+0x1ec>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <LCD_VidInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	6b a1       	ldd	r22, Y+35	; 0x23
    11de:	7c a1       	ldd	r23, Y+36	; 0x24
    11e0:	8d a1       	ldd	r24, Y+37	; 0x25
    11e2:	9e a1       	ldd	r25, Y+38	; 0x26
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9a a3       	std	Y+34, r25	; 0x22
    11ee:	89 a3       	std	Y+33, r24	; 0x21
    11f0:	89 a1       	ldd	r24, Y+33	; 0x21
    11f2:	9a a1       	ldd	r25, Y+34	; 0x22
    11f4:	9e 8f       	std	Y+30, r25	; 0x1e
    11f6:	8d 8f       	std	Y+29, r24	; 0x1d
    11f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <LCD_VidInit+0x234>
    1200:	9e 8f       	std	Y+30, r25	; 0x1e
    1202:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;

	// Display ON/OFF Control
	LCD_VidSendCommand(LCD_ON_CONTROL_DISPLAY) ;
    1204:	8c e0       	ldi	r24, 0x0C	; 12
    1206:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	89 8f       	std	Y+25, r24	; 0x19
    1214:	9a 8f       	std	Y+26, r25	; 0x1a
    1216:	ab 8f       	std	Y+27, r26	; 0x1b
    1218:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	69 8d       	ldd	r22, Y+25	; 0x19
    121c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    121e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8d 8b       	std	Y+21, r24	; 0x15
    1234:	9e 8b       	std	Y+22, r25	; 0x16
    1236:	af 8b       	std	Y+23, r26	; 0x17
    1238:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <LCD_VidInit+0x294>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 8b       	std	Y+20, r25	; 0x14
    1258:	8b 8b       	std	Y+19, r24	; 0x13
    125a:	3f c0       	rjmp	.+126    	; 0x12da <LCD_VidInit+0x312>
	else if (__tmp > 65535)
    125c:	6d 89       	ldd	r22, Y+21	; 0x15
    125e:	7e 89       	ldd	r23, Y+22	; 0x16
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <LCD_VidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	69 8d       	ldd	r22, Y+25	; 0x19
    1276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <LCD_VidInit+0x2f4>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
    12a6:	89 89       	ldd	r24, Y+17	; 0x11
    12a8:	9a 89       	ldd	r25, Y+18	; 0x12
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <LCD_VidInit+0x2e2>
    12ae:	9a 8b       	std	Y+18, r25	; 0x12
    12b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8b 89       	ldd	r24, Y+19	; 0x13
    12b4:	9c 89       	ldd	r25, Y+20	; 0x14
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <LCD_VidInit+0x2d6>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <LCD_VidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6d 89       	ldd	r22, Y+21	; 0x15
    12c8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 8d       	ldd	r25, Y+24	; 0x18
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9c 8b       	std	Y+20, r25	; 0x14
    12d8:	8b 8b       	std	Y+19, r24	; 0x13
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	98 8b       	std	Y+16, r25	; 0x10
    12e0:	8f 87       	std	Y+15, r24	; 0x0f
    12e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e4:	98 89       	ldd	r25, Y+16	; 0x10
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <LCD_VidInit+0x31e>
    12ea:	98 8b       	std	Y+16, r25	; 0x10
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	// Clear Display
	LCD_VidSendCommand(LCD_CLEAR_DISPLAY) ;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e4       	ldi	r27, 0x40	; 64
    12fc:	8b 87       	std	Y+11, r24	; 0x0b
    12fe:	9c 87       	std	Y+12, r25	; 0x0c
    1300:	ad 87       	std	Y+13, r26	; 0x0d
    1302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1304:	6b 85       	ldd	r22, Y+11	; 0x0b
    1306:	7c 85       	ldd	r23, Y+12	; 0x0c
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	9e 85       	ldd	r25, Y+14	; 0x0e
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	4a ef       	ldi	r20, 0xFA	; 250
    1312:	54 e4       	ldi	r21, 0x44	; 68
    1314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	8f 83       	std	Y+7, r24	; 0x07
    131e:	98 87       	std	Y+8, r25	; 0x08
    1320:	a9 87       	std	Y+9, r26	; 0x09
    1322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1324:	6f 81       	ldd	r22, Y+7	; 0x07
    1326:	78 85       	ldd	r23, Y+8	; 0x08
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	9a 85       	ldd	r25, Y+10	; 0x0a
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e8       	ldi	r20, 0x80	; 128
    1332:	5f e3       	ldi	r21, 0x3F	; 63
    1334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1338:	88 23       	and	r24, r24
    133a:	2c f4       	brge	.+10     	; 0x1346 <LCD_VidInit+0x37e>
		__ticks = 1;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	3f c0       	rjmp	.+126    	; 0x13c4 <LCD_VidInit+0x3fc>
	else if (__tmp > 65535)
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	3f ef       	ldi	r19, 0xFF	; 255
    1352:	4f e7       	ldi	r20, 0x7F	; 127
    1354:	57 e4       	ldi	r21, 0x47	; 71
    1356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135a:	18 16       	cp	r1, r24
    135c:	4c f5       	brge	.+82     	; 0x13b0 <LCD_VidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1360:	7c 85       	ldd	r23, Y+12	; 0x0c
    1362:	8d 85       	ldd	r24, Y+13	; 0x0d
    1364:	9e 85       	ldd	r25, Y+14	; 0x0e
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e2       	ldi	r20, 0x20	; 32
    136c:	51 e4       	ldi	r21, 0x41	; 65
    136e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <LCD_VidInit+0x3de>
    1388:	88 ec       	ldi	r24, 0xC8	; 200
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <LCD_VidInit+0x3cc>
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9e 83       	std	Y+6, r25	; 0x06
    13a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	69 f7       	brne	.-38     	; 0x1388 <LCD_VidInit+0x3c0>
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <LCD_VidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCD_VidInit+0x408>
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;

	error = ES_OK ;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	89 af       	std	Y+57, r24	; 0x39
#error " Wrong LCD_Mode Input "

#endif


	return error ;
    13dc:	89 ad       	ldd	r24, Y+57	; 0x39
}
    13de:	e9 96       	adiw	r28, 0x39	; 57
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <LCD_VidSetPosition>:

/****************************************************************/
/***********  Set the LCD Cursor Position on the Screen *********/
/****************************************************************/
ErrorState LCD_VidSetPosition ( u8 Copy_U8RowNumber,u8 Copy_U8ColumnNumber )
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <LCD_VidSetPosition+0x6>
    13f6:	0f 92       	push	r0
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1400:	19 82       	std	Y+1, r1	; 0x01

	if ( ( Copy_U8ColumnNumber>=LCD_MIN_COL ) && ( Copy_U8ColumnNumber<=LCD_MAX_COL ) )
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	80 32       	cpi	r24, 0x20	; 32
    1406:	b8 f4       	brcc	.+46     	; 0x1436 <LCD_VidSetPosition+0x46>
	{
		if (LCD_FIRSTROW==Copy_U8RowNumber)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 23       	and	r24, r24
    140c:	39 f4       	brne	.+14     	; 0x141c <LCD_VidSetPosition+0x2c>
		{
			LCD_VidSendCommand(128+Copy_U8ColumnNumber) ;
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	80 58       	subi	r24, 0x80	; 128
    1412:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>

			error = ES_OK ;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	0f c0       	rjmp	.+30     	; 0x143a <LCD_VidSetPosition+0x4a>
		}
		else if (LCD_SECONDROW==Copy_U8RowNumber)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	39 f4       	brne	.+14     	; 0x1430 <LCD_VidSetPosition+0x40>
		{
			LCD_VidSendCommand(128+64+Copy_U8ColumnNumber);
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	80 54       	subi	r24, 0x40	; 64
    1426:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>

			error = ES_OK ;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	05 c0       	rjmp	.+10     	; 0x143a <LCD_VidSetPosition+0x4a>
		}
		else
		{

			error = ES_OUT_OF_RANGE ;
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	02 c0       	rjmp	.+4      	; 0x143a <LCD_VidSetPosition+0x4a>
		}
	}
	else
	{
		error = ES_OUT_OF_RANGE ;
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	89 83       	std	Y+1, r24	; 0x01
	}

	return error ;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <LCD_VidWriteString>:

/****************************************************************/
/***********  Write a Sentence ( string ) on the Screen *********/
/****************************************************************/
ErrorState LCD_VidWriteString(u8 * Copy_PU8Name)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <LCD_VidWriteString+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <LCD_VidWriteString+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
	ErrorState error = ES_NOK ;
    1458:	1a 82       	std	Y+2, r1	; 0x02

	for ( u8 Local_U8Count=0  ;  Copy_PU8Name[Local_U8Count]!='\0'  ;  Local_U8Count++ )
    145a:	19 82       	std	Y+1, r1	; 0x01
    145c:	0e c0       	rjmp	.+28     	; 0x147a <LCD_VidWriteString+0x32>
		{
			LCD_VidSendData( Copy_PU8Name[Local_U8Count] );
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	fc 01       	movw	r30, r24
    146a:	e2 0f       	add	r30, r18
    146c:	f3 1f       	adc	r31, r19
    146e:	80 81       	ld	r24, Z
    1470:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>
/****************************************************************/
ErrorState LCD_VidWriteString(u8 * Copy_PU8Name)
{
	ErrorState error = ES_NOK ;

	for ( u8 Local_U8Count=0  ;  Copy_PU8Name[Local_U8Count]!='\0'  ;  Local_U8Count++ )
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	fc 01       	movw	r30, r24
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	80 81       	ld	r24, Z
    148c:	88 23       	and	r24, r24
    148e:	39 f7       	brne	.-50     	; 0x145e <LCD_VidWriteString+0x16>
		{
			LCD_VidSendData( Copy_PU8Name[Local_U8Count] );
		}

	error = ES_OK ;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	8a 83       	std	Y+2, r24	; 0x02

	return error ;
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <LCD_VidWriteIntNum>:
/***********  Write a Sentence ( INT Numbers ) on the Screen *********/
/*********************************************************************/
u8 Local_U8TempArray[16];

ErrorState LCD_VidWriteIntNum(s32 Copy_S32IntData)
{
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	61 97       	sbiw	r28, 0x11	; 17
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	6e 87       	std	Y+14, r22	; 0x0e
    14be:	7f 87       	std	Y+15, r23	; 0x0f
    14c0:	88 8b       	std	Y+16, r24	; 0x10
    14c2:	99 8b       	std	Y+17, r25	; 0x11
	ErrorState error = ES_NOK ;
    14c4:	1d 86       	std	Y+13, r1	; 0x0d

	u8 Local_U8Flag =0 ;
    14c6:	1c 86       	std	Y+12, r1	; 0x0c

	u32 Local_U32TempNum ;

	if (Copy_S32IntData>=0)
    14c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    14cc:	a8 89       	ldd	r26, Y+16	; 0x10
    14ce:	b9 89       	ldd	r27, Y+17	; 0x11
    14d0:	bb 23       	and	r27, r27
    14d2:	14 f0       	brlt	.+4      	; 0x14d8 <LCD_VidWriteIntNum+0x34>
	{
		Local_U8Flag =0	;
    14d4:	1c 86       	std	Y+12, r1	; 0x0c
    14d6:	11 c0       	rjmp	.+34     	; 0x14fa <LCD_VidWriteIntNum+0x56>
	}
	else
	{
		Copy_S32IntData = - Copy_S32IntData ;
    14d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14da:	9f 85       	ldd	r25, Y+15	; 0x0f
    14dc:	a8 89       	ldd	r26, Y+16	; 0x10
    14de:	b9 89       	ldd	r27, Y+17	; 0x11
    14e0:	b0 95       	com	r27
    14e2:	a0 95       	com	r26
    14e4:	90 95       	com	r25
    14e6:	81 95       	neg	r24
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	af 4f       	sbci	r26, 0xFF	; 255
    14ec:	bf 4f       	sbci	r27, 0xFF	; 255
    14ee:	8e 87       	std	Y+14, r24	; 0x0e
    14f0:	9f 87       	std	Y+15, r25	; 0x0f
    14f2:	a8 8b       	std	Y+16, r26	; 0x10
    14f4:	b9 8b       	std	Y+17, r27	; 0x11

		Local_U8Flag = 1 ;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	8c 87       	std	Y+12, r24	; 0x0c
	}

	Local_U32TempNum=Copy_S32IntData	;
    14fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    14fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14fe:	a8 89       	ldd	r26, Y+16	; 0x10
    1500:	b9 89       	ldd	r27, Y+17	; 0x11
    1502:	88 87       	std	Y+8, r24	; 0x08
    1504:	99 87       	std	Y+9, r25	; 0x09
    1506:	aa 87       	std	Y+10, r26	; 0x0a
    1508:	bb 87       	std	Y+11, r27	; 0x0b

	u8 Local_U8Digits;

	for (Local_U8Digits=1 ; Local_U32TempNum/=10 ; Local_U8Digits++) ;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	8f 83       	std	Y+7, r24	; 0x07
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <LCD_VidWriteIntNum+0x72>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	8f 83       	std	Y+7, r24	; 0x07
    1516:	88 85       	ldd	r24, Y+8	; 0x08
    1518:	99 85       	ldd	r25, Y+9	; 0x09
    151a:	aa 85       	ldd	r26, Y+10	; 0x0a
    151c:	bb 85       	ldd	r27, Y+11	; 0x0b
    151e:	2a e0       	ldi	r18, 0x0A	; 10
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    152e:	da 01       	movw	r26, r20
    1530:	c9 01       	movw	r24, r18
    1532:	88 87       	std	Y+8, r24	; 0x08
    1534:	99 87       	std	Y+9, r25	; 0x09
    1536:	aa 87       	std	Y+10, r26	; 0x0a
    1538:	bb 87       	std	Y+11, r27	; 0x0b
    153a:	88 85       	ldd	r24, Y+8	; 0x08
    153c:	99 85       	ldd	r25, Y+9	; 0x09
    153e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1540:	bb 85       	ldd	r27, Y+11	; 0x0b
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	a1 05       	cpc	r26, r1
    1546:	b1 05       	cpc	r27, r1
    1548:	19 f7       	brne	.-58     	; 0x1510 <LCD_VidWriteIntNum+0x6c>


	Local_U32TempNum=Copy_S32IntData ;
    154a:	8e 85       	ldd	r24, Y+14	; 0x0e
    154c:	9f 85       	ldd	r25, Y+15	; 0x0f
    154e:	a8 89       	ldd	r26, Y+16	; 0x10
    1550:	b9 89       	ldd	r27, Y+17	; 0x11
    1552:	88 87       	std	Y+8, r24	; 0x08
    1554:	99 87       	std	Y+9, r25	; 0x09
    1556:	aa 87       	std	Y+10, r26	; 0x0a
    1558:	bb 87       	std	Y+11, r27	; 0x0b

	s32 Local_U8ReverseNum=0;
    155a:	1b 82       	std	Y+3, r1	; 0x03
    155c:	1c 82       	std	Y+4, r1	; 0x04
    155e:	1d 82       	std	Y+5, r1	; 0x05
    1560:	1e 82       	std	Y+6, r1	; 0x06

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	43 c0       	rjmp	.+134    	; 0x15ec <LCD_VidWriteIntNum+0x148>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1566:	88 85       	ldd	r24, Y+8	; 0x08
    1568:	99 85       	ldd	r25, Y+9	; 0x09
    156a:	aa 85       	ldd	r26, Y+10	; 0x0a
    156c:	bb 85       	ldd	r27, Y+11	; 0x0b
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9c 01       	movw	r18, r24
    1584:	ad 01       	movw	r20, r26
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	ad 81       	ldd	r26, Y+5	; 0x05
    158c:	be 81       	ldd	r27, Y+6	; 0x06
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	a4 1f       	adc	r26, r20
    1594:	b5 1f       	adc	r27, r21
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	ad 83       	std	Y+5, r26	; 0x05
    159c:	be 83       	std	Y+6, r27	; 0x06

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	ad 81       	ldd	r26, Y+5	; 0x05
    15a4:	be 81       	ldd	r27, Y+6	; 0x06
    15a6:	2a e0       	ldi	r18, 0x0A	; 10
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__mulsi3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8b 83       	std	Y+3, r24	; 0x03
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	ad 83       	std	Y+5, r26	; 0x05
    15c0:	be 83       	std	Y+6, r27	; 0x06

		Local_U32TempNum=Local_U32TempNum/10;
    15c2:	88 85       	ldd	r24, Y+8	; 0x08
    15c4:	99 85       	ldd	r25, Y+9	; 0x09
    15c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    15c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    15ca:	2a e0       	ldi	r18, 0x0A	; 10
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    15da:	da 01       	movw	r26, r20
    15dc:	c9 01       	movw	r24, r18
    15de:	88 87       	std	Y+8, r24	; 0x08
    15e0:	99 87       	std	Y+9, r25	; 0x09
    15e2:	aa 87       	std	Y+10, r26	; 0x0a
    15e4:	bb 87       	std	Y+11, r27	; 0x0b

	Local_U32TempNum=Copy_S32IntData ;

	s32 Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	88 85       	ldd	r24, Y+8	; 0x08
    15ee:	99 85       	ldd	r25, Y+9	; 0x09
    15f0:	aa 85       	ldd	r26, Y+10	; 0x0a
    15f2:	bb 85       	ldd	r27, Y+11	; 0x0b
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <LCD_VidWriteIntNum+0x15a>
    15fc:	b4 cf       	rjmp	.-152    	; 0x1566 <LCD_VidWriteIntNum+0xc2>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	ad 81       	ldd	r26, Y+5	; 0x05
    1604:	be 81       	ldd	r27, Y+6	; 0x06
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1616:	da 01       	movw	r26, r20
    1618:	c9 01       	movw	r24, r18
    161a:	8b 83       	std	Y+3, r24	; 0x03
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	ad 83       	std	Y+5, r26	; 0x05
    1620:	be 83       	std	Y+6, r27	; 0x06

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8Digits ; Local_U8Count++ )
    1622:	1a 82       	std	Y+2, r1	; 0x02
    1624:	2b c0       	rjmp	.+86     	; 0x167c <LCD_VidWriteIntNum+0x1d8>
	{
		Local_U8TempArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	08 2f       	mov	r16, r24
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	ad 81       	ldd	r26, Y+5	; 0x05
    1632:	be 81       	ldd	r27, Y+6	; 0x06
    1634:	2a e0       	ldi	r18, 0x0A	; 10
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	80 5d       	subi	r24, 0xD0	; 208
    164a:	f8 01       	movw	r30, r16
    164c:	e3 5f       	subi	r30, 0xF3	; 243
    164e:	fd 4f       	sbci	r31, 0xFD	; 253
    1650:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	ad 81       	ldd	r26, Y+5	; 0x05
    1658:	be 81       	ldd	r27, Y+6	; 0x06
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    166a:	da 01       	movw	r26, r20
    166c:	c9 01       	movw	r24, r18
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	ad 83       	std	Y+5, r26	; 0x05
    1674:	be 83       	std	Y+6, r27	; 0x06

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8Digits ; Local_U8Count++ )
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	8f 81       	ldd	r24, Y+7	; 0x07
    1680:	98 17       	cp	r25, r24
    1682:	88 f2       	brcs	.-94     	; 0x1626 <LCD_VidWriteIntNum+0x182>
		Local_U8TempArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	if (Local_U8Flag)
    1684:	8c 85       	ldd	r24, Y+12	; 0x0c
    1686:	88 23       	and	r24, r24
    1688:	41 f0       	breq	.+16     	; 0x169a <LCD_VidWriteIntNum+0x1f6>
	{
		LCD_VidSendData('-') ;
    168a:	8d e2       	ldi	r24, 0x2D	; 45
    168c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>

		LCD_VidWriteString(Local_U8TempArray) ;
    1690:	8d e0       	ldi	r24, 0x0D	; 13
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <LCD_VidWriteIntNum+0x1fe>
	}
	else
	{
		LCD_VidWriteString(Local_U8TempArray) ;
    169a:	8d e0       	ldi	r24, 0x0D	; 13
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
	}

	error = ES_OK ;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8d 87       	std	Y+13, r24	; 0x0d

	return error ;
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    16a8:	61 96       	adiw	r28, 0x11	; 17
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <LCD_VidWriteFloatNum>:
/***********  Write a Sentense ( Float Numbers ) on the Screen *********/
/***********************************************************************/
u8 Local_U8FloatArray[10];

ErrorState LCD_VidWriteFloatNum(f32 Copy_F32IntData)
{
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	6b 97       	sbiw	r28, 0x1b	; 27
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	68 8f       	std	Y+24, r22	; 0x18
    16d8:	79 8f       	std	Y+25, r23	; 0x19
    16da:	8a 8f       	std	Y+26, r24	; 0x1a
    16dc:	9b 8f       	std	Y+27, r25	; 0x1b
	ErrorState error = ES_NOK ;
    16de:	1f 8a       	std	Y+23, r1	; 0x17

	u8 Local_U8Flag =0 ;
    16e0:	1e 8a       	std	Y+22, r1	; 0x16

	if (Copy_F32IntData>=0)
    16e2:	68 8d       	ldd	r22, Y+24	; 0x18
    16e4:	79 8d       	ldd	r23, Y+25	; 0x19
    16e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
    16f6:	88 23       	and	r24, r24
    16f8:	14 f0       	brlt	.+4      	; 0x16fe <LCD_VidWriteFloatNum+0x40>
	{
		Local_U8Flag =0	;
    16fa:	1e 8a       	std	Y+22, r1	; 0x16
    16fc:	0b c0       	rjmp	.+22     	; 0x1714 <LCD_VidWriteFloatNum+0x56>
	}
	else
	{
		Copy_F32IntData = - Copy_F32IntData ;
    16fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1700:	99 8d       	ldd	r25, Y+25	; 0x19
    1702:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1704:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1706:	b0 58       	subi	r27, 0x80	; 128
    1708:	88 8f       	std	Y+24, r24	; 0x18
    170a:	99 8f       	std	Y+25, r25	; 0x19
    170c:	aa 8f       	std	Y+26, r26	; 0x1a
    170e:	bb 8f       	std	Y+27, r27	; 0x1b

		Local_U8Flag = 1 ;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8e 8b       	std	Y+22, r24	; 0x16

	}


	u32 Local_U32TempNum = Copy_F32IntData ;
    1714:	68 8d       	ldd	r22, Y+24	; 0x18
    1716:	79 8d       	ldd	r23, Y+25	; 0x19
    1718:	8a 8d       	ldd	r24, Y+26	; 0x1a
    171a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8a 8b       	std	Y+18, r24	; 0x12
    1726:	9b 8b       	std	Y+19, r25	; 0x13
    1728:	ac 8b       	std	Y+20, r26	; 0x14
    172a:	bd 8b       	std	Y+21, r27	; 0x15

	u8 Local_U8IntDigits;

	for (Local_U8IntDigits=1 ; Local_U32TempNum/=10 ; Local_U8IntDigits++) ;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 8b       	std	Y+17, r24	; 0x11
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <LCD_VidWriteFloatNum+0x7a>
    1732:	89 89       	ldd	r24, Y+17	; 0x11
    1734:	8f 5f       	subi	r24, 0xFF	; 255
    1736:	89 8b       	std	Y+17, r24	; 0x11
    1738:	8a 89       	ldd	r24, Y+18	; 0x12
    173a:	9b 89       	ldd	r25, Y+19	; 0x13
    173c:	ac 89       	ldd	r26, Y+20	; 0x14
    173e:	bd 89       	ldd	r27, Y+21	; 0x15
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    1750:	da 01       	movw	r26, r20
    1752:	c9 01       	movw	r24, r18
    1754:	8a 8b       	std	Y+18, r24	; 0x12
    1756:	9b 8b       	std	Y+19, r25	; 0x13
    1758:	ac 8b       	std	Y+20, r26	; 0x14
    175a:	bd 8b       	std	Y+21, r27	; 0x15
    175c:	8a 89       	ldd	r24, Y+18	; 0x12
    175e:	9b 89       	ldd	r25, Y+19	; 0x13
    1760:	ac 89       	ldd	r26, Y+20	; 0x14
    1762:	bd 89       	ldd	r27, Y+21	; 0x15
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	a1 05       	cpc	r26, r1
    1768:	b1 05       	cpc	r27, r1
    176a:	19 f7       	brne	.-58     	; 0x1732 <LCD_VidWriteFloatNum+0x74>


	Local_U32TempNum=Copy_F32IntData ;
    176c:	68 8d       	ldd	r22, Y+24	; 0x18
    176e:	79 8d       	ldd	r23, Y+25	; 0x19
    1770:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1772:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8a 8b       	std	Y+18, r24	; 0x12
    177e:	9b 8b       	std	Y+19, r25	; 0x13
    1780:	ac 8b       	std	Y+20, r26	; 0x14
    1782:	bd 8b       	std	Y+21, r27	; 0x15

	s32 Local_U8ReverseNum=0;
    1784:	1d 86       	std	Y+13, r1	; 0x0d
    1786:	1e 86       	std	Y+14, r1	; 0x0e
    1788:	1f 86       	std	Y+15, r1	; 0x0f
    178a:	18 8a       	std	Y+16, r1	; 0x10

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    178c:	1a 82       	std	Y+2, r1	; 0x02
    178e:	43 c0       	rjmp	.+134    	; 0x1816 <LCD_VidWriteFloatNum+0x158>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1790:	8a 89       	ldd	r24, Y+18	; 0x12
    1792:	9b 89       	ldd	r25, Y+19	; 0x13
    1794:	ac 89       	ldd	r26, Y+20	; 0x14
    1796:	bd 89       	ldd	r27, Y+21	; 0x15
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 01       	movw	r18, r24
    17ae:	ad 01       	movw	r20, r26
    17b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b4:	af 85       	ldd	r26, Y+15	; 0x0f
    17b6:	b8 89       	ldd	r27, Y+16	; 0x10
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	a4 1f       	adc	r26, r20
    17be:	b5 1f       	adc	r27, r21
    17c0:	8d 87       	std	Y+13, r24	; 0x0d
    17c2:	9e 87       	std	Y+14, r25	; 0x0e
    17c4:	af 87       	std	Y+15, r26	; 0x0f
    17c6:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	af 85       	ldd	r26, Y+15	; 0x0f
    17ce:	b8 89       	ldd	r27, Y+16	; 0x10
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__mulsi3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	8d 87       	std	Y+13, r24	; 0x0d
    17e6:	9e 87       	std	Y+14, r25	; 0x0e
    17e8:	af 87       	std	Y+15, r26	; 0x0f
    17ea:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U32TempNum=Local_U32TempNum/10;
    17ec:	8a 89       	ldd	r24, Y+18	; 0x12
    17ee:	9b 89       	ldd	r25, Y+19	; 0x13
    17f0:	ac 89       	ldd	r26, Y+20	; 0x14
    17f2:	bd 89       	ldd	r27, Y+21	; 0x15
    17f4:	2a e0       	ldi	r18, 0x0A	; 10
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    1804:	da 01       	movw	r26, r20
    1806:	c9 01       	movw	r24, r18
    1808:	8a 8b       	std	Y+18, r24	; 0x12
    180a:	9b 8b       	std	Y+19, r25	; 0x13
    180c:	ac 8b       	std	Y+20, r26	; 0x14
    180e:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U32TempNum=Copy_F32IntData ;

	s32 Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	8f 5f       	subi	r24, 0xFF	; 255
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	8a 89       	ldd	r24, Y+18	; 0x12
    1818:	9b 89       	ldd	r25, Y+19	; 0x13
    181a:	ac 89       	ldd	r26, Y+20	; 0x14
    181c:	bd 89       	ldd	r27, Y+21	; 0x15
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	a1 05       	cpc	r26, r1
    1822:	b1 05       	cpc	r27, r1
    1824:	09 f0       	breq	.+2      	; 0x1828 <LCD_VidWriteFloatNum+0x16a>
    1826:	b4 cf       	rjmp	.-152    	; 0x1790 <LCD_VidWriteFloatNum+0xd2>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	af 85       	ldd	r26, Y+15	; 0x0f
    182e:	b8 89       	ldd	r27, Y+16	; 0x10
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1840:	da 01       	movw	r26, r20
    1842:	c9 01       	movw	r24, r18
    1844:	8d 87       	std	Y+13, r24	; 0x0d
    1846:	9e 87       	std	Y+14, r25	; 0x0e
    1848:	af 87       	std	Y+15, r26	; 0x0f
    184a:	b8 8b       	std	Y+16, r27	; 0x10

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8IntDigits ; Local_U8Count++ )
    184c:	1c 86       	std	Y+12, r1	; 0x0c
    184e:	2b c0       	rjmp	.+86     	; 0x18a6 <LCD_VidWriteFloatNum+0x1e8>
	{
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1850:	8c 85       	ldd	r24, Y+12	; 0x0c
    1852:	08 2f       	mov	r16, r24
    1854:	10 e0       	ldi	r17, 0x00	; 0
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	af 85       	ldd	r26, Y+15	; 0x0f
    185c:	b8 89       	ldd	r27, Y+16	; 0x10
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	80 5d       	subi	r24, 0xD0	; 208
    1874:	f8 01       	movw	r30, r16
    1876:	e3 5e       	subi	r30, 0xE3	; 227
    1878:	fd 4f       	sbci	r31, 0xFD	; 253
    187a:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    187c:	8d 85       	ldd	r24, Y+13	; 0x0d
    187e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1880:	af 85       	ldd	r26, Y+15	; 0x0f
    1882:	b8 89       	ldd	r27, Y+16	; 0x10
    1884:	2a e0       	ldi	r18, 0x0A	; 10
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1894:	da 01       	movw	r26, r20
    1896:	c9 01       	movw	r24, r18
    1898:	8d 87       	std	Y+13, r24	; 0x0d
    189a:	9e 87       	std	Y+14, r25	; 0x0e
    189c:	af 87       	std	Y+15, r26	; 0x0f
    189e:	b8 8b       	std	Y+16, r27	; 0x10

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8IntDigits ; Local_U8Count++ )
    18a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	8c 87       	std	Y+12, r24	; 0x0c
    18a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18a8:	89 89       	ldd	r24, Y+17	; 0x11
    18aa:	98 17       	cp	r25, r24
    18ac:	88 f2       	brcs	.-94     	; 0x1850 <LCD_VidWriteFloatNum+0x192>
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	Local_U8FloatArray[Local_U8Count] = '.' ;
    18ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	e3 5e       	subi	r30, 0xE3	; 227
    18b8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ba:	8e e2       	ldi	r24, 0x2E	; 46
    18bc:	80 83       	st	Z, r24





	Local_U32TempNum = Copy_F32IntData ;
    18be:	68 8d       	ldd	r22, Y+24	; 0x18
    18c0:	79 8d       	ldd	r23, Y+25	; 0x19
    18c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8a 8b       	std	Y+18, r24	; 0x12
    18d0:	9b 8b       	std	Y+19, r25	; 0x13
    18d2:	ac 8b       	std	Y+20, r26	; 0x14
    18d4:	bd 8b       	std	Y+21, r27	; 0x15

	f32 Local_F32DecimalNum = Copy_F32IntData - Local_U32TempNum ;
    18d6:	6a 89       	ldd	r22, Y+18	; 0x12
    18d8:	7b 89       	ldd	r23, Y+19	; 0x13
    18da:	8c 89       	ldd	r24, Y+20	; 0x14
    18dc:	9d 89       	ldd	r25, Y+21	; 0x15
    18de:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	68 8d       	ldd	r22, Y+24	; 0x18
    18e8:	79 8d       	ldd	r23, Y+25	; 0x19
    18ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	88 87       	std	Y+8, r24	; 0x08
    18f8:	99 87       	std	Y+9, r25	; 0x09
    18fa:	aa 87       	std	Y+10, r26	; 0x0a
    18fc:	bb 87       	std	Y+11, r27	; 0x0b

	u32 Local_U32DecimalNum = Local_F32DecimalNum * 10000  ;
    18fe:	68 85       	ldd	r22, Y+8	; 0x08
    1900:	79 85       	ldd	r23, Y+9	; 0x09
    1902:	8a 85       	ldd	r24, Y+10	; 0x0a
    1904:	9b 85       	ldd	r25, Y+11	; 0x0b
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e4       	ldi	r19, 0x40	; 64
    190a:	4c e1       	ldi	r20, 0x1C	; 28
    190c:	56 e4       	ldi	r21, 0x46	; 70
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8c 83       	std	Y+4, r24	; 0x04
    1924:	9d 83       	std	Y+5, r25	; 0x05
    1926:	ae 83       	std	Y+6, r26	; 0x06
    1928:	bf 83       	std	Y+7, r27	; 0x07

	Local_U32TempNum = Local_U32DecimalNum ;
    192a:	8c 81       	ldd	r24, Y+4	; 0x04
    192c:	9d 81       	ldd	r25, Y+5	; 0x05
    192e:	ae 81       	ldd	r26, Y+6	; 0x06
    1930:	bf 81       	ldd	r27, Y+7	; 0x07
    1932:	8a 8b       	std	Y+18, r24	; 0x12
    1934:	9b 8b       	std	Y+19, r25	; 0x13
    1936:	ac 8b       	std	Y+20, r26	; 0x14
    1938:	bd 8b       	std	Y+21, r27	; 0x15

	u8 Local_U8FloatDigits;

	for (Local_U8FloatDigits=1 ; Local_U32TempNum/=10 ; Local_U8FloatDigits++) ;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <LCD_VidWriteFloatNum+0x288>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	8a 89       	ldd	r24, Y+18	; 0x12
    1948:	9b 89       	ldd	r25, Y+19	; 0x13
    194a:	ac 89       	ldd	r26, Y+20	; 0x14
    194c:	bd 89       	ldd	r27, Y+21	; 0x15
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    195e:	da 01       	movw	r26, r20
    1960:	c9 01       	movw	r24, r18
    1962:	8a 8b       	std	Y+18, r24	; 0x12
    1964:	9b 8b       	std	Y+19, r25	; 0x13
    1966:	ac 8b       	std	Y+20, r26	; 0x14
    1968:	bd 8b       	std	Y+21, r27	; 0x15
    196a:	8a 89       	ldd	r24, Y+18	; 0x12
    196c:	9b 89       	ldd	r25, Y+19	; 0x13
    196e:	ac 89       	ldd	r26, Y+20	; 0x14
    1970:	bd 89       	ldd	r27, Y+21	; 0x15
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	a1 05       	cpc	r26, r1
    1976:	b1 05       	cpc	r27, r1
    1978:	19 f7       	brne	.-58     	; 0x1940 <LCD_VidWriteFloatNum+0x282>


	Local_U32TempNum=Local_U32DecimalNum ;
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	ae 81       	ldd	r26, Y+6	; 0x06
    1980:	bf 81       	ldd	r27, Y+7	; 0x07
    1982:	8a 8b       	std	Y+18, r24	; 0x12
    1984:	9b 8b       	std	Y+19, r25	; 0x13
    1986:	ac 8b       	std	Y+20, r26	; 0x14
    1988:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U8ReverseNum=0;
    198a:	1d 86       	std	Y+13, r1	; 0x0d
    198c:	1e 86       	std	Y+14, r1	; 0x0e
    198e:	1f 86       	std	Y+15, r1	; 0x0f
    1990:	18 8a       	std	Y+16, r1	; 0x10

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1992:	19 82       	std	Y+1, r1	; 0x01
    1994:	43 c0       	rjmp	.+134    	; 0x1a1c <LCD_VidWriteFloatNum+0x35e>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1996:	8a 89       	ldd	r24, Y+18	; 0x12
    1998:	9b 89       	ldd	r25, Y+19	; 0x13
    199a:	ac 89       	ldd	r26, Y+20	; 0x14
    199c:	bd 89       	ldd	r27, Y+21	; 0x15
    199e:	2a e0       	ldi	r18, 0x0A	; 10
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9c 01       	movw	r18, r24
    19b4:	ad 01       	movw	r20, r26
    19b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ba:	af 85       	ldd	r26, Y+15	; 0x0f
    19bc:	b8 89       	ldd	r27, Y+16	; 0x10
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	a4 1f       	adc	r26, r20
    19c4:	b5 1f       	adc	r27, r21
    19c6:	8d 87       	std	Y+13, r24	; 0x0d
    19c8:	9e 87       	std	Y+14, r25	; 0x0e
    19ca:	af 87       	std	Y+15, r26	; 0x0f
    19cc:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	af 85       	ldd	r26, Y+15	; 0x0f
    19d4:	b8 89       	ldd	r27, Y+16	; 0x10
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__mulsi3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8d 87       	std	Y+13, r24	; 0x0d
    19ec:	9e 87       	std	Y+14, r25	; 0x0e
    19ee:	af 87       	std	Y+15, r26	; 0x0f
    19f0:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U32TempNum=Local_U32TempNum/10;
    19f2:	8a 89       	ldd	r24, Y+18	; 0x12
    19f4:	9b 89       	ldd	r25, Y+19	; 0x13
    19f6:	ac 89       	ldd	r26, Y+20	; 0x14
    19f8:	bd 89       	ldd	r27, Y+21	; 0x15
    19fa:	2a e0       	ldi	r18, 0x0A	; 10
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    1a0a:	da 01       	movw	r26, r20
    1a0c:	c9 01       	movw	r24, r18
    1a0e:	8a 8b       	std	Y+18, r24	; 0x12
    1a10:	9b 8b       	std	Y+19, r25	; 0x13
    1a12:	ac 8b       	std	Y+20, r26	; 0x14
    1a14:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U32TempNum=Local_U32DecimalNum ;

	Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a1e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a20:	ac 89       	ldd	r26, Y+20	; 0x14
    1a22:	bd 89       	ldd	r27, Y+21	; 0x15
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	a1 05       	cpc	r26, r1
    1a28:	b1 05       	cpc	r27, r1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <LCD_VidWriteFloatNum+0x370>
    1a2c:	b4 cf       	rjmp	.-152    	; 0x1996 <LCD_VidWriteFloatNum+0x2d8>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	af 85       	ldd	r26, Y+15	; 0x0f
    1a34:	b8 89       	ldd	r27, Y+16	; 0x10
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1a46:	da 01       	movw	r26, r20
    1a48:	c9 01       	movw	r24, r18
    1a4a:	8d 87       	std	Y+13, r24	; 0x0d
    1a4c:	9e 87       	std	Y+14, r25	; 0x0e
    1a4e:	af 87       	std	Y+15, r26	; 0x0f
    1a50:	b8 8b       	std	Y+16, r27	; 0x10

	for (Local_U8Count=Local_U8IntDigits+1 ; Local_U8Count<=(Local_U8IntDigits+4) ; Local_U8Count++ )
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	8c 87       	std	Y+12, r24	; 0x0c
    1a58:	2b c0       	rjmp	.+86     	; 0x1ab0 <LCD_VidWriteFloatNum+0x3f2>
	{
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5c:	08 2f       	mov	r16, r24
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	af 85       	ldd	r26, Y+15	; 0x0f
    1a66:	b8 89       	ldd	r27, Y+16	; 0x10
    1a68:	2a e0       	ldi	r18, 0x0A	; 10
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	80 5d       	subi	r24, 0xD0	; 208
    1a7e:	f8 01       	movw	r30, r16
    1a80:	e3 5e       	subi	r30, 0xE3	; 227
    1a82:	fd 4f       	sbci	r31, 0xFD	; 253
    1a84:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	af 85       	ldd	r26, Y+15	; 0x0f
    1a8c:	b8 89       	ldd	r27, Y+16	; 0x10
    1a8e:	2a e0       	ldi	r18, 0x0A	; 10
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 65 16 	call	0x2cca	; 0x2cca <__divmodsi4>
    1a9e:	da 01       	movw	r26, r20
    1aa0:	c9 01       	movw	r24, r18
    1aa2:	8d 87       	std	Y+13, r24	; 0x0d
    1aa4:	9e 87       	std	Y+14, r25	; 0x0e
    1aa6:	af 87       	std	Y+15, r26	; 0x0f
    1aa8:	b8 8b       	std	Y+16, r27	; 0x10
		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	for (Local_U8Count=Local_U8IntDigits+1 ; Local_U8Count<=(Local_U8IntDigits+4) ; Local_U8Count++ )
    1aaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	8c 87       	std	Y+12, r24	; 0x0c
    1ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	89 89       	ldd	r24, Y+17	; 0x11
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	04 96       	adiw	r24, 0x04	; 4
    1abe:	82 17       	cp	r24, r18
    1ac0:	93 07       	cpc	r25, r19
    1ac2:	5c f6       	brge	.-106    	; 0x1a5a <LCD_VidWriteFloatNum+0x39c>
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	if (Local_U8Flag)
    1ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac6:	88 23       	and	r24, r24
    1ac8:	41 f0       	breq	.+16     	; 0x1ada <LCD_VidWriteFloatNum+0x41c>
	{
		LCD_VidSendData('-') ;
    1aca:	8d e2       	ldi	r24, 0x2D	; 45
    1acc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>

		LCD_VidWriteString(Local_U8FloatArray) ;
    1ad0:	8d e1       	ldi	r24, 0x1D	; 29
    1ad2:	92 e0       	ldi	r25, 0x02	; 2
    1ad4:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <LCD_VidWriteFloatNum+0x424>
	}
	else
	{
		LCD_VidWriteString(Local_U8FloatArray) ;
    1ada:	8d e1       	ldi	r24, 0x1D	; 29
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
	}

	error = ES_OK ;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	8f 8b       	std	Y+23, r24	; 0x17

	return error ;
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17

}
    1ae8:	6b 96       	adiw	r28, 0x1b	; 27
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <LCD_VidRecordSpecialChar>:

/*******************************************************************/
/***********  Record a Special Character in the LCD CG-RAM *********/
/*******************************************************************/
ErrorState LCD_VidRecordSpecialChar ( u8 Copy_U8PatternMatrix[8] ,u8 Copy_U8CGRAMPos)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <LCD_VidRecordSpecialChar+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <LCD_VidRecordSpecialChar+0x8>
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    1b10:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState error = ES_NOK ;
    1b12:	1a 82       	std	Y+2, r1	; 0x02

	if ( ( Copy_U8CGRAMPos>=0 ) && ( Copy_U8CGRAMPos<=7 ) )
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	88 30       	cpi	r24, 0x08	; 8
    1b18:	28 f5       	brcc	.+74     	; 0x1b64 <LCD_VidRecordSpecialChar+0x66>
	{
		/* Set Address Counter to the CG-RAM */
		LCD_VidSendCommand(64+Copy_U8CGRAMPos*8) ;
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	08 96       	adiw	r24, 0x08	; 8
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>

		for ( u8 Local_U8Count=0 ; Local_U8Count<8 ; Local_U8Count++ )
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	0e c0       	rjmp	.+28     	; 0x1b52 <LCD_VidRecordSpecialChar+0x54>
		{
			LCD_VidSendData(Copy_U8PatternMatrix[Local_U8Count]) ;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	fc 01       	movw	r30, r24
    1b42:	e2 0f       	add	r30, r18
    1b44:	f3 1f       	adc	r31, r19
    1b46:	80 81       	ld	r24, Z
    1b48:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>
	if ( ( Copy_U8CGRAMPos>=0 ) && ( Copy_U8CGRAMPos<=7 ) )
	{
		/* Set Address Counter to the CG-RAM */
		LCD_VidSendCommand(64+Copy_U8CGRAMPos*8) ;

		for ( u8 Local_U8Count=0 ; Local_U8Count<8 ; Local_U8Count++ )
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	78 f3       	brcs	.-34     	; 0x1b36 <LCD_VidRecordSpecialChar+0x38>
		{
			LCD_VidSendData(Copy_U8PatternMatrix[Local_U8Count]) ;
		}
		/* Return Address Counter to the DD-RAM*/
		LCD_VidSendCommand(128) ;
    1b58:	80 e8       	ldi	r24, 0x80	; 128
    1b5a:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>

		error = ES_OK ;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <LCD_VidRecordSpecialChar+0x6a>
	}
	else
	{
		error = ES_OUT_OF_RANGE ;
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	8a 83       	std	Y+2, r24	; 0x02
	}
	return error ;
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <LCD_VidWriteSpecialChar>:

/**************************************************************************/
/***********  Write a Special Character on the Screen form CG-RAM *********/
/**************************************************************************/
ErrorState LCD_VidWriteSpecialChar ( u8 Copy_U8CharPattern )
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_VidWriteSpecialChar+0x6>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    1b86:	19 82       	std	Y+1, r1	; 0x01

	LCD_VidSendData(Copy_U8CharPattern) ;
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>

	error = ES_OK ;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <DIO_EnuSetPinDir>:

/****************************************************************/
/****  Define the direction of Pin as an input or an output  ****/
/****************************************************************/
ErrorState DIO_EnuSetPinDir( u8 Copy_U8PinNumber , u8 Copy_U8PinDir )
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <DIO_EnuSetPinDir+0x6>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1bae:	19 82       	std	Y+1, r1	; 0x01

	if ( Copy_U8PinDir == DIO_OUTPUT )
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <DIO_EnuSetPinDir+0x1a>
    1bb6:	79 c0       	rjmp	.+242    	; 0x1caa <DIO_EnuSetPinDir+0x10c>
		{

			/** If pin number between pin0 and pin7 set this pin as an output **/
			if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 30       	cpi	r24, 0x08	; 8
    1bbc:	b0 f4       	brcc	.+44     	; 0x1bea <DIO_EnuSetPinDir+0x4c>

				{
					SET_BIT ( DIO_DDRA , (Copy_U8PinNumber) ) ;
    1bbe:	aa e3       	ldi	r26, 0x3A	; 58
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ea e3       	ldi	r30, 0x3A	; 58
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_EnuSetPinDir+0x3e>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_EnuSetPinDir+0x3a>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24

					error = ES_OK ;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	e3 c0       	rjmp	.+454    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}


			/** If pin number between pin8 and pin15 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	88 30       	cpi	r24, 0x08	; 8
    1bee:	e0 f0       	brcs	.+56     	; 0x1c28 <DIO_EnuSetPinDir+0x8a>
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	80 31       	cpi	r24, 0x10	; 16
    1bf4:	c8 f4       	brcc	.+50     	; 0x1c28 <DIO_EnuSetPinDir+0x8a>

				{
					SET_BIT ( DIO_DDRB , ( (Copy_U8PinNumber) - (DIO_PIN8) ) ) ;
    1bf6:	a7 e3       	ldi	r26, 0x37	; 55
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e7 e3       	ldi	r30, 0x37	; 55
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 01       	movw	r18, r24
    1c0a:	28 50       	subi	r18, 0x08	; 8
    1c0c:	30 40       	sbci	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_EnuSetPinDir+0x7c>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_EnuSetPinDir+0x78>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24

					error = ES_OK ;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	c4 c0       	rjmp	.+392    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin16 and pin23 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 31       	cpi	r24, 0x10	; 16
    1c2c:	e0 f0       	brcs	.+56     	; 0x1c66 <DIO_EnuSetPinDir+0xc8>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	88 31       	cpi	r24, 0x18	; 24
    1c32:	c8 f4       	brcc	.+50     	; 0x1c66 <DIO_EnuSetPinDir+0xc8>

					{
						SET_BIT ( DIO_DDRC , ( (Copy_U8PinNumber) - (DIO_PIN16) ) ) ;
    1c34:	a4 e3       	ldi	r26, 0x34	; 52
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e4 e3       	ldi	r30, 0x34	; 52
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 01       	movw	r18, r24
    1c48:	20 51       	subi	r18, 0x10	; 16
    1c4a:	30 40       	sbci	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_EnuSetPinDir+0xba>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_EnuSetPinDir+0xb6>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24

						error = ES_OK ;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	a5 c0       	rjmp	.+330    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
					}

			/** If pin number between pin24 and pin31 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	88 31       	cpi	r24, 0x18	; 24
    1c6a:	e0 f0       	brcs	.+56     	; 0x1ca4 <DIO_EnuSetPinDir+0x106>
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	80 32       	cpi	r24, 0x20	; 32
    1c70:	c8 f4       	brcc	.+50     	; 0x1ca4 <DIO_EnuSetPinDir+0x106>

					{
						SET_BIT(DIO_DDRD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    1c72:	a1 e3       	ldi	r26, 0x31	; 49
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e1 e3       	ldi	r30, 0x31	; 49
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 01       	movw	r18, r24
    1c86:	28 51       	subi	r18, 0x18	; 24
    1c88:	30 40       	sbci	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_EnuSetPinDir+0xf8>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_EnuSetPinDir+0xf4>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24

						error = ES_OK ;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	86 c0       	rjmp	.+268    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
					}
			else

				{
				error = ES_OUT_OF_RANGE ;
    1ca4:	83 e0       	ldi	r24, 0x03	; 3
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	83 c0       	rjmp	.+262    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}
		}



	else if (Copy_U8PinDir == DIO_INPUT)
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	88 23       	and	r24, r24
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <DIO_EnuSetPinDir+0x114>
    1cb0:	7d c0       	rjmp	.+250    	; 0x1dac <DIO_EnuSetPinDir+0x20e>
		{

			/** If pin number between pin0 and pin7 set this pin as input **/
			if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	b8 f4       	brcc	.+46     	; 0x1ce6 <DIO_EnuSetPinDir+0x148>

				{
					CLR_BIT ( DIO_DDRA ,( (Copy_U8PinNumber) )) ;
    1cb8:	aa e3       	ldi	r26, 0x3A	; 58
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	ea e3       	ldi	r30, 0x3A	; 58
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_EnuSetPinDir+0x138>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_EnuSetPinDir+0x134>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24

					error = ES_OK ;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	65 c0       	rjmp	.+202    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}


			/** If pin number between pin8 and pin15 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	88 30       	cpi	r24, 0x08	; 8
    1cea:	e8 f0       	brcs	.+58     	; 0x1d26 <DIO_EnuSetPinDir+0x188>
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 31       	cpi	r24, 0x10	; 16
    1cf0:	d0 f4       	brcc	.+52     	; 0x1d26 <DIO_EnuSetPinDir+0x188>

				{
					CLR_BIT ( DIO_DDRB , ( (Copy_U8PinNumber) - (DIO_PIN8) ) ) ;
    1cf2:	a7 e3       	ldi	r26, 0x37	; 55
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e7 e3       	ldi	r30, 0x37	; 55
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 01       	movw	r18, r24
    1d06:	28 50       	subi	r18, 0x08	; 8
    1d08:	30 40       	sbci	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_EnuSetPinDir+0x178>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_EnuSetPinDir+0x174>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24

					error = ES_OK ;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	45 c0       	rjmp	.+138    	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin16 and pin23 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 31       	cpi	r24, 0x10	; 16
    1d2a:	e8 f0       	brcs	.+58     	; 0x1d66 <DIO_EnuSetPinDir+0x1c8>
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	88 31       	cpi	r24, 0x18	; 24
    1d30:	d0 f4       	brcc	.+52     	; 0x1d66 <DIO_EnuSetPinDir+0x1c8>

				{
					CLR_BIT ( DIO_DDRC , ( (Copy_U8PinNumber) - (DIO_PIN16)  ) ) ;
    1d32:	a4 e3       	ldi	r26, 0x34	; 52
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e4 e3       	ldi	r30, 0x34	; 52
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 01       	movw	r18, r24
    1d46:	20 51       	subi	r18, 0x10	; 16
    1d48:	30 40       	sbci	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <DIO_EnuSetPinDir+0x1b8>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <DIO_EnuSetPinDir+0x1b4>
    1d5a:	80 95       	com	r24
    1d5c:	84 23       	and	r24, r20
    1d5e:	8c 93       	st	X, r24

					error = ES_OK ;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	25 c0       	rjmp	.+74     	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin24 and pin31 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	88 31       	cpi	r24, 0x18	; 24
    1d6a:	e8 f0       	brcs	.+58     	; 0x1da6 <DIO_EnuSetPinDir+0x208>
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	80 32       	cpi	r24, 0x20	; 32
    1d70:	d0 f4       	brcc	.+52     	; 0x1da6 <DIO_EnuSetPinDir+0x208>

				{
					CLR_BIT(DIO_DDRD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    1d72:	a1 e3       	ldi	r26, 0x31	; 49
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e1 e3       	ldi	r30, 0x31	; 49
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 01       	movw	r18, r24
    1d86:	28 51       	subi	r18, 0x18	; 24
    1d88:	30 40       	sbci	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_EnuSetPinDir+0x1f8>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_EnuSetPinDir+0x1f4>
    1d9a:	80 95       	com	r24
    1d9c:	84 23       	and	r24, r20
    1d9e:	8c 93       	st	X, r24

					error = ES_OK ;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <DIO_EnuSetPinDir+0x212>
				}
			else

				{
					error = ES_OUT_OF_RANGE ;
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_EnuSetPinDir+0x212>
		}


	else
		{
			error = ES_OUT_OF_RANGE ;
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <DIO_EnuSetPinVal>:

/************************************/
/****  Define a value on a pin   ****/
/************************************/
ErrorState DIO_EnuSetPinVal(u8 Copy_U8PinNumber , u8 Copy_U8Value)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_EnuSetPinVal+0x6>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8a 83       	std	Y+2, r24	; 0x02
    1dcc:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1dce:	19 82       	std	Y+1, r1	; 0x01

	if ( Copy_U8Value == DIO_HIGH )
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <DIO_EnuSetPinVal+0x1a>
    1dd6:	79 c0       	rjmp	.+242    	; 0x1eca <DIO_EnuSetPinVal+0x10c>
			{

				/** If pin number between pin0 and pin7 set this pin as an HIGH **/
				if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	b0 f4       	brcc	.+44     	; 0x1e0a <DIO_EnuSetPinVal+0x4c>

					{
						SET_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    1dde:	ab e3       	ldi	r26, 0x3B	; 59
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	eb e3       	ldi	r30, 0x3B	; 59
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <DIO_EnuSetPinVal+0x3e>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <DIO_EnuSetPinVal+0x3a>
    1e00:	84 2b       	or	r24, r20
    1e02:	8c 93       	st	X, r24

						error = ES_OK ;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	e3 c0       	rjmp	.+454    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}


				/** If pin number between pin8 and pin15 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	e0 f0       	brcs	.+56     	; 0x1e48 <DIO_EnuSetPinVal+0x8a>
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 31       	cpi	r24, 0x10	; 16
    1e14:	c8 f4       	brcc	.+50     	; 0x1e48 <DIO_EnuSetPinVal+0x8a>

					{
						SET_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    1e16:	a8 e3       	ldi	r26, 0x38	; 56
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e8 e3       	ldi	r30, 0x38	; 56
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 01       	movw	r18, r24
    1e2a:	28 50       	subi	r18, 0x08	; 8
    1e2c:	30 40       	sbci	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_EnuSetPinVal+0x7c>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_EnuSetPinVal+0x78>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24

						error = ES_OK ;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	c4 c0       	rjmp	.+392    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin16 and pin23 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 31       	cpi	r24, 0x10	; 16
    1e4c:	e0 f0       	brcs	.+56     	; 0x1e86 <DIO_EnuSetPinVal+0xc8>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	88 31       	cpi	r24, 0x18	; 24
    1e52:	c8 f4       	brcc	.+50     	; 0x1e86 <DIO_EnuSetPinVal+0xc8>

						{
							SET_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    1e54:	a5 e3       	ldi	r26, 0x35	; 53
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 01       	movw	r18, r24
    1e68:	20 51       	subi	r18, 0x10	; 16
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_EnuSetPinVal+0xba>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_EnuSetPinVal+0xb6>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24

							error = ES_OK ;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	a5 c0       	rjmp	.+330    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
						}

				/** If pin number between pin24 and pin31 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	88 31       	cpi	r24, 0x18	; 24
    1e8a:	e0 f0       	brcs	.+56     	; 0x1ec4 <DIO_EnuSetPinVal+0x106>
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	80 32       	cpi	r24, 0x20	; 32
    1e90:	c8 f4       	brcc	.+50     	; 0x1ec4 <DIO_EnuSetPinVal+0x106>

						{
							SET_BIT(DIO_PORTD , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    1e92:	a2 e3       	ldi	r26, 0x32	; 50
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e2 e3       	ldi	r30, 0x32	; 50
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 01       	movw	r18, r24
    1ea6:	28 51       	subi	r18, 0x18	; 24
    1ea8:	30 40       	sbci	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_EnuSetPinVal+0xf8>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_EnuSetPinVal+0xf4>
    1eba:	84 2b       	or	r24, r20
    1ebc:	8c 93       	st	X, r24

							error = ES_OK ;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	86 c0       	rjmp	.+268    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
						}
				else

					{
					error = ES_OUT_OF_RANGE ;
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	83 c0       	rjmp	.+262    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}
			}



		else if (Copy_U8Value == DIO_LOW)
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 23       	and	r24, r24
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <DIO_EnuSetPinVal+0x114>
    1ed0:	7d c0       	rjmp	.+250    	; 0x1fcc <DIO_EnuSetPinVal+0x20e>
			{

			/** If pin number between pin0 and pin7 set this pin as an LOW **/
				if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	88 30       	cpi	r24, 0x08	; 8
    1ed6:	b8 f4       	brcc	.+46     	; 0x1f06 <DIO_EnuSetPinVal+0x148>

					{
						CLR_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    1ed8:	ab e3       	ldi	r26, 0x3B	; 59
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_EnuSetPinVal+0x138>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_EnuSetPinVal+0x134>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24

						error = ES_OK ;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	65 c0       	rjmp	.+202    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}


				/** If pin number between pin8 and pin15 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	e8 f0       	brcs	.+58     	; 0x1f46 <DIO_EnuSetPinVal+0x188>
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	80 31       	cpi	r24, 0x10	; 16
    1f10:	d0 f4       	brcc	.+52     	; 0x1f46 <DIO_EnuSetPinVal+0x188>

					{
						CLR_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    1f12:	a8 e3       	ldi	r26, 0x38	; 56
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e8 e3       	ldi	r30, 0x38	; 56
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 01       	movw	r18, r24
    1f26:	28 50       	subi	r18, 0x08	; 8
    1f28:	30 40       	sbci	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <DIO_EnuSetPinVal+0x178>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <DIO_EnuSetPinVal+0x174>
    1f3a:	80 95       	com	r24
    1f3c:	84 23       	and	r24, r20
    1f3e:	8c 93       	st	X, r24

						error = ES_OK ;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	45 c0       	rjmp	.+138    	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin16 and pin23 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	80 31       	cpi	r24, 0x10	; 16
    1f4a:	e8 f0       	brcs	.+58     	; 0x1f86 <DIO_EnuSetPinVal+0x1c8>
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	88 31       	cpi	r24, 0x18	; 24
    1f50:	d0 f4       	brcc	.+52     	; 0x1f86 <DIO_EnuSetPinVal+0x1c8>

					{
						CLR_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    1f52:	a5 e3       	ldi	r26, 0x35	; 53
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e5 e3       	ldi	r30, 0x35	; 53
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 01       	movw	r18, r24
    1f66:	20 51       	subi	r18, 0x10	; 16
    1f68:	30 40       	sbci	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_EnuSetPinVal+0x1b8>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_EnuSetPinVal+0x1b4>
    1f7a:	80 95       	com	r24
    1f7c:	84 23       	and	r24, r20
    1f7e:	8c 93       	st	X, r24

							error = ES_OK ;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	25 c0       	rjmp	.+74     	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin24 and pin31 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	88 31       	cpi	r24, 0x18	; 24
    1f8a:	e8 f0       	brcs	.+58     	; 0x1fc6 <DIO_EnuSetPinVal+0x208>
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	80 32       	cpi	r24, 0x20	; 32
    1f90:	d0 f4       	brcc	.+52     	; 0x1fc6 <DIO_EnuSetPinVal+0x208>

					{
						CLR_BIT(DIO_PORTD , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    1f92:	a2 e3       	ldi	r26, 0x32	; 50
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e2 e3       	ldi	r30, 0x32	; 50
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9c 01       	movw	r18, r24
    1fa6:	28 51       	subi	r18, 0x18	; 24
    1fa8:	30 40       	sbci	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_EnuSetPinVal+0x1f8>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_EnuSetPinVal+0x1f4>
    1fba:	80 95       	com	r24
    1fbc:	84 23       	and	r24, r20
    1fbe:	8c 93       	st	X, r24

							error = ES_OK ;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
					}
				else

					{
						error = ES_OUT_OF_RANGE ;
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <DIO_EnuSetPinVal+0x212>
			}


		else
			{
				error = ES_OUT_OF_RANGE ;
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	89 83       	std	Y+1, r24	; 0x01
			}


	return error ;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <DIO_EnuGetPinVal>:

/*********************************/
/****  Get a value from a pin ****/
/*********************************/
ErrorState DIO_EnuGetPinVal (u8 Copy_U8PinNumber , u32 * Copy_PU8Value)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <DIO_EnuGetPinVal+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <DIO_EnuGetPinVal+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	7c 83       	std	Y+4, r23	; 0x04
    1fee:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1ff0:	19 82       	std	Y+1, r1	; 0x01

	/** If pin number between pin0 and pin7 Get the value on this pin **/
	if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	88 30       	cpi	r24, 0x08	; 8
    1ff6:	00 f5       	brcc	.+64     	; 0x2038 <DIO_EnuGetPinVal+0x5a>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINA , ((Copy_U8PinNumber) ) ) ;
    1ff8:	e9 e3       	ldi	r30, 0x39	; 57
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_EnuGetPinVal+0x32>
    200c:	55 95       	asr	r21
    200e:	47 95       	ror	r20
    2010:	8a 95       	dec	r24
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_EnuGetPinVal+0x2e>
    2014:	ca 01       	movw	r24, r20
    2016:	aa 27       	eor	r26, r26
    2018:	97 fd       	sbrc	r25, 7
    201a:	a0 95       	com	r26
    201c:	ba 2f       	mov	r27, r26
    201e:	81 70       	andi	r24, 0x01	; 1
    2020:	90 70       	andi	r25, 0x00	; 0
    2022:	a0 70       	andi	r26, 0x00	; 0
    2024:	b0 70       	andi	r27, 0x00	; 0
    2026:	eb 81       	ldd	r30, Y+3	; 0x03
    2028:	fc 81       	ldd	r31, Y+4	; 0x04
    202a:	80 83       	st	Z, r24
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	a2 83       	std	Z+2, r26	; 0x02
    2030:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	77 c0       	rjmp	.+238    	; 0x2126 <DIO_EnuGetPinVal+0x148>
		}


	/** If pin number between pin8 and pin15 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	88 30       	cpi	r24, 0x08	; 8
    203c:	20 f1       	brcs	.+72     	; 0x2086 <DIO_EnuGetPinVal+0xa8>
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	80 31       	cpi	r24, 0x10	; 16
    2042:	08 f5       	brcc	.+66     	; 0x2086 <DIO_EnuGetPinVal+0xa8>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2044:	e6 e3       	ldi	r30, 0x36	; 54
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	08 97       	sbiw	r24, 0x08	; 8
    2056:	a9 01       	movw	r20, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <DIO_EnuGetPinVal+0x80>
    205a:	55 95       	asr	r21
    205c:	47 95       	ror	r20
    205e:	8a 95       	dec	r24
    2060:	e2 f7       	brpl	.-8      	; 0x205a <DIO_EnuGetPinVal+0x7c>
    2062:	ca 01       	movw	r24, r20
    2064:	aa 27       	eor	r26, r26
    2066:	97 fd       	sbrc	r25, 7
    2068:	a0 95       	com	r26
    206a:	ba 2f       	mov	r27, r26
    206c:	81 70       	andi	r24, 0x01	; 1
    206e:	90 70       	andi	r25, 0x00	; 0
    2070:	a0 70       	andi	r26, 0x00	; 0
    2072:	b0 70       	andi	r27, 0x00	; 0
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	80 83       	st	Z, r24
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	a2 83       	std	Z+2, r26	; 0x02
    207e:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	50 c0       	rjmp	.+160    	; 0x2126 <DIO_EnuGetPinVal+0x148>
		}

	/** If pin number between pin16 and pin23 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 31       	cpi	r24, 0x10	; 16
    208a:	20 f1       	brcs	.+72     	; 0x20d4 <DIO_EnuGetPinVal+0xf6>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	88 31       	cpi	r24, 0x18	; 24
    2090:	08 f5       	brcc	.+66     	; 0x20d4 <DIO_EnuGetPinVal+0xf6>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    2092:	e3 e3       	ldi	r30, 0x33	; 51
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	40 97       	sbiw	r24, 0x10	; 16
    20a4:	a9 01       	movw	r20, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_EnuGetPinVal+0xce>
    20a8:	55 95       	asr	r21
    20aa:	47 95       	ror	r20
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_EnuGetPinVal+0xca>
    20b0:	ca 01       	movw	r24, r20
    20b2:	aa 27       	eor	r26, r26
    20b4:	97 fd       	sbrc	r25, 7
    20b6:	a0 95       	com	r26
    20b8:	ba 2f       	mov	r27, r26
    20ba:	81 70       	andi	r24, 0x01	; 1
    20bc:	90 70       	andi	r25, 0x00	; 0
    20be:	a0 70       	andi	r26, 0x00	; 0
    20c0:	b0 70       	andi	r27, 0x00	; 0
    20c2:	eb 81       	ldd	r30, Y+3	; 0x03
    20c4:	fc 81       	ldd	r31, Y+4	; 0x04
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	29 c0       	rjmp	.+82     	; 0x2126 <DIO_EnuGetPinVal+0x148>
		}

	/** If pin number between pin24 and pin31 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	88 31       	cpi	r24, 0x18	; 24
    20d8:	20 f1       	brcs	.+72     	; 0x2122 <DIO_EnuGetPinVal+0x144>
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	80 32       	cpi	r24, 0x20	; 32
    20de:	08 f5       	brcc	.+66     	; 0x2122 <DIO_EnuGetPinVal+0x144>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PIND , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    20e0:	e0 e3       	ldi	r30, 0x30	; 48
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	48 97       	sbiw	r24, 0x18	; 24
    20f2:	a9 01       	movw	r20, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_EnuGetPinVal+0x11c>
    20f6:	55 95       	asr	r21
    20f8:	47 95       	ror	r20
    20fa:	8a 95       	dec	r24
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_EnuGetPinVal+0x118>
    20fe:	ca 01       	movw	r24, r20
    2100:	aa 27       	eor	r26, r26
    2102:	97 fd       	sbrc	r25, 7
    2104:	a0 95       	com	r26
    2106:	ba 2f       	mov	r27, r26
    2108:	81 70       	andi	r24, 0x01	; 1
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	a0 70       	andi	r26, 0x00	; 0
    210e:	b0 70       	andi	r27, 0x00	; 0
    2110:	eb 81       	ldd	r30, Y+3	; 0x03
    2112:	fc 81       	ldd	r31, Y+4	; 0x04
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_EnuGetPinVal+0x148>
		}
	else

		{
		error = ES_OUT_OF_RANGE ;
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    2126:	89 81       	ldd	r24, Y+1	; 0x01
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <DIO_EnuTogglePin>:

/*****************************/
/****  Toggle a pin Value ****/
/*****************************/
ErrorState DIO_EnuTogglePin(u8 Copy_U8PinNumber)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_EnuTogglePin+0x6>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    2142:	19 82       	std	Y+1, r1	; 0x01

	/** If pin number between pin0 and pin7 TOGGLE this pin **/
	 if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	b0 f4       	brcc	.+44     	; 0x2176 <DIO_EnuTogglePin+0x40>

	 	{
	 		TOGGLE_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    214a:	ab e3       	ldi	r26, 0x3B	; 59
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	eb e3       	ldi	r30, 0x3B	; 59
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <DIO_EnuTogglePin+0x32>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <DIO_EnuTogglePin+0x2e>
    216c:	84 27       	eor	r24, r20
    216e:	8c 93       	st	X, r24

	 		error = ES_OK ;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	5f c0       	rjmp	.+190    	; 0x2234 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin8 and pin15 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	e0 f0       	brcs	.+56     	; 0x21b4 <DIO_EnuTogglePin+0x7e>
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 31       	cpi	r24, 0x10	; 16
    2180:	c8 f4       	brcc	.+50     	; 0x21b4 <DIO_EnuTogglePin+0x7e>

	 	{
		 	TOGGLE_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2182:	a8 e3       	ldi	r26, 0x38	; 56
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e8 e3       	ldi	r30, 0x38	; 56
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	48 2f       	mov	r20, r24
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 01       	movw	r18, r24
    2196:	28 50       	subi	r18, 0x08	; 8
    2198:	30 40       	sbci	r19, 0x00	; 0
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	02 2e       	mov	r0, r18
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <DIO_EnuTogglePin+0x70>
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	0a 94       	dec	r0
    21a8:	e2 f7       	brpl	.-8      	; 0x21a2 <DIO_EnuTogglePin+0x6c>
    21aa:	84 27       	eor	r24, r20
    21ac:	8c 93       	st	X, r24

		 	error = ES_OK ;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	40 c0       	rjmp	.+128    	; 0x2234 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin16 and pin23 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	80 31       	cpi	r24, 0x10	; 16
    21b8:	e0 f0       	brcs	.+56     	; 0x21f2 <DIO_EnuTogglePin+0xbc>
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 31       	cpi	r24, 0x18	; 24
    21be:	c8 f4       	brcc	.+50     	; 0x21f2 <DIO_EnuTogglePin+0xbc>

	 	{
		 	TOGGLE_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    21c0:	a5 e3       	ldi	r26, 0x35	; 53
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e5 e3       	ldi	r30, 0x35	; 53
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 01       	movw	r18, r24
    21d4:	20 51       	subi	r18, 0x10	; 16
    21d6:	30 40       	sbci	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <DIO_EnuTogglePin+0xae>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <DIO_EnuTogglePin+0xaa>
    21e8:	84 27       	eor	r24, r20
    21ea:	8c 93       	st	X, r24

		 	error = ES_OK ;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	21 c0       	rjmp	.+66     	; 0x2234 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin24 and pin31 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	88 31       	cpi	r24, 0x18	; 24
    21f6:	e0 f0       	brcs	.+56     	; 0x2230 <DIO_EnuTogglePin+0xfa>
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 32       	cpi	r24, 0x20	; 32
    21fc:	c8 f4       	brcc	.+50     	; 0x2230 <DIO_EnuTogglePin+0xfa>

	 	{
		 	TOGGLE_BIT (DIO_PORTD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    21fe:	a2 e3       	ldi	r26, 0x32	; 50
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e2 e3       	ldi	r30, 0x32	; 50
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 01       	movw	r18, r24
    2212:	28 51       	subi	r18, 0x18	; 24
    2214:	30 40       	sbci	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <DIO_EnuTogglePin+0xec>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <DIO_EnuTogglePin+0xe8>
    2226:	84 27       	eor	r24, r20
    2228:	8c 93       	st	X, r24

		 	error = ES_OK ;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_EnuTogglePin+0xfe>
	 	}
	 else

	 	{
		 error = ES_OUT_OF_RANGE ;
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	89 83       	std	Y+1, r24	; 0x01
	 	}

	 return error ;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <DIO_EnuSetPortDir>:

/*********************************************/
/********  To set the Port dirction  *********/
/*********************************************/
ErrorState DIO_EnuSetPortDir( u8 Copy_U8PortNum , u8 Copy_U8PortDirectionValue)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <DIO_EnuSetPortDir+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <DIO_EnuSetPortDir+0x8>
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error=ES_NOK ;
    2252:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8PortNum)
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3d 83       	std	Y+5, r19	; 0x05
    225c:	2c 83       	std	Y+4, r18	; 0x04
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	91 05       	cpc	r25, r1
    2266:	e1 f0       	breq	.+56     	; 0x22a0 <DIO_EnuSetPortDir+0x60>
    2268:	2c 81       	ldd	r18, Y+4	; 0x04
    226a:	3d 81       	ldd	r19, Y+5	; 0x05
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <DIO_EnuSetPortDir+0x3c>
    2272:	8c 81       	ldd	r24, Y+4	; 0x04
    2274:	9d 81       	ldd	r25, Y+5	; 0x05
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	61 f0       	breq	.+24     	; 0x2292 <DIO_EnuSetPortDir+0x52>
    227a:	27 c0       	rjmp	.+78     	; 0x22ca <DIO_EnuSetPortDir+0x8a>
    227c:	2c 81       	ldd	r18, Y+4	; 0x04
    227e:	3d 81       	ldd	r19, Y+5	; 0x05
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	a1 f0       	breq	.+40     	; 0x22ae <DIO_EnuSetPortDir+0x6e>
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	b1 f0       	breq	.+44     	; 0x22bc <DIO_EnuSetPortDir+0x7c>
    2290:	1c c0       	rjmp	.+56     	; 0x22ca <DIO_EnuSetPortDir+0x8a>
		{
			case DDRA:  DIO_DDRA = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    2292:	ea e3       	ldi	r30, 0x3A	; 58
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	80 83       	st	Z, r24
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	17 c0       	rjmp	.+46     	; 0x22ce <DIO_EnuSetPortDir+0x8e>
			case DDRB:  DIO_DDRB = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    22a0:	e7 e3       	ldi	r30, 0x37	; 55
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	80 83       	st	Z, r24
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	10 c0       	rjmp	.+32     	; 0x22ce <DIO_EnuSetPortDir+0x8e>
			case DDRC:  DIO_DDRC = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    22ae:	e4 e3       	ldi	r30, 0x34	; 52
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	80 83       	st	Z, r24
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	09 c0       	rjmp	.+18     	; 0x22ce <DIO_EnuSetPortDir+0x8e>
			case DDRD:  DIO_DDRD = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    22bc:	e1 e3       	ldi	r30, 0x31	; 49
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	80 83       	st	Z, r24
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <DIO_EnuSetPortDir+0x8e>
			default  : 	error=ES_OUT_OF_RANGE ;		       	      	   		    break ;
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <DIO_EnuSetPortVal>:

/*********************************************/
/********  To set a value on a port  *********/
/*********************************************/
ErrorState DIO_EnuSetPortVal( u8 Copy_U8PortNum , u8 Copy_U8Value )
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <DIO_EnuSetPortVal+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <DIO_EnuSetPortVal+0x8>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	8a 83       	std	Y+2, r24	; 0x02
    22f0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error=ES_NOK ;
    22f2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8PortNum)
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3d 83       	std	Y+5, r19	; 0x05
    22fc:	2c 83       	std	Y+4, r18	; 0x04
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	e1 f0       	breq	.+56     	; 0x2340 <DIO_EnuSetPortVal+0x60>
    2308:	2c 81       	ldd	r18, Y+4	; 0x04
    230a:	3d 81       	ldd	r19, Y+5	; 0x05
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	2c f4       	brge	.+10     	; 0x231c <DIO_EnuSetPortVal+0x3c>
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	61 f0       	breq	.+24     	; 0x2332 <DIO_EnuSetPortVal+0x52>
    231a:	27 c0       	rjmp	.+78     	; 0x236a <DIO_EnuSetPortVal+0x8a>
    231c:	2c 81       	ldd	r18, Y+4	; 0x04
    231e:	3d 81       	ldd	r19, Y+5	; 0x05
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	a1 f0       	breq	.+40     	; 0x234e <DIO_EnuSetPortVal+0x6e>
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	b1 f0       	breq	.+44     	; 0x235c <DIO_EnuSetPortVal+0x7c>
    2330:	1c c0       	rjmp	.+56     	; 0x236a <DIO_EnuSetPortVal+0x8a>
	{
		case PORTA: DIO_PORTA = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    2332:	eb e3       	ldi	r30, 0x3B	; 59
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	80 83       	st	Z, r24
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	17 c0       	rjmp	.+46     	; 0x236e <DIO_EnuSetPortVal+0x8e>
		case PORTB: DIO_PORTB = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    2340:	e8 e3       	ldi	r30, 0x38	; 56
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	80 83       	st	Z, r24
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	10 c0       	rjmp	.+32     	; 0x236e <DIO_EnuSetPortVal+0x8e>
		case PORTC: DIO_PORTC = Copy_U8Value  ;		error=ES_OK ; 	 break ;
    234e:	e5 e3       	ldi	r30, 0x35	; 53
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	80 83       	st	Z, r24
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	09 c0       	rjmp	.+18     	; 0x236e <DIO_EnuSetPortVal+0x8e>
		case PORTD: DIO_PORTD = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    235c:	e2 e3       	ldi	r30, 0x32	; 50
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	80 83       	st	Z, r24
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_EnuSetPortVal+0x8e>
		default : 	error=ES_OUT_OF_RANGE     ;		 		 		 break ;
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	89 83       	std	Y+1, r24	; 0x01
	}

	return error ;
    236e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <KEYPAD_VidInit>:

/***************************************************/
/*************** Keypad Initialization *************/
/***************************************************/
ErrorState KEYPAD_VidInit (void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    238a:	19 82       	std	Y+1, r1	; 0x01

	/*  Input Pins */
	DIO_EnuSetPinDir( KEY_R1 , INPUT ) ;
    238c:	88 e1       	ldi	r24, 0x18	; 24
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R2 , INPUT ) ;
    2394:	89 e1       	ldi	r24, 0x19	; 25
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R3 , INPUT ) ;
    239c:	8a e1       	ldi	r24, 0x1A	; 26
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R4 , INPUT ) ;
    23a4:	8b e1       	ldi	r24, 0x1B	; 27
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>

	/*  Output Pins */
	DIO_EnuSetPinDir( KEY_C1 , OUTPUT ) ;
    23ac:	8c e1       	ldi	r24, 0x1C	; 28
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C2 , OUTPUT ) ;
    23b4:	8d e1       	ldi	r24, 0x1D	; 29
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C3 , OUTPUT ) ;
    23bc:	8e e1       	ldi	r24, 0x1E	; 30
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C4 , OUTPUT ) ;
    23c4:	8f e1       	ldi	r24, 0x1F	; 31
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>


	/*  Latch the Pull Up Resistor */
	DIO_EnuSetPinVal( KEY_R1 , HIGH ) ;
    23cc:	88 e1       	ldi	r24, 0x18	; 24
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R2 , HIGH ) ;
    23d4:	89 e1       	ldi	r24, 0x19	; 25
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R3 , HIGH ) ;
    23dc:	8a e1       	ldi	r24, 0x1A	; 26
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R4 , HIGH ) ;
    23e4:	8b e1       	ldi	r24, 0x1B	; 27
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
	
	error = ES_OK ;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 83       	std	Y+1, r24	; 0x01
	
	return error ;
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <KEYPAD_U8GetKey>:
u8 KEYPAD_U8Numbers[4][4]= KEYPAD_U8DATA ;



ErrorState KEYPAD_U8GetKey (u8 * Copy_PU8PressedKey)
{	
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	68 97       	sbiw	r28, 0x18	; 24
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	98 8f       	std	Y+24, r25	; 0x18
    2410:	8f 8b       	std	Y+23, r24	; 0x17
	ErrorState error = ES_NOK ;
    2412:	1a 8a       	std	Y+18, r1	; 0x12

	u32 Local_U8ButtonStatus=HIGH ;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	ad 8b       	std	Y+21, r26	; 0x15
    2422:	be 8b       	std	Y+22, r27	; 0x16
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
    2424:	19 8a       	std	Y+17, r1	; 0x11
    2426:	da c0       	rjmp	.+436    	; 0x25dc <KEYPAD_U8GetKey+0x1e2>
	{
		DIO_EnuSetPinVal ( KEY_U8Columns[U8_ColCounter] , LOW ) ;
    2428:	89 89       	ldd	r24, Y+17	; 0x11
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	fc 01       	movw	r30, r24
    2430:	e1 52       	subi	r30, 0x21	; 33
    2432:	fe 4f       	sbci	r31, 0xFE	; 254
    2434:	80 81       	ld	r24, Z
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
    243c:	18 8a       	std	Y+16, r1	; 0x10
    243e:	bd c0       	rjmp	.+378    	; 0x25ba <KEYPAD_U8GetKey+0x1c0>
		{

			/* Get the pin value twice or more with delay for noise canceling and also bouncing effect */
			for(u8 Local_U8I=0 ; Local_U8I < 3 ; Local_U8I++ )
    2440:	1f 86       	std	Y+15, r1	; 0x0f
    2442:	82 c0       	rjmp	.+260    	; 0x2548 <KEYPAD_U8GetKey+0x14e>
			{
				DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;
    2444:	88 89       	ldd	r24, Y+16	; 0x10
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	fc 01       	movw	r30, r24
    244c:	e5 52       	subi	r30, 0x25	; 37
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	80 81       	ld	r24, Z
    2452:	9e 01       	movw	r18, r28
    2454:	2d 5e       	subi	r18, 0xED	; 237
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	b9 01       	movw	r22, r18
    245a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_EnuGetPinVal>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e8       	ldi	r26, 0x80	; 128
    2464:	bf e3       	ldi	r27, 0x3F	; 63
    2466:	8b 87       	std	Y+11, r24	; 0x0b
    2468:	9c 87       	std	Y+12, r25	; 0x0c
    246a:	ad 87       	std	Y+13, r26	; 0x0d
    246c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a ef       	ldi	r20, 0xFA	; 250
    247c:	54 e4       	ldi	r21, 0x44	; 68
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f 83       	std	Y+7, r24	; 0x07
    2488:	98 87       	std	Y+8, r25	; 0x08
    248a:	a9 87       	std	Y+9, r26	; 0x09
    248c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <KEYPAD_U8GetKey+0xb6>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <KEYPAD_U8GetKey+0x134>
	else if (__tmp > 65535)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <KEYPAD_U8GetKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <KEYPAD_U8GetKey+0x116>
    24f2:	88 ec       	ldi	r24, 0xC8	; 200
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <KEYPAD_U8GetKey+0x104>
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <KEYPAD_U8GetKey+0xf8>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <KEYPAD_U8GetKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <KEYPAD_U8GetKey+0x140>
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
		{

			/* Get the pin value twice or more with delay for noise canceling and also bouncing effect */
			for(u8 Local_U8I=0 ; Local_U8I < 3 ; Local_U8I++ )
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	8f 87       	std	Y+15, r24	; 0x0f
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	08 f4       	brcc	.+2      	; 0x2550 <KEYPAD_U8GetKey+0x156>
    254e:	7a cf       	rjmp	.-268    	; 0x2444 <KEYPAD_U8GetKey+0x4a>
			{
				DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;
				_delay_ms(1) ;
			}

			if (!Local_U8ButtonStatus )
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	ad 89       	ldd	r26, Y+21	; 0x15
    2556:	be 89       	ldd	r27, Y+22	; 0x16
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	a1 05       	cpc	r26, r1
    255c:	b1 05       	cpc	r27, r1
    255e:	51 f5       	brne	.+84     	; 0x25b4 <KEYPAD_U8GetKey+0x1ba>
    2560:	0d c0       	rjmp	.+26     	; 0x257c <KEYPAD_U8GetKey+0x182>
				
			{
				/* Polling on the button status until relief hand */
				while (!Local_U8ButtonStatus) 	{	DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;	   }
    2562:	88 89       	ldd	r24, Y+16	; 0x10
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	fc 01       	movw	r30, r24
    256a:	e5 52       	subi	r30, 0x25	; 37
    256c:	fe 4f       	sbci	r31, 0xFE	; 254
    256e:	80 81       	ld	r24, Z
    2570:	9e 01       	movw	r18, r28
    2572:	2d 5e       	subi	r18, 0xED	; 237
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	b9 01       	movw	r22, r18
    2578:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_EnuGetPinVal>
    257c:	8b 89       	ldd	r24, Y+19	; 0x13
    257e:	9c 89       	ldd	r25, Y+20	; 0x14
    2580:	ad 89       	ldd	r26, Y+21	; 0x15
    2582:	be 89       	ldd	r27, Y+22	; 0x16
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	59 f3       	breq	.-42     	; 0x2562 <KEYPAD_U8GetKey+0x168>

				* Copy_PU8PressedKey = KEYPAD_U8Numbers[U8_RowCounter][U8_ColCounter] ;
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	48 2f       	mov	r20, r24
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	ca 01       	movw	r24, r20
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	82 0f       	add	r24, r18
    25a4:	93 1f       	adc	r25, r19
    25a6:	fc 01       	movw	r30, r24
    25a8:	ed 51       	subi	r30, 0x1D	; 29
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	80 81       	ld	r24, Z
    25ae:	ef 89       	ldd	r30, Y+23	; 0x17
    25b0:	f8 8d       	ldd	r31, Y+24	; 0x18
    25b2:	80 83       	st	Z, r24
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
	{
		DIO_EnuSetPinVal ( KEY_U8Columns[U8_ColCounter] , LOW ) ;
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
    25b4:	88 89       	ldd	r24, Y+16	; 0x10
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	88 8b       	std	Y+16, r24	; 0x10
    25ba:	88 89       	ldd	r24, Y+16	; 0x10
    25bc:	84 30       	cpi	r24, 0x04	; 4
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <KEYPAD_U8GetKey+0x1c8>
    25c0:	3f cf       	rjmp	.-386    	; 0x2440 <KEYPAD_U8GetKey+0x46>

				* Copy_PU8PressedKey = KEYPAD_U8Numbers[U8_RowCounter][U8_ColCounter] ;
			}
		}

		DIO_EnuSetPinVal( KEY_U8Columns[U8_ColCounter] , HIGH ) ;
    25c2:	89 89       	ldd	r24, Y+17	; 0x11
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	fc 01       	movw	r30, r24
    25ca:	e1 52       	subi	r30, 0x21	; 33
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	80 81       	ld	r24, Z
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
{	
	ErrorState error = ES_NOK ;

	u32 Local_U8ButtonStatus=HIGH ;
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
    25d6:	89 89       	ldd	r24, Y+17	; 0x11
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	89 8b       	std	Y+17, r24	; 0x11
    25dc:	89 89       	ldd	r24, Y+17	; 0x11
    25de:	84 30       	cpi	r24, 0x04	; 4
    25e0:	08 f4       	brcc	.+2      	; 0x25e4 <KEYPAD_U8GetKey+0x1ea>
    25e2:	22 cf       	rjmp	.-444    	; 0x2428 <KEYPAD_U8GetKey+0x2e>
		}

		DIO_EnuSetPinVal( KEY_U8Columns[U8_ColCounter] , HIGH ) ;
	}
	
	error = ES_OK ;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	8a 8b       	std	Y+18, r24	; 0x12

	return error ;
    25e8:	8a 89       	ldd	r24, Y+18	; 0x12

}
    25ea:	68 96       	adiw	r28, 0x18	; 24
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <main>:




int main(void)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	a1 97       	sbiw	r28, 0x21	; 33
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61

KEYPAD_VidInit() ;
    2610:	0e 94 c0 11 	call	0x2380	; 0x2380 <KEYPAD_VidInit>
LCD_VidInit() ;
    2614:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <LCD_VidInit>
DIO_EnuSetPinDir(PIN16,OUTPUT) ;
    2618:	80 e1       	ldi	r24, 0x10	; 16
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
DIO_EnuSetPinDir(PIN17,OUTPUT) ;
    2620:	81 e1       	ldi	r24, 0x11	; 17
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>
DIO_EnuSetPinDir(PIN18,OUTPUT) ;
    2628:	82 e1       	ldi	r24, 0x12	; 18
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <DIO_EnuSetPinDir>


u8 char_num=0 ;u8 k=0 ;
    2630:	1f 8e       	std	Y+31, r1	; 0x1f
    2632:	1e 8e       	std	Y+30, r1	; 0x1e
while(1)
{

	LCD_VidSetPosition(0,0) ;
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
	LCD_VidWriteString("Enter Username :") ;
    263c:	80 e6       	ldi	r24, 0x60	; 96
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>

	key=Not_Pressed;
    2644:	10 92 0c 02 	sts	0x020C, r1
	KEYPAD_U8GetKey(&key) ;
    2648:	8c e0       	ldi	r24, 0x0C	; 12
    264a:	92 e0       	ldi	r25, 0x02	; 2
    264c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <KEYPAD_U8GetKey>
	if (key==Not_Pressed) { continue ; }
    2650:	80 91 0c 02 	lds	r24, 0x020C
    2654:	88 23       	and	r24, r24
    2656:	71 f3       	breq	.-36     	; 0x2634 <main+0x38>

	else
	{

	   if( (key>='0' && key <='9') || (key=='+') || (key=='-')  || (key=='/')|| (key=='*') )
    2658:	80 91 0c 02 	lds	r24, 0x020C
    265c:	80 33       	cpi	r24, 0x30	; 48
    265e:	20 f0       	brcs	.+8      	; 0x2668 <main+0x6c>
    2660:	80 91 0c 02 	lds	r24, 0x020C
    2664:	8a 33       	cpi	r24, 0x3A	; 58
    2666:	80 f0       	brcs	.+32     	; 0x2688 <main+0x8c>
    2668:	80 91 0c 02 	lds	r24, 0x020C
    266c:	8b 32       	cpi	r24, 0x2B	; 43
    266e:	61 f0       	breq	.+24     	; 0x2688 <main+0x8c>
    2670:	80 91 0c 02 	lds	r24, 0x020C
    2674:	8d 32       	cpi	r24, 0x2D	; 45
    2676:	41 f0       	breq	.+16     	; 0x2688 <main+0x8c>
    2678:	80 91 0c 02 	lds	r24, 0x020C
    267c:	8f 32       	cpi	r24, 0x2F	; 47
    267e:	21 f0       	breq	.+8      	; 0x2688 <main+0x8c>
    2680:	80 91 0c 02 	lds	r24, 0x020C
    2684:	8a 32       	cpi	r24, 0x2A	; 42
    2686:	d1 f4       	brne	.+52     	; 0x26bc <main+0xc0>
	   	{   LCD_VidSetPosition(1,2+k) ;
    2688:	8e 8d       	ldd	r24, Y+30	; 0x1e
    268a:	98 2f       	mov	r25, r24
    268c:	9e 5f       	subi	r25, 0xFE	; 254
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	69 2f       	mov	r22, r25
    2692:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
	   		user[char_num]=key ;
    2696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	20 91 0c 02 	lds	r18, 0x020C
    26a0:	fc 01       	movw	r30, r24
    26a2:	e0 50       	subi	r30, 0x00	; 0
    26a4:	fe 4f       	sbci	r31, 0xFE	; 254
    26a6:	20 83       	st	Z, r18
	   		LCD_VidSendData(key) ;
    26a8:	80 91 0c 02 	lds	r24, 0x020C
    26ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>
	   		char_num++;
    26b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8f 8f       	std	Y+31, r24	; 0x1f
	   		k++ ;
    26b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b8:	8f 5f       	subi	r24, 0xFF	; 255
    26ba:	8e 8f       	std	Y+30, r24	; 0x1e
	   	}

		if (key=='E')
    26bc:	80 91 0c 02 	lds	r24, 0x020C
    26c0:	85 34       	cpi	r24, 0x45	; 69
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <main+0xca>
    26c4:	ff c1       	rjmp	.+1022   	; 0x2ac4 <main+0x4c8>
		{
			if (name_check(user) )
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	92 e0       	ldi	r25, 0x02	; 2
    26ca:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <name_check>
    26ce:	88 23       	and	r24, r24
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <main+0xd8>
    26d2:	74 c1       	rjmp	.+744    	; 0x29bc <main+0x3c0>
			{
				free_name(user) ;
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <free_name>
				k=0 ;
    26dc:	1e 8e       	std	Y+30, r1	; 0x1e
				char_num=0 ;
    26de:	1f 8e       	std	Y+31, r1	; 0x1f
				LCD_VidSendCommand(0x01) ;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
    26e6:	64 c1       	rjmp	.+712    	; 0x29b0 <main+0x3b4>

				while(trials!=0)
				{
					u8 return_key=0 ;
    26e8:	1d 8e       	std	Y+29, r1	; 0x1d
					LCD_VidSetPosition(0,0) ;
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
					LCD_VidWriteString("Enter Password") ;
    26f2:	81 e7       	ldi	r24, 0x71	; 113
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>

					key=Not_Pressed;
    26fa:	10 92 0c 02 	sts	0x020C, r1
					KEYPAD_U8GetKey(&key) ;
    26fe:	8c e0       	ldi	r24, 0x0C	; 12
    2700:	92 e0       	ldi	r25, 0x02	; 2
    2702:	0e 94 fd 11 	call	0x23fa	; 0x23fa <KEYPAD_U8GetKey>

					if( (key>='0' && key <='9') || (key=='+') || (key=='-') || (key=='/')|| (key=='*'))
    2706:	80 91 0c 02 	lds	r24, 0x020C
    270a:	80 33       	cpi	r24, 0x30	; 48
    270c:	20 f0       	brcs	.+8      	; 0x2716 <main+0x11a>
    270e:	80 91 0c 02 	lds	r24, 0x020C
    2712:	8a 33       	cpi	r24, 0x3A	; 58
    2714:	80 f0       	brcs	.+32     	; 0x2736 <main+0x13a>
    2716:	80 91 0c 02 	lds	r24, 0x020C
    271a:	8b 32       	cpi	r24, 0x2B	; 43
    271c:	61 f0       	breq	.+24     	; 0x2736 <main+0x13a>
    271e:	80 91 0c 02 	lds	r24, 0x020C
    2722:	8d 32       	cpi	r24, 0x2D	; 45
    2724:	41 f0       	breq	.+16     	; 0x2736 <main+0x13a>
    2726:	80 91 0c 02 	lds	r24, 0x020C
    272a:	8f 32       	cpi	r24, 0x2F	; 47
    272c:	21 f0       	breq	.+8      	; 0x2736 <main+0x13a>
    272e:	80 91 0c 02 	lds	r24, 0x020C
    2732:	8a 32       	cpi	r24, 0x2A	; 42
    2734:	c9 f4       	brne	.+50     	; 0x2768 <main+0x16c>
						   	{   LCD_VidSetPosition(1,2+k) ;
    2736:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2738:	98 2f       	mov	r25, r24
    273a:	9e 5f       	subi	r25, 0xFE	; 254
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	69 2f       	mov	r22, r25
    2740:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
						   		pass[char_num]=key ;
    2744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	20 91 0c 02 	lds	r18, 0x020C
    274e:	fc 01       	movw	r30, r24
    2750:	ea 5f       	subi	r30, 0xFA	; 250
    2752:	fd 4f       	sbci	r31, 0xFD	; 253
    2754:	20 83       	st	Z, r18
						   		LCD_VidSendData('*') ;
    2756:	8a e2       	ldi	r24, 0x2A	; 42
    2758:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>
						   		char_num++;
    275c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	8f 8f       	std	Y+31, r24	; 0x1f
						   		k++ ;
    2762:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	8e 8f       	std	Y+30, r24	; 0x1e
						   	}

					if (key=='E')
    2768:	80 91 0c 02 	lds	r24, 0x020C
    276c:	85 34       	cpi	r24, 0x45	; 69
    276e:	09 f0       	breq	.+2      	; 0x2772 <main+0x176>
    2770:	fa c0       	rjmp	.+500    	; 0x2966 <main+0x36a>
							{
								if(pass_check(pass))
    2772:	86 e0       	ldi	r24, 0x06	; 6
    2774:	92 e0       	ldi	r25, 0x02	; 2
    2776:	0e 94 ef 15 	call	0x2bde	; 0x2bde <pass_check>
    277a:	88 23       	and	r24, r24
    277c:	09 f4       	brne	.+2      	; 0x2780 <main+0x184>
    277e:	5f c0       	rjmp	.+190    	; 0x283e <main+0x242>
									{
										free_name(pass) ;
    2780:	86 e0       	ldi	r24, 0x06	; 6
    2782:	92 e0       	ldi	r25, 0x02	; 2
    2784:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <free_name>
										LCD_VidSendCommand(0x01) ;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
										while(1)
										{
											LCD_VidSetPosition(0,0) ;
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
											LCD_VidWriteString("Fan   5 6") ;
    2796:	80 e8       	ldi	r24, 0x80	; 128
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
											LCD_VidSetPosition(1,0) ;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
											LCD_VidWriteString("Light 8 9") ;
    27a6:	8a e8       	ldi	r24, 0x8A	; 138
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
											key=Not_Pressed;
    27ae:	10 92 0c 02 	sts	0x020C, r1
											KEYPAD_U8GetKey(&key) ;
    27b2:	8c e0       	ldi	r24, 0x0C	; 12
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <KEYPAD_U8GetKey>
											return_key=0 ;
    27ba:	1d 8e       	std	Y+29, r1	; 0x1d
											switch(key)
    27bc:	80 91 0c 02 	lds	r24, 0x020C
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	39 a3       	std	Y+33, r19	; 0x21
    27c6:	28 a3       	std	Y+32, r18	; 0x20
    27c8:	88 a1       	ldd	r24, Y+32	; 0x20
    27ca:	99 a1       	ldd	r25, Y+33	; 0x21
    27cc:	88 33       	cpi	r24, 0x38	; 56
    27ce:	91 05       	cpc	r25, r1
    27d0:	29 f1       	breq	.+74     	; 0x281c <main+0x220>
    27d2:	28 a1       	ldd	r18, Y+32	; 0x20
    27d4:	39 a1       	ldd	r19, Y+33	; 0x21
    27d6:	29 33       	cpi	r18, 0x39	; 57
    27d8:	31 05       	cpc	r19, r1
    27da:	5c f4       	brge	.+22     	; 0x27f2 <main+0x1f6>
    27dc:	88 a1       	ldd	r24, Y+32	; 0x20
    27de:	99 a1       	ldd	r25, Y+33	; 0x21
    27e0:	85 33       	cpi	r24, 0x35	; 53
    27e2:	91 05       	cpc	r25, r1
    27e4:	89 f0       	breq	.+34     	; 0x2808 <main+0x20c>
    27e6:	28 a1       	ldd	r18, Y+32	; 0x20
    27e8:	39 a1       	ldd	r19, Y+33	; 0x21
    27ea:	26 33       	cpi	r18, 0x36	; 54
    27ec:	31 05       	cpc	r19, r1
    27ee:	89 f0       	breq	.+34     	; 0x2812 <main+0x216>
    27f0:	21 c0       	rjmp	.+66     	; 0x2834 <main+0x238>
    27f2:	88 a1       	ldd	r24, Y+32	; 0x20
    27f4:	99 a1       	ldd	r25, Y+33	; 0x21
    27f6:	89 33       	cpi	r24, 0x39	; 57
    27f8:	91 05       	cpc	r25, r1
    27fa:	a9 f0       	breq	.+42     	; 0x2826 <main+0x22a>
    27fc:	28 a1       	ldd	r18, Y+32	; 0x20
    27fe:	39 a1       	ldd	r19, Y+33	; 0x21
    2800:	23 34       	cpi	r18, 0x43	; 67
    2802:	31 05       	cpc	r19, r1
    2804:	a9 f0       	breq	.+42     	; 0x2830 <main+0x234>
    2806:	16 c0       	rjmp	.+44     	; 0x2834 <main+0x238>
											{
											case '5' :	DIO_EnuSetPinVal(PIN16,HIGH) ;			break ;
    2808:	80 e1       	ldi	r24, 0x10	; 16
    280a:	61 e0       	ldi	r22, 0x01	; 1
    280c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
    2810:	11 c0       	rjmp	.+34     	; 0x2834 <main+0x238>
											case '6' :	DIO_EnuSetPinVal(PIN16,LOW ) ;			break ;
    2812:	80 e1       	ldi	r24, 0x10	; 16
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
    281a:	0c c0       	rjmp	.+24     	; 0x2834 <main+0x238>
											case '8' :	DIO_EnuSetPinVal(PIN18,HIGH) ;			break ;
    281c:	82 e1       	ldi	r24, 0x12	; 18
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
    2824:	07 c0       	rjmp	.+14     	; 0x2834 <main+0x238>
											case '9' :	DIO_EnuSetPinVal(PIN18,LOW ) ;			break ;
    2826:	82 e1       	ldi	r24, 0x12	; 18
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <main+0x238>
											case 'C' :	return_key=1	;				        break ;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	8d 8f       	std	Y+29, r24	; 0x1d
											default :break ;
											}

											if(return_key) {break ;}
    2834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2836:	88 23       	and	r24, r24
    2838:	09 f0       	breq	.+2      	; 0x283c <main+0x240>
    283a:	b3 c0       	rjmp	.+358    	; 0x29a2 <main+0x3a6>
    283c:	a8 cf       	rjmp	.-176    	; 0x278e <main+0x192>

										}
									}
								else
									{
										free_name(pass) ;
    283e:	86 e0       	ldi	r24, 0x06	; 6
    2840:	92 e0       	ldi	r25, 0x02	; 2
    2842:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <free_name>
										k=0;
    2846:	1e 8e       	std	Y+30, r1	; 0x1e
										char_num=0;
    2848:	1f 8e       	std	Y+31, r1	; 0x1f
										LCD_VidSendCommand(0x01) ;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
										LCD_VidSetPosition(0,0) ;
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
										LCD_VidWriteString("Wrong Password") ;
    2858:	84 e9       	ldi	r24, 0x94	; 148
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a8 ec       	ldi	r26, 0xC8	; 200
    2866:	b3 e4       	ldi	r27, 0x43	; 67
    2868:	89 8f       	std	Y+25, r24	; 0x19
    286a:	9a 8f       	std	Y+26, r25	; 0x1a
    286c:	ab 8f       	std	Y+27, r26	; 0x1b
    286e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	69 8d       	ldd	r22, Y+25	; 0x19
    2872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a ef       	ldi	r20, 0xFA	; 250
    287e:	54 e4       	ldi	r21, 0x44	; 68
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8d 8b       	std	Y+21, r24	; 0x15
    288a:	9e 8b       	std	Y+22, r25	; 0x16
    288c:	af 8b       	std	Y+23, r26	; 0x17
    288e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2890:	6d 89       	ldd	r22, Y+21	; 0x15
    2892:	7e 89       	ldd	r23, Y+22	; 0x16
    2894:	8f 89       	ldd	r24, Y+23	; 0x17
    2896:	98 8d       	ldd	r25, Y+24	; 0x18
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <main+0x2b6>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <main+0x334>
	else if (__tmp > 65535)
    28b2:	6d 89       	ldd	r22, Y+21	; 0x15
    28b4:	7e 89       	ldd	r23, Y+22	; 0x16
    28b6:	8f 89       	ldd	r24, Y+23	; 0x17
    28b8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	69 8d       	ldd	r22, Y+25	; 0x19
    28cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9c 8b       	std	Y+20, r25	; 0x14
    28f0:	8b 8b       	std	Y+19, r24	; 0x13
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <main+0x316>
    28f4:	88 ec       	ldi	r24, 0xC8	; 200
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	89 8b       	std	Y+17, r24	; 0x11
    28fc:	89 89       	ldd	r24, Y+17	; 0x11
    28fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <main+0x304>
    2904:	9a 8b       	std	Y+18, r25	; 0x12
    2906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8b 89       	ldd	r24, Y+19	; 0x13
    290a:	9c 89       	ldd	r25, Y+20	; 0x14
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9c 8b       	std	Y+20, r25	; 0x14
    2910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8b 89       	ldd	r24, Y+19	; 0x13
    2914:	9c 89       	ldd	r25, Y+20	; 0x14
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <main+0x2f8>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	6d 89       	ldd	r22, Y+21	; 0x15
    291e:	7e 89       	ldd	r23, Y+22	; 0x16
    2920:	8f 89       	ldd	r24, Y+23	; 0x17
    2922:	98 8d       	ldd	r25, Y+24	; 0x18
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	9c 89       	ldd	r25, Y+20	; 0x14
    2934:	98 8b       	std	Y+16, r25	; 0x10
    2936:	8f 87       	std	Y+15, r24	; 0x0f
    2938:	8f 85       	ldd	r24, Y+15	; 0x0f
    293a:	98 89       	ldd	r25, Y+16	; 0x10
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <main+0x340>
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	8f 87       	std	Y+15, r24	; 0x0f
										_delay_ms(400) ;
										LCD_VidSendCommand(0x01) ;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
										trials-=1 ;
    294a:	80 91 ff 01 	lds	r24, 0x01FF
    294e:	81 50       	subi	r24, 0x01	; 1
    2950:	80 93 ff 01 	sts	0x01FF, r24
											if (trials==0)
    2954:	80 91 ff 01 	lds	r24, 0x01FF
    2958:	88 23       	and	r24, r24
    295a:	19 f5       	brne	.+70     	; 0x29a2 <main+0x3a6>
											{
												DIO_EnuSetPinVal(PIN17,HIGH) ;
    295c:	81 e1       	ldi	r24, 0x11	; 17
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_EnuSetPinVal>
    2964:	1e c0       	rjmp	.+60     	; 0x29a2 <main+0x3a6>
											}
									}
							}
					else if(key=='C' && k>0 )
    2966:	80 91 0c 02 	lds	r24, 0x020C
    296a:	83 34       	cpi	r24, 0x43	; 67
    296c:	d1 f4       	brne	.+52     	; 0x29a2 <main+0x3a6>
    296e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2970:	88 23       	and	r24, r24
    2972:	b9 f0       	breq	.+46     	; 0x29a2 <main+0x3a6>
							{
								pass[char_num]='\0' ;
    2974:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	fc 01       	movw	r30, r24
    297c:	ea 5f       	subi	r30, 0xFA	; 250
    297e:	fd 4f       	sbci	r31, 0xFD	; 253
    2980:	10 82       	st	Z, r1
								char_num-=1 ;
    2982:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2984:	81 50       	subi	r24, 0x01	; 1
    2986:	8f 8f       	std	Y+31, r24	; 0x1f
								k-=1 ;
    2988:	8e 8d       	ldd	r24, Y+30	; 0x1e
    298a:	81 50       	subi	r24, 0x01	; 1
    298c:	8e 8f       	std	Y+30, r24	; 0x1e
								LCD_VidSetPosition(1,2+k) ;
    298e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2990:	98 2f       	mov	r25, r24
    2992:	9e 5f       	subi	r25, 0xFE	; 254
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	69 2f       	mov	r22, r25
    2998:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
								LCD_VidSendData(' ') ;
    299c:	80 e2       	ldi	r24, 0x20	; 32
    299e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>

							}

					if(return_key) {LCD_VidSendCommand(0x01) ;   break ;}
    29a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a4:	88 23       	and	r24, r24
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <main+0x3b4>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
    29ae:	42 ce       	rjmp	.-892    	; 0x2634 <main+0x38>
				free_name(user) ;
				k=0 ;
				char_num=0 ;
				LCD_VidSendCommand(0x01) ;

				while(trials!=0)
    29b0:	80 91 ff 01 	lds	r24, 0x01FF
    29b4:	88 23       	and	r24, r24
    29b6:	09 f0       	breq	.+2      	; 0x29ba <main+0x3be>
    29b8:	97 ce       	rjmp	.-722    	; 0x26e8 <main+0xec>
    29ba:	3c ce       	rjmp	.-904    	; 0x2634 <main+0x38>
					if(return_key) {LCD_VidSendCommand(0x01) ;   break ;}
				}
			}
			else
			{
				free_name(user) ;
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	92 e0       	ldi	r25, 0x02	; 2
    29c0:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <free_name>
				k=0 ;
    29c4:	1e 8e       	std	Y+30, r1	; 0x1e
				char_num=0 ;
    29c6:	1f 8e       	std	Y+31, r1	; 0x1f
				LCD_VidSendCommand(0x01) ;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	0e 94 81 06 	call	0xd02	; 0xd02 <LCD_VidSendCommand>
				LCD_VidSetPosition(0,0) ;
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
				LCD_VidWriteString("Wrong username") ;
    29d6:	83 ea       	ldi	r24, 0xA3	; 163
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a8 ec       	ldi	r26, 0xC8	; 200
    29e4:	b3 e4       	ldi	r27, 0x43	; 67
    29e6:	8b 87       	std	Y+11, r24	; 0x0b
    29e8:	9c 87       	std	Y+12, r25	; 0x0c
    29ea:	ad 87       	std	Y+13, r26	; 0x0d
    29ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4a ef       	ldi	r20, 0xFA	; 250
    29fc:	54 e4       	ldi	r21, 0x44	; 68
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8f 83       	std	Y+7, r24	; 0x07
    2a08:	98 87       	std	Y+8, r25	; 0x08
    2a0a:	a9 87       	std	Y+9, r26	; 0x09
    2a0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e8       	ldi	r20, 0x80	; 128
    2a1c:	5f e3       	ldi	r21, 0x3F	; 63
    2a1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	2c f4       	brge	.+10     	; 0x2a30 <main+0x434>
		__ticks = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	3f c0       	rjmp	.+126    	; 0x2aae <main+0x4b2>
	else if (__tmp > 65535)
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a44:	18 16       	cp	r1, r24
    2a46:	4c f5       	brge	.+82     	; 0x2a9a <main+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e2       	ldi	r20, 0x20	; 32
    2a56:	51 e4       	ldi	r21, 0x41	; 65
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <main+0x494>
    2a72:	88 ec       	ldi	r24, 0xC8	; 200
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <main+0x482>
    2a82:	9c 83       	std	Y+4, r25	; 0x04
    2a84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	69 f7       	brne	.-38     	; 0x2a72 <main+0x476>
    2a98:	cd cd       	rjmp	.-1126   	; 0x2634 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9c:	78 85       	ldd	r23, Y+8	; 0x08
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <main+0x4be>
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	b8 cd       	rjmp	.-1168   	; 0x2634 <main+0x38>
				_delay_ms(400) ;
			}
		}
		else if(key=='C' && k>0 )
    2ac4:	80 91 0c 02 	lds	r24, 0x020C
    2ac8:	83 34       	cpi	r24, 0x43	; 67
    2aca:	09 f0       	breq	.+2      	; 0x2ace <main+0x4d2>
    2acc:	b3 cd       	rjmp	.-1178   	; 0x2634 <main+0x38>
    2ace:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ad0:	88 23       	and	r24, r24
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <main+0x4da>
    2ad4:	af cd       	rjmp	.-1186   	; 0x2634 <main+0x38>
		{
			user[char_num]='\0' ;
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	fc 01       	movw	r30, r24
    2ade:	e0 50       	subi	r30, 0x00	; 0
    2ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae2:	10 82       	st	Z, r1
			char_num-=1 ;
    2ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae6:	81 50       	subi	r24, 0x01	; 1
    2ae8:	8f 8f       	std	Y+31, r24	; 0x1f
			k-=1 ;
    2aea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aec:	81 50       	subi	r24, 0x01	; 1
    2aee:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_VidSetPosition(1,2+k) ;
    2af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2af2:	98 2f       	mov	r25, r24
    2af4:	9e 5f       	subi	r25, 0xFE	; 254
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	69 2f       	mov	r22, r25
    2afa:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
			LCD_VidSendData(' ') ;
    2afe:	80 e2       	ldi	r24, 0x20	; 32
    2b00:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_VidSendData>
    2b04:	97 cd       	rjmp	.-1234   	; 0x2634 <main+0x38>

00002b06 <clear_line>:




void clear_line(u8 num)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	0f 92       	push	r0
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	89 83       	std	Y+1, r24	; 0x01
	if( num==0 || num==1 )
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	88 23       	and	r24, r24
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <clear_line+0x18>
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	41 f4       	brne	.+16     	; 0x2b2e <clear_line+0x28>
	{	LCD_VidSetPosition(num,0) ;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_VidSetPosition>
		LCD_VidWriteString("                                ") ;
    2b26:	82 eb       	ldi	r24, 0xB2	; 178
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_VidWriteString>
	}
}
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <free_name>:


void free_name(u8 name[SIZE])
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <free_name+0x6>
    2b3c:	0f 92       	push	r0
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	9b 83       	std	Y+3, r25	; 0x03
    2b44:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0;i<=SIZE;i++)
    2b46:	19 82       	std	Y+1, r1	; 0x01
    2b48:	0c c0       	rjmp	.+24     	; 0x2b62 <free_name+0x2c>
	{
		name[i]='\0' ;
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	fc 01       	movw	r30, r24
    2b56:	e2 0f       	add	r30, r18
    2b58:	f3 1f       	adc	r31, r19
    2b5a:	10 82       	st	Z, r1
}


void free_name(u8 name[SIZE])
{
	for (u8 i=0;i<=SIZE;i++)
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	87 30       	cpi	r24, 0x07	; 7
    2b66:	88 f3       	brcs	.-30     	; 0x2b4a <free_name+0x14>
	{
		name[i]='\0' ;
	}

}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <name_check>:



u8 name_check(u8 name[SIZE])
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <name_check+0x6>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <name_check+0x8>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
	u8 flag=0 ;
    2b84:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i=0;username[i]!='\0';i++)
    2b86:	19 82       	std	Y+1, r1	; 0x01
    2b88:	19 c0       	rjmp	.+50     	; 0x2bbc <name_check+0x48>
	{
		if (name[i]!=username[i])
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	fc 01       	movw	r30, r24
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
    2b9a:	20 81       	ld	r18, Z
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	ed 50       	subi	r30, 0x0D	; 13
    2ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba8:	80 81       	ld	r24, Z
    2baa:	28 17       	cp	r18, r24
    2bac:	11 f0       	breq	.+4      	; 0x2bb2 <name_check+0x3e>
		{
			flag=0 ;
    2bae:	1a 82       	std	Y+2, r1	; 0x02
    2bb0:	0e c0       	rjmp	.+28     	; 0x2bce <name_check+0x5a>
			break ;
		}
		else
		{
			flag=1 ;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	8a 83       	std	Y+2, r24	; 0x02


u8 name_check(u8 name[SIZE])
{
	u8 flag=0 ;
	for (u8 i=0;username[i]!='\0';i++)
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	ed 50       	subi	r30, 0x0D	; 13
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	80 81       	ld	r24, Z
    2bca:	88 23       	and	r24, r24
    2bcc:	f1 f6       	brne	.-68     	; 0x2b8a <name_check+0x16>
			flag=1 ;
		}

	}

	return flag ;
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <pass_check>:



u8 pass_check(u8 password[SIZE])
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <pass_check+0x6>
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <pass_check+0x8>
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03

	u8 flag=0 ;
    2bee:	1a 82       	std	Y+2, r1	; 0x02
		for (u8 i=0;userpassword[i]!='\0';i++)
    2bf0:	19 82       	std	Y+1, r1	; 0x01
    2bf2:	19 c0       	rjmp	.+50     	; 0x2c26 <pass_check+0x48>
		{
			if (password[i]!=userpassword[i])
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	fc 01       	movw	r30, r24
    2c00:	e2 0f       	add	r30, r18
    2c02:	f3 1f       	adc	r31, r19
    2c04:	20 81       	ld	r18, Z
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e7 50       	subi	r30, 0x07	; 7
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	80 81       	ld	r24, Z
    2c14:	28 17       	cp	r18, r24
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <pass_check+0x3e>
			{
				flag=0 ;
    2c18:	1a 82       	std	Y+2, r1	; 0x02
    2c1a:	0e c0       	rjmp	.+28     	; 0x2c38 <pass_check+0x5a>
				break ;
			}
			else
			{
				flag=1 ;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	8a 83       	std	Y+2, r24	; 0x02

u8 pass_check(u8 password[SIZE])
{

	u8 flag=0 ;
		for (u8 i=0;userpassword[i]!='\0';i++)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	8f 5f       	subi	r24, 0xFF	; 255
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	88 2f       	mov	r24, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e7 50       	subi	r30, 0x07	; 7
    2c30:	fe 4f       	sbci	r31, 0xFE	; 254
    2c32:	80 81       	ld	r24, Z
    2c34:	88 23       	and	r24, r24
    2c36:	f1 f6       	brne	.-68     	; 0x2bf4 <pass_check+0x16>
				flag=1 ;
			}

		}

		return flag ;
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <__mulsi3>:
    2c48:	62 9f       	mul	r22, r18
    2c4a:	d0 01       	movw	r26, r0
    2c4c:	73 9f       	mul	r23, r19
    2c4e:	f0 01       	movw	r30, r0
    2c50:	82 9f       	mul	r24, r18
    2c52:	e0 0d       	add	r30, r0
    2c54:	f1 1d       	adc	r31, r1
    2c56:	64 9f       	mul	r22, r20
    2c58:	e0 0d       	add	r30, r0
    2c5a:	f1 1d       	adc	r31, r1
    2c5c:	92 9f       	mul	r25, r18
    2c5e:	f0 0d       	add	r31, r0
    2c60:	83 9f       	mul	r24, r19
    2c62:	f0 0d       	add	r31, r0
    2c64:	74 9f       	mul	r23, r20
    2c66:	f0 0d       	add	r31, r0
    2c68:	65 9f       	mul	r22, r21
    2c6a:	f0 0d       	add	r31, r0
    2c6c:	99 27       	eor	r25, r25
    2c6e:	72 9f       	mul	r23, r18
    2c70:	b0 0d       	add	r27, r0
    2c72:	e1 1d       	adc	r30, r1
    2c74:	f9 1f       	adc	r31, r25
    2c76:	63 9f       	mul	r22, r19
    2c78:	b0 0d       	add	r27, r0
    2c7a:	e1 1d       	adc	r30, r1
    2c7c:	f9 1f       	adc	r31, r25
    2c7e:	bd 01       	movw	r22, r26
    2c80:	cf 01       	movw	r24, r30
    2c82:	11 24       	eor	r1, r1
    2c84:	08 95       	ret

00002c86 <__udivmodsi4>:
    2c86:	a1 e2       	ldi	r26, 0x21	; 33
    2c88:	1a 2e       	mov	r1, r26
    2c8a:	aa 1b       	sub	r26, r26
    2c8c:	bb 1b       	sub	r27, r27
    2c8e:	fd 01       	movw	r30, r26
    2c90:	0d c0       	rjmp	.+26     	; 0x2cac <__udivmodsi4_ep>

00002c92 <__udivmodsi4_loop>:
    2c92:	aa 1f       	adc	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	ee 1f       	adc	r30, r30
    2c98:	ff 1f       	adc	r31, r31
    2c9a:	a2 17       	cp	r26, r18
    2c9c:	b3 07       	cpc	r27, r19
    2c9e:	e4 07       	cpc	r30, r20
    2ca0:	f5 07       	cpc	r31, r21
    2ca2:	20 f0       	brcs	.+8      	; 0x2cac <__udivmodsi4_ep>
    2ca4:	a2 1b       	sub	r26, r18
    2ca6:	b3 0b       	sbc	r27, r19
    2ca8:	e4 0b       	sbc	r30, r20
    2caa:	f5 0b       	sbc	r31, r21

00002cac <__udivmodsi4_ep>:
    2cac:	66 1f       	adc	r22, r22
    2cae:	77 1f       	adc	r23, r23
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	1a 94       	dec	r1
    2cb6:	69 f7       	brne	.-38     	; 0x2c92 <__udivmodsi4_loop>
    2cb8:	60 95       	com	r22
    2cba:	70 95       	com	r23
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	9b 01       	movw	r18, r22
    2cc2:	ac 01       	movw	r20, r24
    2cc4:	bd 01       	movw	r22, r26
    2cc6:	cf 01       	movw	r24, r30
    2cc8:	08 95       	ret

00002cca <__divmodsi4>:
    2cca:	97 fb       	bst	r25, 7
    2ccc:	09 2e       	mov	r0, r25
    2cce:	05 26       	eor	r0, r21
    2cd0:	0e d0       	rcall	.+28     	; 0x2cee <__divmodsi4_neg1>
    2cd2:	57 fd       	sbrc	r21, 7
    2cd4:	04 d0       	rcall	.+8      	; 0x2cde <__divmodsi4_neg2>
    2cd6:	d7 df       	rcall	.-82     	; 0x2c86 <__udivmodsi4>
    2cd8:	0a d0       	rcall	.+20     	; 0x2cee <__divmodsi4_neg1>
    2cda:	00 1c       	adc	r0, r0
    2cdc:	38 f4       	brcc	.+14     	; 0x2cec <__divmodsi4_exit>

00002cde <__divmodsi4_neg2>:
    2cde:	50 95       	com	r21
    2ce0:	40 95       	com	r20
    2ce2:	30 95       	com	r19
    2ce4:	21 95       	neg	r18
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cea:	5f 4f       	sbci	r21, 0xFF	; 255

00002cec <__divmodsi4_exit>:
    2cec:	08 95       	ret

00002cee <__divmodsi4_neg1>:
    2cee:	f6 f7       	brtc	.-4      	; 0x2cec <__divmodsi4_exit>
    2cf0:	90 95       	com	r25
    2cf2:	80 95       	com	r24
    2cf4:	70 95       	com	r23
    2cf6:	61 95       	neg	r22
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	08 95       	ret

00002d00 <__prologue_saves__>:
    2d00:	2f 92       	push	r2
    2d02:	3f 92       	push	r3
    2d04:	4f 92       	push	r4
    2d06:	5f 92       	push	r5
    2d08:	6f 92       	push	r6
    2d0a:	7f 92       	push	r7
    2d0c:	8f 92       	push	r8
    2d0e:	9f 92       	push	r9
    2d10:	af 92       	push	r10
    2d12:	bf 92       	push	r11
    2d14:	cf 92       	push	r12
    2d16:	df 92       	push	r13
    2d18:	ef 92       	push	r14
    2d1a:	ff 92       	push	r15
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	ca 1b       	sub	r28, r26
    2d2a:	db 0b       	sbc	r29, r27
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	09 94       	ijmp

00002d38 <__epilogue_restores__>:
    2d38:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3a:	39 88       	ldd	r3, Y+17	; 0x11
    2d3c:	48 88       	ldd	r4, Y+16	; 0x10
    2d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d4e:	df 80       	ldd	r13, Y+7	; 0x07
    2d50:	ee 80       	ldd	r14, Y+6	; 0x06
    2d52:	fd 80       	ldd	r15, Y+5	; 0x05
    2d54:	0c 81       	ldd	r16, Y+4	; 0x04
    2d56:	1b 81       	ldd	r17, Y+3	; 0x03
    2d58:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5c:	ce 0f       	add	r28, r30
    2d5e:	d1 1d       	adc	r29, r1
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	ed 01       	movw	r28, r26
    2d6c:	08 95       	ret

00002d6e <_exit>:
    2d6e:	f8 94       	cli

00002d70 <__stop_program>:
    2d70:	ff cf       	rjmp	.-2      	; 0x2d70 <__stop_program>
