
Lock_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00003492  00003526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800204  00800204  000036ca  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017eb  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000bfad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000cfb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dcbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 33       	cpi	r26, 0x37	; 55
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <main>
      8a:	0c 94 47 1a 	jmp	0x348e	; 0x348e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ed       	ldi	r26, 0xD7	; 215
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ed       	ldi	r24, 0xD7	; 215
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e1 52       	subi	r30, 0x21	; 33
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIM2_VidInit>:




ErrorState TIM2_VidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62

	ErrorState error = ES_NOK ;
     ce0:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Global Interrupt */
	CLR_BIT(SREG,SREG_INTERRUPT_BIT) ;
     ce2:	af e5       	ldi	r26, 0x5F	; 95
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ef e5       	ldi	r30, 0x5F	; 95
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	8c 93       	st	X, r24


	/* Reset all Configuration */
	TCCR2=0x00 ;
     cf0:	e5 e4       	ldi	r30, 0x45	; 69
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	10 82       	st	Z, r1

	TCNT2 = 0x00 ;
     cf6:	e4 e4       	ldi	r30, 0x44	; 68
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1



#elif TIMER_MODE == FAST_PWM_TIMER
	/* Set a Fast PWM */
	SET_BIT(TCCR2,WGM20) ;
     cfc:	a5 e4       	ldi	r26, 0x45	; 69
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e4       	ldi	r30, 0x45	; 69
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 64       	ori	r24, 0x40	; 64
     d08:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21) ;
     d0a:	a5 e4       	ldi	r26, 0x45	; 69
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e5 e4       	ldi	r30, 0x45	; 69
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	88 60       	ori	r24, 0x08	; 8
     d16:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM20) ;
	CLR_BIT(TCCR2,COM21) ;

#elif TIMER_COMPARE_MATCH == CLEAR_ON_COMPARE
	/* Compare output mode , Non PWM */
	CLR_BIT(TCCR2,COM20) ;
     d18:	a5 e4       	ldi	r26, 0x45	; 69
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e5 e4       	ldi	r30, 0x45	; 69
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 7e       	andi	r24, 0xEF	; 239
     d24:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21) ;
     d26:	a5 e4       	ldi	r26, 0x45	; 69
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e4       	ldi	r30, 0x45	; 69
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 62       	ori	r24, 0x20	; 32
     d32:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21) ;
	CLR_BIT(TCCR2,CS22) ;

#elif TIMER_PRESCALER == TIMER_PRESCALER_256
	/* Set the Prescaler  256   */
	CLR_BIT(TCCR2,CS20) ;
     d34:	a5 e4       	ldi	r26, 0x45	; 69
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e4       	ldi	r30, 0x45	; 69
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8e 7f       	andi	r24, 0xFE	; 254
     d40:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21) ;
     d42:	a5 e4       	ldi	r26, 0x45	; 69
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e5 e4       	ldi	r30, 0x45	; 69
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22) ;
     d50:	a5 e4       	ldi	r26, 0x45	; 69
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e5 e4       	ldi	r30, 0x45	; 69
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	84 60       	ori	r24, 0x04	; 4
     d5c:	8c 93       	st	X, r24
#endif

	/* Interrupt enable   */
	//CLR_BIT(TIMSK,TOIE2) ;

	error =ES_OK ;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     d62:	89 81       	ldd	r24, Y+1	; 0x01

}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <TIM2_VidEnable>:




ErrorState TIM2_VidEnable (void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
     d76:	19 82       	std	Y+1, r1	; 0x01

	error =ES_OK ;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <TIM2_VidDisable>:



ErrorState TIM2_VidDisable (void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
     d90:	19 82       	std	Y+1, r1	; 0x01

	error =ES_OK ;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
}
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <TIM2_VidSetCallBack>:


static void (* PVid_SetCallBack2)(void) = NULL ;

ErrorState TIM2_VidSetCallBack(void (* PF)(void))
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <TIM2_VidSetCallBack+0x6>
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9b 83       	std	Y+3, r25	; 0x03
     dae:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
     db0:	19 82       	std	Y+1, r1	; 0x01

	PVid_SetCallBack2=PF ;
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	90 93 05 02 	sts	0x0205, r25
     dba:	80 93 04 02 	sts	0x0204, r24

	error =ES_OK ;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     dc2:	89 81       	ldd	r24, Y+1	; 0x01

}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <__vector_5>:
/****** ISR Calling From System ******/
/*************************************/
u32 TIM2_U32Counts=0 ;

void __vector_5(void)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	if 	(TIM2_U32Counts == 488 )
     dfa:	80 91 06 02 	lds	r24, 0x0206
     dfe:	90 91 07 02 	lds	r25, 0x0207
     e02:	a0 91 08 02 	lds	r26, 0x0208
     e06:	b0 91 09 02 	lds	r27, 0x0209
     e0a:	88 3e       	cpi	r24, 0xE8	; 232
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	92 07       	cpc	r25, r18
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	a2 07       	cpc	r26, r18
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	b2 07       	cpc	r27, r18
     e18:	91 f4       	brne	.+36     	; 0xe3e <__vector_5+0x6e>
	{
		PVid_SetCallBack2() ;
     e1a:	e0 91 04 02 	lds	r30, 0x0204
     e1e:	f0 91 05 02 	lds	r31, 0x0205
     e22:	09 95       	icall

		TCNT2=184 ;
     e24:	e4 e4       	ldi	r30, 0x44	; 68
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	88 eb       	ldi	r24, 0xB8	; 184
     e2a:	80 83       	st	Z, r24

		TIM2_U32Counts=0 ;
     e2c:	10 92 06 02 	sts	0x0206, r1
     e30:	10 92 07 02 	sts	0x0207, r1
     e34:	10 92 08 02 	sts	0x0208, r1
     e38:	10 92 09 02 	sts	0x0209, r1
     e3c:	13 c0       	rjmp	.+38     	; 0xe64 <__vector_5+0x94>
	}
	else
	{
		TIM2_U32Counts+=1 ;
     e3e:	80 91 06 02 	lds	r24, 0x0206
     e42:	90 91 07 02 	lds	r25, 0x0207
     e46:	a0 91 08 02 	lds	r26, 0x0208
     e4a:	b0 91 09 02 	lds	r27, 0x0209
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	a1 1d       	adc	r26, r1
     e52:	b1 1d       	adc	r27, r1
     e54:	80 93 06 02 	sts	0x0206, r24
     e58:	90 93 07 02 	sts	0x0207, r25
     e5c:	a0 93 08 02 	sts	0x0208, r26
     e60:	b0 93 09 02 	sts	0x0209, r27
	}


}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <PWM2_SetDutyCycle>:




void PWM2_SetDutyCycle(u8 Copy_U8Percent)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01

Copy_U8Percent=Copy_U8Percent*255/100 ;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	48 2f       	mov	r20, r24
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	ca 01       	movw	r24, r20
     e9e:	9c 01       	movw	r18, r24
     ea0:	22 0f       	add	r18, r18
     ea2:	33 1f       	adc	r19, r19
     ea4:	c9 01       	movw	r24, r18
     ea6:	96 95       	lsr	r25
     ea8:	98 2f       	mov	r25, r24
     eaa:	88 27       	eor	r24, r24
     eac:	97 95       	ror	r25
     eae:	87 95       	ror	r24
     eb0:	82 1b       	sub	r24, r18
     eb2:	93 0b       	sbc	r25, r19
     eb4:	84 0f       	add	r24, r20
     eb6:	95 1f       	adc	r25, r21
     eb8:	24 e6       	ldi	r18, 0x64	; 100
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	b9 01       	movw	r22, r18
     ebe:	0e 94 c0 19 	call	0x3380	; 0x3380 <__divmodhi4>
     ec2:	cb 01       	movw	r24, r22
     ec4:	89 83       	std	Y+1, r24	; 0x01

OCR2=Copy_U8Percent  ;
     ec6:	e3 e4       	ldi	r30, 0x43	; 67
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	80 83       	st	Z, r24

}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <TIM0_VidInit>:




ErrorState TIM0_VidInit(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62

	ErrorState error = ES_NOK ;
     ee0:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Global Interrupt */
	CLR_BIT(SREG,SREG_INTERRUPT_BIT) ;
     ee2:	af e5       	ldi	r26, 0x5F	; 95
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ef e5       	ldi	r30, 0x5F	; 95
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 77       	andi	r24, 0x7F	; 127
     eee:	8c 93       	st	X, r24


	/* Reset all Configuration */
	TCCR0=0x00 ;
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	10 82       	st	Z, r1

	TCNT0 = 0x00 ;
     ef6:	e2 e5       	ldi	r30, 0x52	; 82
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	10 82       	st	Z, r1



#elif TIMER_MODE == FAST_PWM_TIMER
	/* Set a Fast PWM */
	SET_BIT(TCCR0,WGM00) ;
     efc:	a3 e5       	ldi	r26, 0x53	; 83
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e5       	ldi	r30, 0x53	; 83
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01) ;
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM00) ;
	CLR_BIT(TCCR0,COM01) ;

#elif TIMER_COMPARE_MATCH == CLEAR_ON_COMPARE
	/* Compare output mode , Non PWM */
	CLR_BIT(TCCR0,COM00) ;
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 7e       	andi	r24, 0xEF	; 239
     f24:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01) ;
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01) ;
	CLR_BIT(TCCR0,CS02) ;

#elif TIMER_PRESCALER == TIMER_PRESCALER_256
	/* Set the Prescaler  256   */
	CLR_BIT(TCCR0,CS00) ;
     f34:	a3 e5       	ldi	r26, 0x53	; 83
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8e 7f       	andi	r24, 0xFE	; 254
     f40:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01) ;
     f42:	a3 e5       	ldi	r26, 0x53	; 83
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e3 e5       	ldi	r30, 0x53	; 83
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8d 7f       	andi	r24, 0xFD	; 253
     f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02) ;
     f50:	a3 e5       	ldi	r26, 0x53	; 83
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e3 e5       	ldi	r30, 0x53	; 83
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	84 60       	ori	r24, 0x04	; 4
     f5c:	8c 93       	st	X, r24
#endif

	/* Interrupt enable   */
	//CLR_BIT(TIMSK,TOIE0) ;

	error =ES_OK ;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     f62:	89 81       	ldd	r24, Y+1	; 0x01

}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIM0_VidEnable>:




ErrorState TIM0_VidEnable (void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
     f76:	19 82       	std	Y+1, r1	; 0x01

	error =ES_OK ;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <TIM0_VidDisable>:



ErrorState TIM0_VidDisable (void)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
     f90:	19 82       	std	Y+1, r1	; 0x01

	error =ES_OK ;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     f96:	89 81       	ldd	r24, Y+1	; 0x01
}
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <TIM0_VidSetCallBack>:


static void (* PVid_SetCallBack0)(void) = NULL ;

ErrorState TIM0_VidSetCallBack(void (* PF)(void))
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <TIM0_VidSetCallBack+0x6>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
     fb0:	19 82       	std	Y+1, r1	; 0x01

	PVid_SetCallBack0=PF ;
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	90 93 0b 02 	sts	0x020B, r25
     fba:	80 93 0a 02 	sts	0x020A, r24

	error =ES_OK ;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	89 83       	std	Y+1, r24	; 0x01

	return error ;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <__vector_11>:
/****** ISR Calling From System ******/
/*************************************/
u32 TIM0_U32Counts=0 ;

void __vector_11(void)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	if 	(TIM0_U32Counts == 488 )
     ffa:	80 91 0c 02 	lds	r24, 0x020C
     ffe:	90 91 0d 02 	lds	r25, 0x020D
    1002:	a0 91 0e 02 	lds	r26, 0x020E
    1006:	b0 91 0f 02 	lds	r27, 0x020F
    100a:	88 3e       	cpi	r24, 0xE8	; 232
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	92 07       	cpc	r25, r18
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	a2 07       	cpc	r26, r18
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	b2 07       	cpc	r27, r18
    1018:	91 f4       	brne	.+36     	; 0x103e <__vector_11+0x6e>
	{
		PVid_SetCallBack0() ;
    101a:	e0 91 0a 02 	lds	r30, 0x020A
    101e:	f0 91 0b 02 	lds	r31, 0x020B
    1022:	09 95       	icall

		TCNT0=184 ;
    1024:	e2 e5       	ldi	r30, 0x52	; 82
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	88 eb       	ldi	r24, 0xB8	; 184
    102a:	80 83       	st	Z, r24

		TIM0_U32Counts=0 ;
    102c:	10 92 0c 02 	sts	0x020C, r1
    1030:	10 92 0d 02 	sts	0x020D, r1
    1034:	10 92 0e 02 	sts	0x020E, r1
    1038:	10 92 0f 02 	sts	0x020F, r1
    103c:	13 c0       	rjmp	.+38     	; 0x1064 <__vector_11+0x94>
	}
	else
	{
		TIM0_U32Counts+=1 ;
    103e:	80 91 0c 02 	lds	r24, 0x020C
    1042:	90 91 0d 02 	lds	r25, 0x020D
    1046:	a0 91 0e 02 	lds	r26, 0x020E
    104a:	b0 91 0f 02 	lds	r27, 0x020F
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	a1 1d       	adc	r26, r1
    1052:	b1 1d       	adc	r27, r1
    1054:	80 93 0c 02 	sts	0x020C, r24
    1058:	90 93 0d 02 	sts	0x020D, r25
    105c:	a0 93 0e 02 	sts	0x020E, r26
    1060:	b0 93 0f 02 	sts	0x020F, r27
	}


}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <PWM0_SetDutyCycle>:




void PWM0_SetDutyCycle(u8 Copy_U8Percent)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01

Copy_U8Percent=Copy_U8Percent*255/100 ;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	48 2f       	mov	r20, r24
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	ca 01       	movw	r24, r20
    109e:	9c 01       	movw	r18, r24
    10a0:	22 0f       	add	r18, r18
    10a2:	33 1f       	adc	r19, r19
    10a4:	c9 01       	movw	r24, r18
    10a6:	96 95       	lsr	r25
    10a8:	98 2f       	mov	r25, r24
    10aa:	88 27       	eor	r24, r24
    10ac:	97 95       	ror	r25
    10ae:	87 95       	ror	r24
    10b0:	82 1b       	sub	r24, r18
    10b2:	93 0b       	sbc	r25, r19
    10b4:	84 0f       	add	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	24 e6       	ldi	r18, 0x64	; 100
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	b9 01       	movw	r22, r18
    10be:	0e 94 c0 19 	call	0x3380	; 0x3380 <__divmodhi4>
    10c2:	cb 01       	movw	r24, r22
    10c4:	89 83       	std	Y+1, r24	; 0x01

OCR0=Copy_U8Percent  ;
    10c6:	ec e5       	ldi	r30, 0x5C	; 92
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	80 83       	st	Z, r24

}
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <LCD_VidSendData>:

/*********************************************/
/*********  Send a Character to LCD  *********/
/*********************************************/
ErrorState LCD_VidSendData(u8 Copy_U8Data)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <LCD_VidSendData+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    10e2:	19 82       	std	Y+1, r1	; 0x01

	DIO_EnuSetPinVal(LCD_RS,HIGH) ;  	 // RS = 1  -> Send Data
    10e4:	88 e1       	ldi	r24, 0x18	; 24
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>

	LCD_VidLatch(Copy_U8Data) ;
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_VidLatch>

	error = ES_OK ;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <LCD_VidSendCommand>:

/*********************************************/
/***********  Send a Command to LCD  *********/
/*********************************************/
ErrorState LCD_VidSendCommand(u8 Copy_U8Command)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <LCD_VidSendCommand+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    110e:	19 82       	std	Y+1, r1	; 0x01

	DIO_EnuSetPinVal(LCD_RS,LOW) ;   	// RS = 0  -> Send Command
    1110:	88 e1       	ldi	r24, 0x18	; 24
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>

	LCD_VidLatch(Copy_U8Command);
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_VidLatch>

	error = ES_OK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <LCD_VidLatch>:
/*********************************************************************************/
/***************  Latch Function for Sending data or command to LCD  *************/
/***********  Common Function for LCD_VidSendCommand and LCD_VidSendData *********/
/*********************************************************************************/
static void LCD_VidLatch(u8 Copy_U8Value)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	6d 97       	sbiw	r28, 0x1d	; 29
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_EnuSetPinVal(LCD_RW,LOW) ;	  	 // R/W =0  -> Write this data
    1144:	89 e1       	ldi	r24, 0x19	; 25
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	/*------------ LCD_8BIT_MODE ---------*/
	/*---------------------------------*/
#if LCD_MODE == LCD_8BIT_MODE


	DIO_EnuSetPinVal ( LCD_D0 , ( Copy_U8Value  >> BIT0 ) & 1  ) ;
    114c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    114e:	98 2f       	mov	r25, r24
    1150:	91 70       	andi	r25, 0x01	; 1
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	69 2f       	mov	r22, r25
    1156:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D1 , ( Copy_U8Value  >> BIT1 ) & 1  ) ;
    115a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    115c:	86 95       	lsr	r24
    115e:	98 2f       	mov	r25, r24
    1160:	91 70       	andi	r25, 0x01	; 1
    1162:	81 e1       	ldi	r24, 0x11	; 17
    1164:	69 2f       	mov	r22, r25
    1166:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D2 , ( Copy_U8Value  >> BIT2 ) & 1  ) ;
    116a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	98 2f       	mov	r25, r24
    1172:	91 70       	andi	r25, 0x01	; 1
    1174:	82 e1       	ldi	r24, 0x12	; 18
    1176:	69 2f       	mov	r22, r25
    1178:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D3 , ( Copy_U8Value  >> BIT3 ) & 1  ) ;
    117c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117e:	86 95       	lsr	r24
    1180:	86 95       	lsr	r24
    1182:	86 95       	lsr	r24
    1184:	98 2f       	mov	r25, r24
    1186:	91 70       	andi	r25, 0x01	; 1
    1188:	83 e1       	ldi	r24, 0x13	; 19
    118a:	69 2f       	mov	r22, r25
    118c:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D4 , ( Copy_U8Value  >> BIT4 ) & 1  ) ;
    1190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1192:	82 95       	swap	r24
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	98 2f       	mov	r25, r24
    1198:	91 70       	andi	r25, 0x01	; 1
    119a:	84 e1       	ldi	r24, 0x14	; 20
    119c:	69 2f       	mov	r22, r25
    119e:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D5 , ( Copy_U8Value  >> BIT5 ) & 1  ) ;
    11a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a4:	82 95       	swap	r24
    11a6:	86 95       	lsr	r24
    11a8:	87 70       	andi	r24, 0x07	; 7
    11aa:	98 2f       	mov	r25, r24
    11ac:	91 70       	andi	r25, 0x01	; 1
    11ae:	85 e1       	ldi	r24, 0x15	; 21
    11b0:	69 2f       	mov	r22, r25
    11b2:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D6 , ( Copy_U8Value  >> BIT6 ) & 1  ) ;
    11b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b8:	82 95       	swap	r24
    11ba:	86 95       	lsr	r24
    11bc:	86 95       	lsr	r24
    11be:	83 70       	andi	r24, 0x03	; 3
    11c0:	98 2f       	mov	r25, r24
    11c2:	91 70       	andi	r25, 0x01	; 1
    11c4:	86 e1       	ldi	r24, 0x16	; 22
    11c6:	69 2f       	mov	r22, r25
    11c8:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal ( LCD_D7 , ( Copy_U8Value  >> BIT7 ) & 1  ) ;
    11cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ce:	98 2f       	mov	r25, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	99 27       	eor	r25, r25
    11d4:	99 1f       	adc	r25, r25
    11d6:	87 e1       	ldi	r24, 0x17	; 23
    11d8:	69 2f       	mov	r22, r25
    11da:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>

	DIO_EnuSetPinVal(LCD_EN,HIGH) ;   	 // EN = 1
    11de:	8a e1       	ldi	r24, 0x1A	; 26
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e8       	ldi	r26, 0x80	; 128
    11ec:	bf e3       	ldi	r27, 0x3F	; 63
    11ee:	89 8f       	std	Y+25, r24	; 0x19
    11f0:	9a 8f       	std	Y+26, r25	; 0x1a
    11f2:	ab 8f       	std	Y+27, r26	; 0x1b
    11f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	69 8d       	ldd	r22, Y+25	; 0x19
    11f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a ef       	ldi	r20, 0xFA	; 250
    1204:	54 e4       	ldi	r21, 0x44	; 68
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	8d 8b       	std	Y+21, r24	; 0x15
    1210:	9e 8b       	std	Y+22, r25	; 0x16
    1212:	af 8b       	std	Y+23, r26	; 0x17
    1214:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1216:	6d 89       	ldd	r22, Y+21	; 0x15
    1218:	7e 89       	ldd	r23, Y+22	; 0x16
    121a:	8f 89       	ldd	r24, Y+23	; 0x17
    121c:	98 8d       	ldd	r25, Y+24	; 0x18
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <LCD_VidLatch+0x10a>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9c 8b       	std	Y+20, r25	; 0x14
    1234:	8b 8b       	std	Y+19, r24	; 0x13
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <LCD_VidLatch+0x188>
	else if (__tmp > 65535)
    1238:	6d 89       	ldd	r22, Y+21	; 0x15
    123a:	7e 89       	ldd	r23, Y+22	; 0x16
    123c:	8f 89       	ldd	r24, Y+23	; 0x17
    123e:	98 8d       	ldd	r25, Y+24	; 0x18
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	4c f5       	brge	.+82     	; 0x12a2 <LCD_VidLatch+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	69 8d       	ldd	r22, Y+25	; 0x19
    1252:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
    1278:	0f c0       	rjmp	.+30     	; 0x1298 <LCD_VidLatch+0x16a>
    127a:	88 ec       	ldi	r24, 0xC8	; 200
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9a 8b       	std	Y+18, r25	; 0x12
    1280:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1282:	89 89       	ldd	r24, Y+17	; 0x11
    1284:	9a 89       	ldd	r25, Y+18	; 0x12
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_VidLatch+0x158>
    128a:	9a 8b       	std	Y+18, r25	; 0x12
    128c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	8b 89       	ldd	r24, Y+19	; 0x13
    1290:	9c 89       	ldd	r25, Y+20	; 0x14
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	9c 8b       	std	Y+20, r25	; 0x14
    1296:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f7       	brne	.-38     	; 0x127a <LCD_VidLatch+0x14c>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <LCD_VidLatch+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9c 8b       	std	Y+20, r25	; 0x14
    12b4:	8b 8b       	std	Y+19, r24	; 0x13
    12b6:	8b 89       	ldd	r24, Y+19	; 0x13
    12b8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ba:	98 8b       	std	Y+16, r25	; 0x10
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c0:	98 89       	ldd	r25, Y+16	; 0x10
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <LCD_VidLatch+0x194>
    12c6:	98 8b       	std	Y+16, r25	; 0x10
    12c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	DIO_EnuSetPinVal(LCD_EN,LOW) ;   	 // EN = 0
    12ca:	8a e1       	ldi	r24, 0x1A	; 26
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a0 e8       	ldi	r26, 0x80	; 128
    12d8:	bf e3       	ldi	r27, 0x3F	; 63
    12da:	8b 87       	std	Y+11, r24	; 0x0b
    12dc:	9c 87       	std	Y+12, r25	; 0x0c
    12de:	ad 87       	std	Y+13, r26	; 0x0d
    12e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a ef       	ldi	r20, 0xFA	; 250
    12f0:	54 e4       	ldi	r21, 0x44	; 68
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8f 83       	std	Y+7, r24	; 0x07
    12fc:	98 87       	std	Y+8, r25	; 0x08
    12fe:	a9 87       	std	Y+9, r26	; 0x09
    1300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1302:	6f 81       	ldd	r22, Y+7	; 0x07
    1304:	78 85       	ldd	r23, Y+8	; 0x08
    1306:	89 85       	ldd	r24, Y+9	; 0x09
    1308:	9a 85       	ldd	r25, Y+10	; 0x0a
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	2c f4       	brge	.+10     	; 0x1324 <LCD_VidLatch+0x1f6>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	3f c0       	rjmp	.+126    	; 0x13a2 <LCD_VidLatch+0x274>
	else if (__tmp > 65535)
    1324:	6f 81       	ldd	r22, Y+7	; 0x07
    1326:	78 85       	ldd	r23, Y+8	; 0x08
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	9a 85       	ldd	r25, Y+10	; 0x0a
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	4c f5       	brge	.+82     	; 0x138e <LCD_VidLatch+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	6b 85       	ldd	r22, Y+11	; 0x0b
    133e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1340:	8d 85       	ldd	r24, Y+13	; 0x0d
    1342:	9e 85       	ldd	r25, Y+14	; 0x0e
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e2       	ldi	r20, 0x20	; 32
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <LCD_VidLatch+0x256>
    1366:	88 ec       	ldi	r24, 0xC8	; 200
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <LCD_VidLatch+0x244>
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	69 f7       	brne	.-38     	; 0x1366 <LCD_VidLatch+0x238>
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <LCD_VidLatch+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_VidLatch+0x280>
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
#error " Wrong LCD_Mode Input "


#endif

}
    13b6:	6d 96       	adiw	r28, 0x1d	; 29
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <LCD_VidInit>:
/***********  Initialization of a LCD  *********/
/***********  LCD Connection Selection *********/
/*********** _8BIT MODE  or _4BIT MODE *********/
/***********************************************/
ErrorState LCD_VidInit(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	e9 97       	sbiw	r28, 0x39	; 57
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
	ErrorState error = ES_NOK ;
    13dc:	19 ae       	std	Y+57, r1	; 0x39
/*------------ _8BIT MODE ---------*/
/*---------------------------------*/
#if LCD_MODE==LCD_8BIT_MODE

	// Set Data Pins with Direction
	DIO_EnuSetPinDir ( LCD_D0 , OUTPUT  ) ;
    13de:	80 e1       	ldi	r24, 0x10	; 16
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D1 , OUTPUT  ) ;
    13e6:	81 e1       	ldi	r24, 0x11	; 17
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D2 , OUTPUT  ) ;
    13ee:	82 e1       	ldi	r24, 0x12	; 18
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D3 , OUTPUT  ) ;
    13f6:	83 e1       	ldi	r24, 0x13	; 19
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D4 , OUTPUT  ) ;
    13fe:	84 e1       	ldi	r24, 0x14	; 20
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D5 , OUTPUT  ) ;
    1406:	85 e1       	ldi	r24, 0x15	; 21
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D6 , OUTPUT  ) ;
    140e:	86 e1       	ldi	r24, 0x16	; 22
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir ( LCD_D7 , OUTPUT  ) ;
    1416:	87 e1       	ldi	r24, 0x17	; 23
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>


	// Set Control Pins With Direction
	DIO_EnuSetPinDir( LCD_RS , OUTPUT );
    141e:	88 e1       	ldi	r24, 0x18	; 24
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( LCD_RW , OUTPUT );
    1426:	89 e1       	ldi	r24, 0x19	; 25
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( LCD_EN , OUTPUT );
    142e:	8a e1       	ldi	r24, 0x1A	; 26
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a8 e4       	ldi	r26, 0x48	; 72
    143c:	b2 e4       	ldi	r27, 0x42	; 66
    143e:	8d ab       	std	Y+53, r24	; 0x35
    1440:	9e ab       	std	Y+54, r25	; 0x36
    1442:	af ab       	std	Y+55, r26	; 0x37
    1444:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	6d a9       	ldd	r22, Y+53	; 0x35
    1448:	7e a9       	ldd	r23, Y+54	; 0x36
    144a:	8f a9       	ldd	r24, Y+55	; 0x37
    144c:	98 ad       	ldd	r25, Y+56	; 0x38
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a ef       	ldi	r20, 0xFA	; 250
    1454:	54 e4       	ldi	r21, 0x44	; 68
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	89 ab       	std	Y+49, r24	; 0x31
    1460:	9a ab       	std	Y+50, r25	; 0x32
    1462:	ab ab       	std	Y+51, r26	; 0x33
    1464:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1466:	69 a9       	ldd	r22, Y+49	; 0x31
    1468:	7a a9       	ldd	r23, Y+50	; 0x32
    146a:	8b a9       	ldd	r24, Y+51	; 0x33
    146c:	9c a9       	ldd	r25, Y+52	; 0x34
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <LCD_VidInit+0xc0>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <LCD_VidInit+0x13e>
	else if (__tmp > 65535)
    1488:	69 a9       	ldd	r22, Y+49	; 0x31
    148a:	7a a9       	ldd	r23, Y+50	; 0x32
    148c:	8b a9       	ldd	r24, Y+51	; 0x33
    148e:	9c a9       	ldd	r25, Y+52	; 0x34
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <LCD_VidInit+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	6d a9       	ldd	r22, Y+53	; 0x35
    14a2:	7e a9       	ldd	r23, Y+54	; 0x36
    14a4:	8f a9       	ldd	r24, Y+55	; 0x37
    14a6:	98 ad       	ldd	r25, Y+56	; 0x38
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	98 ab       	std	Y+48, r25	; 0x30
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <LCD_VidInit+0x120>
    14ca:	88 ec       	ldi	r24, 0xC8	; 200
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9e a7       	std	Y+46, r25	; 0x2e
    14d0:	8d a7       	std	Y+45, r24	; 0x2d
    14d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    14d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_VidInit+0x10e>
    14da:	9e a7       	std	Y+46, r25	; 0x2e
    14dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e0:	98 a9       	ldd	r25, Y+48	; 0x30
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	98 ab       	std	Y+48, r25	; 0x30
    14e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ea:	98 a9       	ldd	r25, Y+48	; 0x30
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <LCD_VidInit+0x102>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <LCD_VidInit+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	69 a9       	ldd	r22, Y+49	; 0x31
    14f4:	7a a9       	ldd	r23, Y+50	; 0x32
    14f6:	8b a9       	ldd	r24, Y+51	; 0x33
    14f8:	9c a9       	ldd	r25, Y+52	; 0x34
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	98 ab       	std	Y+48, r25	; 0x30
    1504:	8f a7       	std	Y+47, r24	; 0x2f
    1506:	8f a5       	ldd	r24, Y+47	; 0x2f
    1508:	98 a9       	ldd	r25, Y+48	; 0x30
    150a:	9c a7       	std	Y+44, r25	; 0x2c
    150c:	8b a7       	std	Y+43, r24	; 0x2b
    150e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1510:	9c a5       	ldd	r25, Y+44	; 0x2c
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_VidInit+0x14a>
    1516:	9c a7       	std	Y+44, r25	; 0x2c
    1518:	8b a7       	std	Y+43, r24	; 0x2b

	// Time Taken By LCD Rise VDD to 4.5v
	_delay_ms(50) ;

	// Function Set
	LCD_VidSendCommand(LCD_8BIT_MODE_SET_FUNCTION) ;
    151a:	88 e3       	ldi	r24, 0x38	; 56
    151c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e8       	ldi	r26, 0x80	; 128
    1526:	bf e3       	ldi	r27, 0x3F	; 63
    1528:	8f a3       	std	Y+39, r24	; 0x27
    152a:	98 a7       	std	Y+40, r25	; 0x28
    152c:	a9 a7       	std	Y+41, r26	; 0x29
    152e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	6f a1       	ldd	r22, Y+39	; 0x27
    1532:	78 a5       	ldd	r23, Y+40	; 0x28
    1534:	89 a5       	ldd	r24, Y+41	; 0x29
    1536:	9a a5       	ldd	r25, Y+42	; 0x2a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a ef       	ldi	r20, 0xFA	; 250
    153e:	54 e4       	ldi	r21, 0x44	; 68
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8b a3       	std	Y+35, r24	; 0x23
    154a:	9c a3       	std	Y+36, r25	; 0x24
    154c:	ad a3       	std	Y+37, r26	; 0x25
    154e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1550:	6b a1       	ldd	r22, Y+35	; 0x23
    1552:	7c a1       	ldd	r23, Y+36	; 0x24
    1554:	8d a1       	ldd	r24, Y+37	; 0x25
    1556:	9e a1       	ldd	r25, Y+38	; 0x26
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <LCD_VidInit+0x1aa>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <LCD_VidInit+0x228>
	else if (__tmp > 65535)
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <LCD_VidInit+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	6f a1       	ldd	r22, Y+39	; 0x27
    158c:	78 a5       	ldd	r23, Y+40	; 0x28
    158e:	89 a5       	ldd	r24, Y+41	; 0x29
    1590:	9a a5       	ldd	r25, Y+42	; 0x2a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9a a3       	std	Y+34, r25	; 0x22
    15b0:	89 a3       	std	Y+33, r24	; 0x21
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <LCD_VidInit+0x20a>
    15b4:	88 ec       	ldi	r24, 0xC8	; 200
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	98 a3       	std	Y+32, r25	; 0x20
    15ba:	8f 8f       	std	Y+31, r24	; 0x1f
    15bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15be:	98 a1       	ldd	r25, Y+32	; 0x20
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_VidInit+0x1f8>
    15c4:	98 a3       	std	Y+32, r25	; 0x20
    15c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	89 a1       	ldd	r24, Y+33	; 0x21
    15d4:	9a a1       	ldd	r25, Y+34	; 0x22
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <LCD_VidInit+0x1ec>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <LCD_VidInit+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	6b a1       	ldd	r22, Y+35	; 0x23
    15de:	7c a1       	ldd	r23, Y+36	; 0x24
    15e0:	8d a1       	ldd	r24, Y+37	; 0x25
    15e2:	9e a1       	ldd	r25, Y+38	; 0x26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9a a3       	std	Y+34, r25	; 0x22
    15ee:	89 a3       	std	Y+33, r24	; 0x21
    15f0:	89 a1       	ldd	r24, Y+33	; 0x21
    15f2:	9a a1       	ldd	r25, Y+34	; 0x22
    15f4:	9e 8f       	std	Y+30, r25	; 0x1e
    15f6:	8d 8f       	std	Y+29, r24	; 0x1d
    15f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_VidInit+0x234>
    1600:	9e 8f       	std	Y+30, r25	; 0x1e
    1602:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;

	// Display ON/OFF Control
	LCD_VidSendCommand(LCD_ON_CONTROL_DISPLAY) ;
    1604:	8c e0       	ldi	r24, 0x0C	; 12
    1606:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e8       	ldi	r26, 0x80	; 128
    1610:	bf e3       	ldi	r27, 0x3F	; 63
    1612:	89 8f       	std	Y+25, r24	; 0x19
    1614:	9a 8f       	std	Y+26, r25	; 0x1a
    1616:	ab 8f       	std	Y+27, r26	; 0x1b
    1618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161a:	69 8d       	ldd	r22, Y+25	; 0x19
    161c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	4a ef       	ldi	r20, 0xFA	; 250
    1628:	54 e4       	ldi	r21, 0x44	; 68
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	8d 8b       	std	Y+21, r24	; 0x15
    1634:	9e 8b       	std	Y+22, r25	; 0x16
    1636:	af 8b       	std	Y+23, r26	; 0x17
    1638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164e:	88 23       	and	r24, r24
    1650:	2c f4       	brge	.+10     	; 0x165c <LCD_VidInit+0x294>
		__ticks = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	3f c0       	rjmp	.+126    	; 0x16da <LCD_VidInit+0x312>
	else if (__tmp > 65535)
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	4c f5       	brge	.+82     	; 0x16c6 <LCD_VidInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1674:	69 8d       	ldd	r22, Y+25	; 0x19
    1676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    167a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e2       	ldi	r20, 0x20	; 32
    1682:	51 e4       	ldi	r21, 0x41	; 65
    1684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <LCD_VidInit+0x2f4>
    169e:	88 ec       	ldi	r24, 0xC8	; 200
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9a 8b       	std	Y+18, r25	; 0x12
    16a4:	89 8b       	std	Y+17, r24	; 0x11
    16a6:	89 89       	ldd	r24, Y+17	; 0x11
    16a8:	9a 89       	ldd	r25, Y+18	; 0x12
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_VidInit+0x2e2>
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	8b 89       	ldd	r24, Y+19	; 0x13
    16be:	9c 89       	ldd	r25, Y+20	; 0x14
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	69 f7       	brne	.-38     	; 0x169e <LCD_VidInit+0x2d6>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <LCD_VidInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9c 8b       	std	Y+20, r25	; 0x14
    16d8:	8b 8b       	std	Y+19, r24	; 0x13
    16da:	8b 89       	ldd	r24, Y+19	; 0x13
    16dc:	9c 89       	ldd	r25, Y+20	; 0x14
    16de:	98 8b       	std	Y+16, r25	; 0x10
    16e0:	8f 87       	std	Y+15, r24	; 0x0f
    16e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e4:	98 89       	ldd	r25, Y+16	; 0x10
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_VidInit+0x31e>
    16ea:	98 8b       	std	Y+16, r25	; 0x10
    16ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;

	// Clear Display
	LCD_VidSendCommand(LCD_CLEAR_DISPLAY) ;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e4       	ldi	r27, 0x40	; 64
    16fc:	8b 87       	std	Y+11, r24	; 0x0b
    16fe:	9c 87       	std	Y+12, r25	; 0x0c
    1700:	ad 87       	std	Y+13, r26	; 0x0d
    1702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1704:	6b 85       	ldd	r22, Y+11	; 0x0b
    1706:	7c 85       	ldd	r23, Y+12	; 0x0c
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	9e 85       	ldd	r25, Y+14	; 0x0e
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a ef       	ldi	r20, 0xFA	; 250
    1712:	54 e4       	ldi	r21, 0x44	; 68
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8f 83       	std	Y+7, r24	; 0x07
    171e:	98 87       	std	Y+8, r25	; 0x08
    1720:	a9 87       	std	Y+9, r26	; 0x09
    1722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	2c f4       	brge	.+10     	; 0x1746 <LCD_VidInit+0x37e>
		__ticks = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	3f c0       	rjmp	.+126    	; 0x17c4 <LCD_VidInit+0x3fc>
	else if (__tmp > 65535)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	3f ef       	ldi	r19, 0xFF	; 255
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	57 e4       	ldi	r21, 0x47	; 71
    1756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	4c f5       	brge	.+82     	; 0x17b0 <LCD_VidInit+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1760:	7c 85       	ldd	r23, Y+12	; 0x0c
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e2       	ldi	r20, 0x20	; 32
    176c:	51 e4       	ldi	r21, 0x41	; 65
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <LCD_VidInit+0x3de>
    1788:	88 ec       	ldi	r24, 0xC8	; 200
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <LCD_VidInit+0x3cc>
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	69 f7       	brne	.-38     	; 0x1788 <LCD_VidInit+0x3c0>
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <LCD_VidInit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_VidInit+0x408>
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;

	error = ES_OK ;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 af       	std	Y+57, r24	; 0x39
#error " Wrong LCD_Mode Input "

#endif


	return error ;
    17dc:	89 ad       	ldd	r24, Y+57	; 0x39
}
    17de:	e9 96       	adiw	r28, 0x39	; 57
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <LCD_VidSetPosition>:

/****************************************************************/
/***********  Set the LCD Cursor Position on the Screen *********/
/****************************************************************/
ErrorState LCD_VidSetPosition ( u8 Copy_U8RowNumber,u8 Copy_U8ColumnNumber )
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <LCD_VidSetPosition+0x6>
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1800:	19 82       	std	Y+1, r1	; 0x01

	if ( ( Copy_U8ColumnNumber>=LCD_MIN_COL ) && ( Copy_U8ColumnNumber<=LCD_MAX_COL ) )
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	80 32       	cpi	r24, 0x20	; 32
    1806:	b8 f4       	brcc	.+46     	; 0x1836 <LCD_VidSetPosition+0x46>
	{
		if (LCD_FIRSTROW==Copy_U8RowNumber)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 23       	and	r24, r24
    180c:	39 f4       	brne	.+14     	; 0x181c <LCD_VidSetPosition+0x2c>
		{
			LCD_VidSendCommand(128+Copy_U8ColumnNumber) ;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	80 58       	subi	r24, 0x80	; 128
    1812:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>

			error = ES_OK ;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_VidSetPosition+0x4a>
		}
		else if (LCD_SECONDROW==Copy_U8RowNumber)
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	39 f4       	brne	.+14     	; 0x1830 <LCD_VidSetPosition+0x40>
		{
			LCD_VidSendCommand(128+64+Copy_U8ColumnNumber);
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	80 54       	subi	r24, 0x40	; 64
    1826:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>

			error = ES_OK ;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	05 c0       	rjmp	.+10     	; 0x183a <LCD_VidSetPosition+0x4a>
		}
		else
		{

			error = ES_OUT_OF_RANGE ;
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	02 c0       	rjmp	.+4      	; 0x183a <LCD_VidSetPosition+0x4a>
		}
	}
	else
	{
		error = ES_OUT_OF_RANGE ;
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	89 83       	std	Y+1, r24	; 0x01
	}

	return error ;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <LCD_VidWriteString>:

/****************************************************************/
/***********  Write a Sentence ( string ) on the Screen *********/
/****************************************************************/
ErrorState LCD_VidWriteString(u8 * Copy_PU8Name)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <LCD_VidWriteString+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <LCD_VidWriteString+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
	ErrorState error = ES_NOK ;
    1858:	1a 82       	std	Y+2, r1	; 0x02

	for ( u8 Local_U8Count=0  ;  Copy_PU8Name[Local_U8Count]!='\0'  ;  Local_U8Count++ )
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	0e c0       	rjmp	.+28     	; 0x187a <LCD_VidWriteString+0x32>
		{
			LCD_VidSendData( Copy_PU8Name[Local_U8Count] );
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	fc 01       	movw	r30, r24
    186a:	e2 0f       	add	r30, r18
    186c:	f3 1f       	adc	r31, r19
    186e:	80 81       	ld	r24, Z
    1870:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>
/****************************************************************/
ErrorState LCD_VidWriteString(u8 * Copy_PU8Name)
{
	ErrorState error = ES_NOK ;

	for ( u8 Local_U8Count=0  ;  Copy_PU8Name[Local_U8Count]!='\0'  ;  Local_U8Count++ )
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	fc 01       	movw	r30, r24
    1886:	e2 0f       	add	r30, r18
    1888:	f3 1f       	adc	r31, r19
    188a:	80 81       	ld	r24, Z
    188c:	88 23       	and	r24, r24
    188e:	39 f7       	brne	.-50     	; 0x185e <LCD_VidWriteString+0x16>
		{
			LCD_VidSendData( Copy_PU8Name[Local_U8Count] );
		}

	error = ES_OK ;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8a 83       	std	Y+2, r24	; 0x02

	return error ;
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <LCD_VidWriteIntNum>:
/***********  Write a Sentence ( INT Numbers ) on the Screen *********/
/*********************************************************************/
u8 Local_U8TempArray[16];

ErrorState LCD_VidWriteIntNum(s32 Copy_S32IntData)
{
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	61 97       	sbiw	r28, 0x11	; 17
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	6e 87       	std	Y+14, r22	; 0x0e
    18be:	7f 87       	std	Y+15, r23	; 0x0f
    18c0:	88 8b       	std	Y+16, r24	; 0x10
    18c2:	99 8b       	std	Y+17, r25	; 0x11
	ErrorState error = ES_NOK ;
    18c4:	1d 86       	std	Y+13, r1	; 0x0d

	u8 Local_U8Flag =0 ;
    18c6:	1c 86       	std	Y+12, r1	; 0x0c

	u32 Local_U32TempNum ;

	if (Copy_S32IntData>=0)
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	a8 89       	ldd	r26, Y+16	; 0x10
    18ce:	b9 89       	ldd	r27, Y+17	; 0x11
    18d0:	bb 23       	and	r27, r27
    18d2:	14 f0       	brlt	.+4      	; 0x18d8 <LCD_VidWriteIntNum+0x34>
	{
		Local_U8Flag =0	;
    18d4:	1c 86       	std	Y+12, r1	; 0x0c
    18d6:	11 c0       	rjmp	.+34     	; 0x18fa <LCD_VidWriteIntNum+0x56>
	}
	else
	{
		Copy_S32IntData = - Copy_S32IntData ;
    18d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18da:	9f 85       	ldd	r25, Y+15	; 0x0f
    18dc:	a8 89       	ldd	r26, Y+16	; 0x10
    18de:	b9 89       	ldd	r27, Y+17	; 0x11
    18e0:	b0 95       	com	r27
    18e2:	a0 95       	com	r26
    18e4:	90 95       	com	r25
    18e6:	81 95       	neg	r24
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	af 4f       	sbci	r26, 0xFF	; 255
    18ec:	bf 4f       	sbci	r27, 0xFF	; 255
    18ee:	8e 87       	std	Y+14, r24	; 0x0e
    18f0:	9f 87       	std	Y+15, r25	; 0x0f
    18f2:	a8 8b       	std	Y+16, r26	; 0x10
    18f4:	b9 8b       	std	Y+17, r27	; 0x11

		Local_U8Flag = 1 ;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8c 87       	std	Y+12, r24	; 0x0c
	}

	Local_U32TempNum=Copy_S32IntData	;
    18fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    18fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fe:	a8 89       	ldd	r26, Y+16	; 0x10
    1900:	b9 89       	ldd	r27, Y+17	; 0x11
    1902:	88 87       	std	Y+8, r24	; 0x08
    1904:	99 87       	std	Y+9, r25	; 0x09
    1906:	aa 87       	std	Y+10, r26	; 0x0a
    1908:	bb 87       	std	Y+11, r27	; 0x0b

	u8 Local_U8Digits;

	for (Local_U8Digits=1 ; Local_U32TempNum/=10 ; Local_U8Digits++) ;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8f 83       	std	Y+7, r24	; 0x07
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <LCD_VidWriteIntNum+0x72>
    1910:	8f 81       	ldd	r24, Y+7	; 0x07
    1912:	8f 5f       	subi	r24, 0xFF	; 255
    1914:	8f 83       	std	Y+7, r24	; 0x07
    1916:	88 85       	ldd	r24, Y+8	; 0x08
    1918:	99 85       	ldd	r25, Y+9	; 0x09
    191a:	aa 85       	ldd	r26, Y+10	; 0x0a
    191c:	bb 85       	ldd	r27, Y+11	; 0x0b
    191e:	2a e0       	ldi	r18, 0x0A	; 10
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    192e:	da 01       	movw	r26, r20
    1930:	c9 01       	movw	r24, r18
    1932:	88 87       	std	Y+8, r24	; 0x08
    1934:	99 87       	std	Y+9, r25	; 0x09
    1936:	aa 87       	std	Y+10, r26	; 0x0a
    1938:	bb 87       	std	Y+11, r27	; 0x0b
    193a:	88 85       	ldd	r24, Y+8	; 0x08
    193c:	99 85       	ldd	r25, Y+9	; 0x09
    193e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1940:	bb 85       	ldd	r27, Y+11	; 0x0b
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	a1 05       	cpc	r26, r1
    1946:	b1 05       	cpc	r27, r1
    1948:	19 f7       	brne	.-58     	; 0x1910 <LCD_VidWriteIntNum+0x6c>


	Local_U32TempNum=Copy_S32IntData ;
    194a:	8e 85       	ldd	r24, Y+14	; 0x0e
    194c:	9f 85       	ldd	r25, Y+15	; 0x0f
    194e:	a8 89       	ldd	r26, Y+16	; 0x10
    1950:	b9 89       	ldd	r27, Y+17	; 0x11
    1952:	88 87       	std	Y+8, r24	; 0x08
    1954:	99 87       	std	Y+9, r25	; 0x09
    1956:	aa 87       	std	Y+10, r26	; 0x0a
    1958:	bb 87       	std	Y+11, r27	; 0x0b

	s32 Local_U8ReverseNum=0;
    195a:	1b 82       	std	Y+3, r1	; 0x03
    195c:	1c 82       	std	Y+4, r1	; 0x04
    195e:	1d 82       	std	Y+5, r1	; 0x05
    1960:	1e 82       	std	Y+6, r1	; 0x06

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	43 c0       	rjmp	.+134    	; 0x19ec <LCD_VidWriteIntNum+0x148>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1966:	88 85       	ldd	r24, Y+8	; 0x08
    1968:	99 85       	ldd	r25, Y+9	; 0x09
    196a:	aa 85       	ldd	r26, Y+10	; 0x0a
    196c:	bb 85       	ldd	r27, Y+11	; 0x0b
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9c 01       	movw	r18, r24
    1984:	ad 01       	movw	r20, r26
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	ad 81       	ldd	r26, Y+5	; 0x05
    198c:	be 81       	ldd	r27, Y+6	; 0x06
    198e:	82 0f       	add	r24, r18
    1990:	93 1f       	adc	r25, r19
    1992:	a4 1f       	adc	r26, r20
    1994:	b5 1f       	adc	r27, r21
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	ad 83       	std	Y+5, r26	; 0x05
    199c:	be 83       	std	Y+6, r27	; 0x06

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	ad 81       	ldd	r26, Y+5	; 0x05
    19a4:	be 81       	ldd	r27, Y+6	; 0x06
    19a6:	2a e0       	ldi	r18, 0x0A	; 10
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 8d 19 	call	0x331a	; 0x331a <__mulsi3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	ad 83       	std	Y+5, r26	; 0x05
    19c0:	be 83       	std	Y+6, r27	; 0x06

		Local_U32TempNum=Local_U32TempNum/10;
    19c2:	88 85       	ldd	r24, Y+8	; 0x08
    19c4:	99 85       	ldd	r25, Y+9	; 0x09
    19c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    19c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    19ca:	2a e0       	ldi	r18, 0x0A	; 10
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    19da:	da 01       	movw	r26, r20
    19dc:	c9 01       	movw	r24, r18
    19de:	88 87       	std	Y+8, r24	; 0x08
    19e0:	99 87       	std	Y+9, r25	; 0x09
    19e2:	aa 87       	std	Y+10, r26	; 0x0a
    19e4:	bb 87       	std	Y+11, r27	; 0x0b

	Local_U32TempNum=Copy_S32IntData ;

	s32 Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	88 85       	ldd	r24, Y+8	; 0x08
    19ee:	99 85       	ldd	r25, Y+9	; 0x09
    19f0:	aa 85       	ldd	r26, Y+10	; 0x0a
    19f2:	bb 85       	ldd	r27, Y+11	; 0x0b
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	a1 05       	cpc	r26, r1
    19f8:	b1 05       	cpc	r27, r1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <LCD_VidWriteIntNum+0x15a>
    19fc:	b4 cf       	rjmp	.-152    	; 0x1966 <LCD_VidWriteIntNum+0xc2>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	ad 81       	ldd	r26, Y+5	; 0x05
    1a04:	be 81       	ldd	r27, Y+6	; 0x06
    1a06:	2a e0       	ldi	r18, 0x0A	; 10
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1a16:	da 01       	movw	r26, r20
    1a18:	c9 01       	movw	r24, r18
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	ad 83       	std	Y+5, r26	; 0x05
    1a20:	be 83       	std	Y+6, r27	; 0x06

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8Digits ; Local_U8Count++ )
    1a22:	1a 82       	std	Y+2, r1	; 0x02
    1a24:	2b c0       	rjmp	.+86     	; 0x1a7c <LCD_VidWriteIntNum+0x1d8>
	{
		Local_U8TempArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	08 2f       	mov	r16, r24
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	ad 81       	ldd	r26, Y+5	; 0x05
    1a32:	be 81       	ldd	r27, Y+6	; 0x06
    1a34:	2a e0       	ldi	r18, 0x0A	; 10
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	80 5d       	subi	r24, 0xD0	; 208
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	e3 5e       	subi	r30, 0xE3	; 227
    1a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a50:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	ad 81       	ldd	r26, Y+5	; 0x05
    1a58:	be 81       	ldd	r27, Y+6	; 0x06
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1a6a:	da 01       	movw	r26, r20
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	ad 83       	std	Y+5, r26	; 0x05
    1a74:	be 83       	std	Y+6, r27	; 0x06

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8Digits ; Local_U8Count++ )
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 17       	cp	r25, r24
    1a82:	88 f2       	brcs	.-94     	; 0x1a26 <LCD_VidWriteIntNum+0x182>
		Local_U8TempArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	if (Local_U8Flag)
    1a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a86:	88 23       	and	r24, r24
    1a88:	41 f0       	breq	.+16     	; 0x1a9a <LCD_VidWriteIntNum+0x1f6>
	{
		LCD_VidSendData('-') ;
    1a8a:	8d e2       	ldi	r24, 0x2D	; 45
    1a8c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>

		LCD_VidWriteString(Local_U8TempArray) ;
    1a90:	8d e1       	ldi	r24, 0x1D	; 29
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <LCD_VidWriteIntNum+0x1fe>
	}
	else
	{
		LCD_VidWriteString(Local_U8TempArray) ;
    1a9a:	8d e1       	ldi	r24, 0x1D	; 29
    1a9c:	92 e0       	ldi	r25, 0x02	; 2
    1a9e:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
	}

	error = ES_OK ;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	8d 87       	std	Y+13, r24	; 0x0d

	return error ;
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1aa8:	61 96       	adiw	r28, 0x11	; 17
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <LCD_VidWriteFloatNum>:
/***********  Write a Sentense ( Float Numbers ) on the Screen *********/
/***********************************************************************/
u8 Local_U8FloatArray[10];

ErrorState LCD_VidWriteFloatNum(f32 Copy_F32IntData)
{
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	6b 97       	sbiw	r28, 0x1b	; 27
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	68 8f       	std	Y+24, r22	; 0x18
    1ad8:	79 8f       	std	Y+25, r23	; 0x19
    1ada:	8a 8f       	std	Y+26, r24	; 0x1a
    1adc:	9b 8f       	std	Y+27, r25	; 0x1b
	ErrorState error = ES_NOK ;
    1ade:	1f 8a       	std	Y+23, r1	; 0x17

	u8 Local_U8Flag =0 ;
    1ae0:	1e 8a       	std	Y+22, r1	; 0x16

	if (Copy_F32IntData>=0)
    1ae2:	68 8d       	ldd	r22, Y+24	; 0x18
    1ae4:	79 8d       	ldd	r23, Y+25	; 0x19
    1ae6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ae8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
    1af6:	88 23       	and	r24, r24
    1af8:	14 f0       	brlt	.+4      	; 0x1afe <LCD_VidWriteFloatNum+0x40>
	{
		Local_U8Flag =0	;
    1afa:	1e 8a       	std	Y+22, r1	; 0x16
    1afc:	0b c0       	rjmp	.+22     	; 0x1b14 <LCD_VidWriteFloatNum+0x56>
	}
	else
	{
		Copy_F32IntData = - Copy_F32IntData ;
    1afe:	88 8d       	ldd	r24, Y+24	; 0x18
    1b00:	99 8d       	ldd	r25, Y+25	; 0x19
    1b02:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b04:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b06:	b0 58       	subi	r27, 0x80	; 128
    1b08:	88 8f       	std	Y+24, r24	; 0x18
    1b0a:	99 8f       	std	Y+25, r25	; 0x19
    1b0c:	aa 8f       	std	Y+26, r26	; 0x1a
    1b0e:	bb 8f       	std	Y+27, r27	; 0x1b

		Local_U8Flag = 1 ;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	8e 8b       	std	Y+22, r24	; 0x16

	}


	u32 Local_U32TempNum = Copy_F32IntData ;
    1b14:	68 8d       	ldd	r22, Y+24	; 0x18
    1b16:	79 8d       	ldd	r23, Y+25	; 0x19
    1b18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8a 8b       	std	Y+18, r24	; 0x12
    1b26:	9b 8b       	std	Y+19, r25	; 0x13
    1b28:	ac 8b       	std	Y+20, r26	; 0x14
    1b2a:	bd 8b       	std	Y+21, r27	; 0x15

	u8 Local_U8IntDigits;

	for (Local_U8IntDigits=1 ; Local_U32TempNum/=10 ; Local_U8IntDigits++) ;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 8b       	std	Y+17, r24	; 0x11
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <LCD_VidWriteFloatNum+0x7a>
    1b32:	89 89       	ldd	r24, Y+17	; 0x11
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	89 8b       	std	Y+17, r24	; 0x11
    1b38:	8a 89       	ldd	r24, Y+18	; 0x12
    1b3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b3c:	ac 89       	ldd	r26, Y+20	; 0x14
    1b3e:	bd 89       	ldd	r27, Y+21	; 0x15
    1b40:	2a e0       	ldi	r18, 0x0A	; 10
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1b50:	da 01       	movw	r26, r20
    1b52:	c9 01       	movw	r24, r18
    1b54:	8a 8b       	std	Y+18, r24	; 0x12
    1b56:	9b 8b       	std	Y+19, r25	; 0x13
    1b58:	ac 8b       	std	Y+20, r26	; 0x14
    1b5a:	bd 8b       	std	Y+21, r27	; 0x15
    1b5c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b60:	ac 89       	ldd	r26, Y+20	; 0x14
    1b62:	bd 89       	ldd	r27, Y+21	; 0x15
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	a1 05       	cpc	r26, r1
    1b68:	b1 05       	cpc	r27, r1
    1b6a:	19 f7       	brne	.-58     	; 0x1b32 <LCD_VidWriteFloatNum+0x74>


	Local_U32TempNum=Copy_F32IntData ;
    1b6c:	68 8d       	ldd	r22, Y+24	; 0x18
    1b6e:	79 8d       	ldd	r23, Y+25	; 0x19
    1b70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8a 8b       	std	Y+18, r24	; 0x12
    1b7e:	9b 8b       	std	Y+19, r25	; 0x13
    1b80:	ac 8b       	std	Y+20, r26	; 0x14
    1b82:	bd 8b       	std	Y+21, r27	; 0x15

	s32 Local_U8ReverseNum=0;
    1b84:	1d 86       	std	Y+13, r1	; 0x0d
    1b86:	1e 86       	std	Y+14, r1	; 0x0e
    1b88:	1f 86       	std	Y+15, r1	; 0x0f
    1b8a:	18 8a       	std	Y+16, r1	; 0x10

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
    1b8e:	43 c0       	rjmp	.+134    	; 0x1c16 <LCD_VidWriteFloatNum+0x158>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1b90:	8a 89       	ldd	r24, Y+18	; 0x12
    1b92:	9b 89       	ldd	r25, Y+19	; 0x13
    1b94:	ac 89       	ldd	r26, Y+20	; 0x14
    1b96:	bd 89       	ldd	r27, Y+21	; 0x15
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 01       	movw	r18, r24
    1bae:	ad 01       	movw	r20, r26
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	af 85       	ldd	r26, Y+15	; 0x0f
    1bb6:	b8 89       	ldd	r27, Y+16	; 0x10
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	a4 1f       	adc	r26, r20
    1bbe:	b5 1f       	adc	r27, r21
    1bc0:	8d 87       	std	Y+13, r24	; 0x0d
    1bc2:	9e 87       	std	Y+14, r25	; 0x0e
    1bc4:	af 87       	std	Y+15, r26	; 0x0f
    1bc6:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	af 85       	ldd	r26, Y+15	; 0x0f
    1bce:	b8 89       	ldd	r27, Y+16	; 0x10
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 8d 19 	call	0x331a	; 0x331a <__mulsi3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 87       	std	Y+13, r24	; 0x0d
    1be6:	9e 87       	std	Y+14, r25	; 0x0e
    1be8:	af 87       	std	Y+15, r26	; 0x0f
    1bea:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U32TempNum=Local_U32TempNum/10;
    1bec:	8a 89       	ldd	r24, Y+18	; 0x12
    1bee:	9b 89       	ldd	r25, Y+19	; 0x13
    1bf0:	ac 89       	ldd	r26, Y+20	; 0x14
    1bf2:	bd 89       	ldd	r27, Y+21	; 0x15
    1bf4:	2a e0       	ldi	r18, 0x0A	; 10
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1c04:	da 01       	movw	r26, r20
    1c06:	c9 01       	movw	r24, r18
    1c08:	8a 8b       	std	Y+18, r24	; 0x12
    1c0a:	9b 8b       	std	Y+19, r25	; 0x13
    1c0c:	ac 8b       	std	Y+20, r26	; 0x14
    1c0e:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U32TempNum=Copy_F32IntData ;

	s32 Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	8a 89       	ldd	r24, Y+18	; 0x12
    1c18:	9b 89       	ldd	r25, Y+19	; 0x13
    1c1a:	ac 89       	ldd	r26, Y+20	; 0x14
    1c1c:	bd 89       	ldd	r27, Y+21	; 0x15
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	a1 05       	cpc	r26, r1
    1c22:	b1 05       	cpc	r27, r1
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <LCD_VidWriteFloatNum+0x16a>
    1c26:	b4 cf       	rjmp	.-152    	; 0x1b90 <LCD_VidWriteFloatNum+0xd2>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	af 85       	ldd	r26, Y+15	; 0x0f
    1c2e:	b8 89       	ldd	r27, Y+16	; 0x10
    1c30:	2a e0       	ldi	r18, 0x0A	; 10
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1c40:	da 01       	movw	r26, r20
    1c42:	c9 01       	movw	r24, r18
    1c44:	8d 87       	std	Y+13, r24	; 0x0d
    1c46:	9e 87       	std	Y+14, r25	; 0x0e
    1c48:	af 87       	std	Y+15, r26	; 0x0f
    1c4a:	b8 8b       	std	Y+16, r27	; 0x10

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8IntDigits ; Local_U8Count++ )
    1c4c:	1c 86       	std	Y+12, r1	; 0x0c
    1c4e:	2b c0       	rjmp	.+86     	; 0x1ca6 <LCD_VidWriteFloatNum+0x1e8>
	{
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1c50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c52:	08 2f       	mov	r16, r24
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	af 85       	ldd	r26, Y+15	; 0x0f
    1c5c:	b8 89       	ldd	r27, Y+16	; 0x10
    1c5e:	2a e0       	ldi	r18, 0x0A	; 10
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	80 5d       	subi	r24, 0xD0	; 208
    1c74:	f8 01       	movw	r30, r16
    1c76:	e3 5d       	subi	r30, 0xD3	; 211
    1c78:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7a:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	af 85       	ldd	r26, Y+15	; 0x0f
    1c82:	b8 89       	ldd	r27, Y+16	; 0x10
    1c84:	2a e0       	ldi	r18, 0x0A	; 10
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1c94:	da 01       	movw	r26, r20
    1c96:	c9 01       	movw	r24, r18
    1c98:	8d 87       	std	Y+13, r24	; 0x0d
    1c9a:	9e 87       	std	Y+14, r25	; 0x0e
    1c9c:	af 87       	std	Y+15, r26	; 0x0f
    1c9e:	b8 8b       	std	Y+16, r27	; 0x10

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	u8 Local_U8Count;

	for (Local_U8Count=0 ; Local_U8Count<Local_U8IntDigits ; Local_U8Count++ )
    1ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8c 87       	std	Y+12, r24	; 0x0c
    1ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	98 17       	cp	r25, r24
    1cac:	88 f2       	brcs	.-94     	; 0x1c50 <LCD_VidWriteFloatNum+0x192>
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	Local_U8FloatArray[Local_U8Count] = '.' ;
    1cae:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	e3 5d       	subi	r30, 0xD3	; 211
    1cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cba:	8e e2       	ldi	r24, 0x2E	; 46
    1cbc:	80 83       	st	Z, r24





	Local_U32TempNum = Copy_F32IntData ;
    1cbe:	68 8d       	ldd	r22, Y+24	; 0x18
    1cc0:	79 8d       	ldd	r23, Y+25	; 0x19
    1cc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cc4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8a 8b       	std	Y+18, r24	; 0x12
    1cd0:	9b 8b       	std	Y+19, r25	; 0x13
    1cd2:	ac 8b       	std	Y+20, r26	; 0x14
    1cd4:	bd 8b       	std	Y+21, r27	; 0x15

	f32 Local_F32DecimalNum = Copy_F32IntData - Local_U32TempNum ;
    1cd6:	6a 89       	ldd	r22, Y+18	; 0x12
    1cd8:	7b 89       	ldd	r23, Y+19	; 0x13
    1cda:	8c 89       	ldd	r24, Y+20	; 0x14
    1cdc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cde:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	68 8d       	ldd	r22, Y+24	; 0x18
    1ce8:	79 8d       	ldd	r23, Y+25	; 0x19
    1cea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	88 87       	std	Y+8, r24	; 0x08
    1cf8:	99 87       	std	Y+9, r25	; 0x09
    1cfa:	aa 87       	std	Y+10, r26	; 0x0a
    1cfc:	bb 87       	std	Y+11, r27	; 0x0b

	u32 Local_U32DecimalNum = Local_F32DecimalNum * 10000  ;
    1cfe:	68 85       	ldd	r22, Y+8	; 0x08
    1d00:	79 85       	ldd	r23, Y+9	; 0x09
    1d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e4       	ldi	r19, 0x40	; 64
    1d0a:	4c e1       	ldi	r20, 0x1C	; 28
    1d0c:	56 e4       	ldi	r21, 0x46	; 70
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8c 83       	std	Y+4, r24	; 0x04
    1d24:	9d 83       	std	Y+5, r25	; 0x05
    1d26:	ae 83       	std	Y+6, r26	; 0x06
    1d28:	bf 83       	std	Y+7, r27	; 0x07

	Local_U32TempNum = Local_U32DecimalNum ;
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2e:	ae 81       	ldd	r26, Y+6	; 0x06
    1d30:	bf 81       	ldd	r27, Y+7	; 0x07
    1d32:	8a 8b       	std	Y+18, r24	; 0x12
    1d34:	9b 8b       	std	Y+19, r25	; 0x13
    1d36:	ac 8b       	std	Y+20, r26	; 0x14
    1d38:	bd 8b       	std	Y+21, r27	; 0x15

	u8 Local_U8FloatDigits;

	for (Local_U8FloatDigits=1 ; Local_U32TempNum/=10 ; Local_U8FloatDigits++) ;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <LCD_VidWriteFloatNum+0x288>
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8a 89       	ldd	r24, Y+18	; 0x12
    1d48:	9b 89       	ldd	r25, Y+19	; 0x13
    1d4a:	ac 89       	ldd	r26, Y+20	; 0x14
    1d4c:	bd 89       	ldd	r27, Y+21	; 0x15
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1d5e:	da 01       	movw	r26, r20
    1d60:	c9 01       	movw	r24, r18
    1d62:	8a 8b       	std	Y+18, r24	; 0x12
    1d64:	9b 8b       	std	Y+19, r25	; 0x13
    1d66:	ac 8b       	std	Y+20, r26	; 0x14
    1d68:	bd 8b       	std	Y+21, r27	; 0x15
    1d6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1d6e:	ac 89       	ldd	r26, Y+20	; 0x14
    1d70:	bd 89       	ldd	r27, Y+21	; 0x15
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	a1 05       	cpc	r26, r1
    1d76:	b1 05       	cpc	r27, r1
    1d78:	19 f7       	brne	.-58     	; 0x1d40 <LCD_VidWriteFloatNum+0x282>


	Local_U32TempNum=Local_U32DecimalNum ;
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	ae 81       	ldd	r26, Y+6	; 0x06
    1d80:	bf 81       	ldd	r27, Y+7	; 0x07
    1d82:	8a 8b       	std	Y+18, r24	; 0x12
    1d84:	9b 8b       	std	Y+19, r25	; 0x13
    1d86:	ac 8b       	std	Y+20, r26	; 0x14
    1d88:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U8ReverseNum=0;
    1d8a:	1d 86       	std	Y+13, r1	; 0x0d
    1d8c:	1e 86       	std	Y+14, r1	; 0x0e
    1d8e:	1f 86       	std	Y+15, r1	; 0x0f
    1d90:	18 8a       	std	Y+16, r1	; 0x10

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	43 c0       	rjmp	.+134    	; 0x1e1c <LCD_VidWriteFloatNum+0x35e>
	{
		Local_U8ReverseNum=Local_U8ReverseNum+(Local_U32TempNum%10);
    1d96:	8a 89       	ldd	r24, Y+18	; 0x12
    1d98:	9b 89       	ldd	r25, Y+19	; 0x13
    1d9a:	ac 89       	ldd	r26, Y+20	; 0x14
    1d9c:	bd 89       	ldd	r27, Y+21	; 0x15
    1d9e:	2a e0       	ldi	r18, 0x0A	; 10
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9c 01       	movw	r18, r24
    1db4:	ad 01       	movw	r20, r26
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	af 85       	ldd	r26, Y+15	; 0x0f
    1dbc:	b8 89       	ldd	r27, Y+16	; 0x10
    1dbe:	82 0f       	add	r24, r18
    1dc0:	93 1f       	adc	r25, r19
    1dc2:	a4 1f       	adc	r26, r20
    1dc4:	b5 1f       	adc	r27, r21
    1dc6:	8d 87       	std	Y+13, r24	; 0x0d
    1dc8:	9e 87       	std	Y+14, r25	; 0x0e
    1dca:	af 87       	std	Y+15, r26	; 0x0f
    1dcc:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U8ReverseNum=Local_U8ReverseNum*10;
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	af 85       	ldd	r26, Y+15	; 0x0f
    1dd4:	b8 89       	ldd	r27, Y+16	; 0x10
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 8d 19 	call	0x331a	; 0x331a <__mulsi3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8d 87       	std	Y+13, r24	; 0x0d
    1dec:	9e 87       	std	Y+14, r25	; 0x0e
    1dee:	af 87       	std	Y+15, r26	; 0x0f
    1df0:	b8 8b       	std	Y+16, r27	; 0x10

		Local_U32TempNum=Local_U32TempNum/10;
    1df2:	8a 89       	ldd	r24, Y+18	; 0x12
    1df4:	9b 89       	ldd	r25, Y+19	; 0x13
    1df6:	ac 89       	ldd	r26, Y+20	; 0x14
    1df8:	bd 89       	ldd	r27, Y+21	; 0x15
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodsi4>
    1e0a:	da 01       	movw	r26, r20
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	8a 8b       	std	Y+18, r24	; 0x12
    1e10:	9b 8b       	std	Y+19, r25	; 0x13
    1e12:	ac 8b       	std	Y+20, r26	; 0x14
    1e14:	bd 8b       	std	Y+21, r27	; 0x15

	Local_U32TempNum=Local_U32DecimalNum ;

	Local_U8ReverseNum=0;

	for (u8 Local_U8Count=0 ; Local_U32TempNum ;Local_U8Count++ )
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e1e:	9b 89       	ldd	r25, Y+19	; 0x13
    1e20:	ac 89       	ldd	r26, Y+20	; 0x14
    1e22:	bd 89       	ldd	r27, Y+21	; 0x15
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	a1 05       	cpc	r26, r1
    1e28:	b1 05       	cpc	r27, r1
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <LCD_VidWriteFloatNum+0x370>
    1e2c:	b4 cf       	rjmp	.-152    	; 0x1d96 <LCD_VidWriteFloatNum+0x2d8>
		Local_U8ReverseNum=Local_U8ReverseNum*10;

		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	af 85       	ldd	r26, Y+15	; 0x0f
    1e34:	b8 89       	ldd	r27, Y+16	; 0x10
    1e36:	2a e0       	ldi	r18, 0x0A	; 10
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1e46:	da 01       	movw	r26, r20
    1e48:	c9 01       	movw	r24, r18
    1e4a:	8d 87       	std	Y+13, r24	; 0x0d
    1e4c:	9e 87       	std	Y+14, r25	; 0x0e
    1e4e:	af 87       	std	Y+15, r26	; 0x0f
    1e50:	b8 8b       	std	Y+16, r27	; 0x10

	for (Local_U8Count=Local_U8IntDigits+1 ; Local_U8Count<=(Local_U8IntDigits+4) ; Local_U8Count++ )
    1e52:	89 89       	ldd	r24, Y+17	; 0x11
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	8c 87       	std	Y+12, r24	; 0x0c
    1e58:	2b c0       	rjmp	.+86     	; 0x1eb0 <LCD_VidWriteFloatNum+0x3f2>
	{
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';
    1e5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e5c:	08 2f       	mov	r16, r24
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	af 85       	ldd	r26, Y+15	; 0x0f
    1e66:	b8 89       	ldd	r27, Y+16	; 0x10
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	80 5d       	subi	r24, 0xD0	; 208
    1e7e:	f8 01       	movw	r30, r16
    1e80:	e3 5d       	subi	r30, 0xD3	; 211
    1e82:	fd 4f       	sbci	r31, 0xFD	; 253
    1e84:	80 83       	st	Z, r24

		Local_U8ReverseNum=Local_U8ReverseNum/10;
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	af 85       	ldd	r26, Y+15	; 0x0f
    1e8c:	b8 89       	ldd	r27, Y+16	; 0x10
    1e8e:	2a e0       	ldi	r18, 0x0A	; 10
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__divmodsi4>
    1e9e:	da 01       	movw	r26, r20
    1ea0:	c9 01       	movw	r24, r18
    1ea2:	8d 87       	std	Y+13, r24	; 0x0d
    1ea4:	9e 87       	std	Y+14, r25	; 0x0e
    1ea6:	af 87       	std	Y+15, r26	; 0x0f
    1ea8:	b8 8b       	std	Y+16, r27	; 0x10
		Local_U32TempNum=Local_U32TempNum/10;
	}

	Local_U8ReverseNum=Local_U8ReverseNum/10;

	for (Local_U8Count=Local_U8IntDigits+1 ; Local_U8Count<=(Local_U8IntDigits+4) ; Local_U8Count++ )
    1eaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	8c 87       	std	Y+12, r24	; 0x0c
    1eb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	89 89       	ldd	r24, Y+17	; 0x11
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	04 96       	adiw	r24, 0x04	; 4
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	5c f6       	brge	.-106    	; 0x1e5a <LCD_VidWriteFloatNum+0x39c>
		Local_U8FloatArray[Local_U8Count]=(Local_U8ReverseNum%10)+'0';

		Local_U8ReverseNum=Local_U8ReverseNum/10;

	}
	if (Local_U8Flag)
    1ec4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ec6:	88 23       	and	r24, r24
    1ec8:	41 f0       	breq	.+16     	; 0x1eda <LCD_VidWriteFloatNum+0x41c>
	{
		LCD_VidSendData('-') ;
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>

		LCD_VidWriteString(Local_U8FloatArray) ;
    1ed0:	8d e2       	ldi	r24, 0x2D	; 45
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <LCD_VidWriteFloatNum+0x424>
	}
	else
	{
		LCD_VidWriteString(Local_U8FloatArray) ;
    1eda:	8d e2       	ldi	r24, 0x2D	; 45
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
	}

	error = ES_OK ;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	8f 8b       	std	Y+23, r24	; 0x17

	return error ;
    1ee6:	8f 89       	ldd	r24, Y+23	; 0x17

}
    1ee8:	6b 96       	adiw	r28, 0x1b	; 27
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <LCD_VidRecordSpecialChar>:

/*******************************************************************/
/***********  Record a Special Character in the LCD CG-RAM *********/
/*******************************************************************/
ErrorState LCD_VidRecordSpecialChar ( u8 Copy_U8PatternMatrix[8] ,u8 Copy_U8CGRAMPos)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <LCD_VidRecordSpecialChar+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_VidRecordSpecialChar+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState error = ES_NOK ;
    1f12:	1a 82       	std	Y+2, r1	; 0x02

	if ( ( Copy_U8CGRAMPos>=0 ) && ( Copy_U8CGRAMPos<=7 ) )
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	28 f5       	brcc	.+74     	; 0x1f64 <LCD_VidRecordSpecialChar+0x66>
	{
		/* Set Address Counter to the CG-RAM */
		LCD_VidSendCommand(64+Copy_U8CGRAMPos*8) ;
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	08 96       	adiw	r24, 0x08	; 8
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>

		for ( u8 Local_U8Count=0 ; Local_U8Count<8 ; Local_U8Count++ )
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <LCD_VidRecordSpecialChar+0x54>
		{
			LCD_VidSendData(Copy_U8PatternMatrix[Local_U8Count]) ;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	fc 01       	movw	r30, r24
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	80 81       	ld	r24, Z
    1f48:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>
	if ( ( Copy_U8CGRAMPos>=0 ) && ( Copy_U8CGRAMPos<=7 ) )
	{
		/* Set Address Counter to the CG-RAM */
		LCD_VidSendCommand(64+Copy_U8CGRAMPos*8) ;

		for ( u8 Local_U8Count=0 ; Local_U8Count<8 ; Local_U8Count++ )
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	88 30       	cpi	r24, 0x08	; 8
    1f56:	78 f3       	brcs	.-34     	; 0x1f36 <LCD_VidRecordSpecialChar+0x38>
		{
			LCD_VidSendData(Copy_U8PatternMatrix[Local_U8Count]) ;
		}
		/* Return Address Counter to the DD-RAM*/
		LCD_VidSendCommand(128) ;
    1f58:	80 e8       	ldi	r24, 0x80	; 128
    1f5a:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>

		error = ES_OK ;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <LCD_VidRecordSpecialChar+0x6a>
	}
	else
	{
		error = ES_OUT_OF_RANGE ;
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	8a 83       	std	Y+2, r24	; 0x02
	}
	return error ;
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <LCD_VidWriteSpecialChar>:

/**************************************************************************/
/***********  Write a Special Character on the Screen form CG-RAM *********/
/**************************************************************************/
ErrorState LCD_VidWriteSpecialChar ( u8 Copy_U8CharPattern )
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <LCD_VidWriteSpecialChar+0x6>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    1f86:	19 82       	std	Y+1, r1	; 0x01

	LCD_VidSendData(Copy_U8CharPattern) ;
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>

	error = ES_OK ;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <DIO_EnuSetPinDir>:

/****************************************************************/
/****  Define the direction of Pin as an input or an output  ****/
/****************************************************************/
ErrorState DIO_EnuSetPinDir( u8 Copy_U8PinNumber , u8 Copy_U8PinDir )
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <DIO_EnuSetPinDir+0x6>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    1fae:	19 82       	std	Y+1, r1	; 0x01

	if ( Copy_U8PinDir == DIO_OUTPUT )
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <DIO_EnuSetPinDir+0x1a>
    1fb6:	79 c0       	rjmp	.+242    	; 0x20aa <DIO_EnuSetPinDir+0x10c>
		{

			/** If pin number between pin0 and pin7 set this pin as an output **/
			if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	88 30       	cpi	r24, 0x08	; 8
    1fbc:	b0 f4       	brcc	.+44     	; 0x1fea <DIO_EnuSetPinDir+0x4c>

				{
					SET_BIT ( DIO_DDRA , (Copy_U8PinNumber) ) ;
    1fbe:	aa e3       	ldi	r26, 0x3A	; 58
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ea e3       	ldi	r30, 0x3A	; 58
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_EnuSetPinDir+0x3e>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_EnuSetPinDir+0x3a>
    1fe0:	84 2b       	or	r24, r20
    1fe2:	8c 93       	st	X, r24

					error = ES_OK ;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	e3 c0       	rjmp	.+454    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}


			/** If pin number between pin8 and pin15 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	88 30       	cpi	r24, 0x08	; 8
    1fee:	e0 f0       	brcs	.+56     	; 0x2028 <DIO_EnuSetPinDir+0x8a>
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	80 31       	cpi	r24, 0x10	; 16
    1ff4:	c8 f4       	brcc	.+50     	; 0x2028 <DIO_EnuSetPinDir+0x8a>

				{
					SET_BIT ( DIO_DDRB , ( (Copy_U8PinNumber) - (DIO_PIN8) ) ) ;
    1ff6:	a7 e3       	ldi	r26, 0x37	; 55
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e7 e3       	ldi	r30, 0x37	; 55
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9c 01       	movw	r18, r24
    200a:	28 50       	subi	r18, 0x08	; 8
    200c:	30 40       	sbci	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_EnuSetPinDir+0x7c>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_EnuSetPinDir+0x78>
    201e:	84 2b       	or	r24, r20
    2020:	8c 93       	st	X, r24

					error = ES_OK ;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	c4 c0       	rjmp	.+392    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin16 and pin23 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	80 31       	cpi	r24, 0x10	; 16
    202c:	e0 f0       	brcs	.+56     	; 0x2066 <DIO_EnuSetPinDir+0xc8>
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	88 31       	cpi	r24, 0x18	; 24
    2032:	c8 f4       	brcc	.+50     	; 0x2066 <DIO_EnuSetPinDir+0xc8>

					{
						SET_BIT ( DIO_DDRC , ( (Copy_U8PinNumber) - (DIO_PIN16) ) ) ;
    2034:	a4 e3       	ldi	r26, 0x34	; 52
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e4 e3       	ldi	r30, 0x34	; 52
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 01       	movw	r18, r24
    2048:	20 51       	subi	r18, 0x10	; 16
    204a:	30 40       	sbci	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_EnuSetPinDir+0xba>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_EnuSetPinDir+0xb6>
    205c:	84 2b       	or	r24, r20
    205e:	8c 93       	st	X, r24

						error = ES_OK ;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	a5 c0       	rjmp	.+330    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
					}

			/** If pin number between pin24 and pin31 set this pin as an output **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 31       	cpi	r24, 0x18	; 24
    206a:	e0 f0       	brcs	.+56     	; 0x20a4 <DIO_EnuSetPinDir+0x106>
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	80 32       	cpi	r24, 0x20	; 32
    2070:	c8 f4       	brcc	.+50     	; 0x20a4 <DIO_EnuSetPinDir+0x106>

					{
						SET_BIT(DIO_DDRD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    2072:	a1 e3       	ldi	r26, 0x31	; 49
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e1 e3       	ldi	r30, 0x31	; 49
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 01       	movw	r18, r24
    2086:	28 51       	subi	r18, 0x18	; 24
    2088:	30 40       	sbci	r19, 0x00	; 0
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	02 2e       	mov	r0, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <DIO_EnuSetPinDir+0xf8>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <DIO_EnuSetPinDir+0xf4>
    209a:	84 2b       	or	r24, r20
    209c:	8c 93       	st	X, r24

						error = ES_OK ;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	86 c0       	rjmp	.+268    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
					}
			else

				{
				error = ES_OUT_OF_RANGE ;
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	83 c0       	rjmp	.+262    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}
		}



	else if (Copy_U8PinDir == DIO_INPUT)
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <DIO_EnuSetPinDir+0x114>
    20b0:	7d c0       	rjmp	.+250    	; 0x21ac <DIO_EnuSetPinDir+0x20e>
		{

			/** If pin number between pin0 and pin7 set this pin as input **/
			if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	88 30       	cpi	r24, 0x08	; 8
    20b6:	b8 f4       	brcc	.+46     	; 0x20e6 <DIO_EnuSetPinDir+0x148>

				{
					CLR_BIT ( DIO_DDRA ,( (Copy_U8PinNumber) )) ;
    20b8:	aa e3       	ldi	r26, 0x3A	; 58
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ea e3       	ldi	r30, 0x3A	; 58
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <DIO_EnuSetPinDir+0x138>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <DIO_EnuSetPinDir+0x134>
    20da:	80 95       	com	r24
    20dc:	84 23       	and	r24, r20
    20de:	8c 93       	st	X, r24

					error = ES_OK ;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	65 c0       	rjmp	.+202    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}


			/** If pin number between pin8 and pin15 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	88 30       	cpi	r24, 0x08	; 8
    20ea:	e8 f0       	brcs	.+58     	; 0x2126 <DIO_EnuSetPinDir+0x188>
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 31       	cpi	r24, 0x10	; 16
    20f0:	d0 f4       	brcc	.+52     	; 0x2126 <DIO_EnuSetPinDir+0x188>

				{
					CLR_BIT ( DIO_DDRB , ( (Copy_U8PinNumber) - (DIO_PIN8) ) ) ;
    20f2:	a7 e3       	ldi	r26, 0x37	; 55
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e7 e3       	ldi	r30, 0x37	; 55
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9c 01       	movw	r18, r24
    2106:	28 50       	subi	r18, 0x08	; 8
    2108:	30 40       	sbci	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_EnuSetPinDir+0x178>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_EnuSetPinDir+0x174>
    211a:	80 95       	com	r24
    211c:	84 23       	and	r24, r20
    211e:	8c 93       	st	X, r24

					error = ES_OK ;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	45 c0       	rjmp	.+138    	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin16 and pin23 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	80 31       	cpi	r24, 0x10	; 16
    212a:	e8 f0       	brcs	.+58     	; 0x2166 <DIO_EnuSetPinDir+0x1c8>
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	88 31       	cpi	r24, 0x18	; 24
    2130:	d0 f4       	brcc	.+52     	; 0x2166 <DIO_EnuSetPinDir+0x1c8>

				{
					CLR_BIT ( DIO_DDRC , ( (Copy_U8PinNumber) - (DIO_PIN16)  ) ) ;
    2132:	a4 e3       	ldi	r26, 0x34	; 52
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e4 e3       	ldi	r30, 0x34	; 52
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 01       	movw	r18, r24
    2146:	20 51       	subi	r18, 0x10	; 16
    2148:	30 40       	sbci	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_EnuSetPinDir+0x1b8>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_EnuSetPinDir+0x1b4>
    215a:	80 95       	com	r24
    215c:	84 23       	and	r24, r20
    215e:	8c 93       	st	X, r24

					error = ES_OK ;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	25 c0       	rjmp	.+74     	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}

			/** If pin number between pin24 and pin31 set this pin as input **/
			else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	88 31       	cpi	r24, 0x18	; 24
    216a:	e8 f0       	brcs	.+58     	; 0x21a6 <DIO_EnuSetPinDir+0x208>
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	80 32       	cpi	r24, 0x20	; 32
    2170:	d0 f4       	brcc	.+52     	; 0x21a6 <DIO_EnuSetPinDir+0x208>

				{
					CLR_BIT(DIO_DDRD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    2172:	a1 e3       	ldi	r26, 0x31	; 49
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e1 e3       	ldi	r30, 0x31	; 49
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 01       	movw	r18, r24
    2186:	28 51       	subi	r18, 0x18	; 24
    2188:	30 40       	sbci	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_EnuSetPinDir+0x1f8>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_EnuSetPinDir+0x1f4>
    219a:	80 95       	com	r24
    219c:	84 23       	and	r24, r20
    219e:	8c 93       	st	X, r24

					error = ES_OK ;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	05 c0       	rjmp	.+10     	; 0x21b0 <DIO_EnuSetPinDir+0x212>
				}
			else

				{
					error = ES_OUT_OF_RANGE ;
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <DIO_EnuSetPinDir+0x212>
		}


	else
		{
			error = ES_OUT_OF_RANGE ;
    21ac:	83 e0       	ldi	r24, 0x03	; 3
    21ae:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <DIO_EnuSetPinVal>:

/************************************/
/****  Define a value on a pin   ****/
/************************************/
ErrorState DIO_EnuSetPinVal(u8 Copy_U8PinNumber , u8 Copy_U8Value)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <DIO_EnuSetPinVal+0x6>
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    21ce:	19 82       	std	Y+1, r1	; 0x01

	if ( Copy_U8Value == DIO_HIGH )
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <DIO_EnuSetPinVal+0x1a>
    21d6:	79 c0       	rjmp	.+242    	; 0x22ca <DIO_EnuSetPinVal+0x10c>
			{

				/** If pin number between pin0 and pin7 set this pin as an HIGH **/
				if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	88 30       	cpi	r24, 0x08	; 8
    21dc:	b0 f4       	brcc	.+44     	; 0x220a <DIO_EnuSetPinVal+0x4c>

					{
						SET_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    21de:	ab e3       	ldi	r26, 0x3B	; 59
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	eb e3       	ldi	r30, 0x3B	; 59
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <DIO_EnuSetPinVal+0x3e>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <DIO_EnuSetPinVal+0x3a>
    2200:	84 2b       	or	r24, r20
    2202:	8c 93       	st	X, r24

						error = ES_OK ;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	e3 c0       	rjmp	.+454    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}


				/** If pin number between pin8 and pin15 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	88 30       	cpi	r24, 0x08	; 8
    220e:	e0 f0       	brcs	.+56     	; 0x2248 <DIO_EnuSetPinVal+0x8a>
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	80 31       	cpi	r24, 0x10	; 16
    2214:	c8 f4       	brcc	.+50     	; 0x2248 <DIO_EnuSetPinVal+0x8a>

					{
						SET_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2216:	a8 e3       	ldi	r26, 0x38	; 56
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e8 e3       	ldi	r30, 0x38	; 56
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 01       	movw	r18, r24
    222a:	28 50       	subi	r18, 0x08	; 8
    222c:	30 40       	sbci	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_EnuSetPinVal+0x7c>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_EnuSetPinVal+0x78>
    223e:	84 2b       	or	r24, r20
    2240:	8c 93       	st	X, r24

						error = ES_OK ;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	c4 c0       	rjmp	.+392    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin16 and pin23 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	80 31       	cpi	r24, 0x10	; 16
    224c:	e0 f0       	brcs	.+56     	; 0x2286 <DIO_EnuSetPinVal+0xc8>
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	88 31       	cpi	r24, 0x18	; 24
    2252:	c8 f4       	brcc	.+50     	; 0x2286 <DIO_EnuSetPinVal+0xc8>

						{
							SET_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    2254:	a5 e3       	ldi	r26, 0x35	; 53
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e5 e3       	ldi	r30, 0x35	; 53
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9c 01       	movw	r18, r24
    2268:	20 51       	subi	r18, 0x10	; 16
    226a:	30 40       	sbci	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_EnuSetPinVal+0xba>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_EnuSetPinVal+0xb6>
    227c:	84 2b       	or	r24, r20
    227e:	8c 93       	st	X, r24

							error = ES_OK ;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	a5 c0       	rjmp	.+330    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
						}

				/** If pin number between pin24 and pin31 set this pin as an HIGH **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 31       	cpi	r24, 0x18	; 24
    228a:	e0 f0       	brcs	.+56     	; 0x22c4 <DIO_EnuSetPinVal+0x106>
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	80 32       	cpi	r24, 0x20	; 32
    2290:	c8 f4       	brcc	.+50     	; 0x22c4 <DIO_EnuSetPinVal+0x106>

						{
							SET_BIT(DIO_PORTD , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    2292:	a2 e3       	ldi	r26, 0x32	; 50
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e2 e3       	ldi	r30, 0x32	; 50
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 01       	movw	r18, r24
    22a6:	28 51       	subi	r18, 0x18	; 24
    22a8:	30 40       	sbci	r19, 0x00	; 0
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <DIO_EnuSetPinVal+0xf8>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <DIO_EnuSetPinVal+0xf4>
    22ba:	84 2b       	or	r24, r20
    22bc:	8c 93       	st	X, r24

							error = ES_OK ;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	86 c0       	rjmp	.+268    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
						}
				else

					{
					error = ES_OUT_OF_RANGE ;
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	83 c0       	rjmp	.+262    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}
			}



		else if (Copy_U8Value == DIO_LOW)
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	88 23       	and	r24, r24
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <DIO_EnuSetPinVal+0x114>
    22d0:	7d c0       	rjmp	.+250    	; 0x23cc <DIO_EnuSetPinVal+0x20e>
			{

			/** If pin number between pin0 and pin7 set this pin as an LOW **/
				if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	88 30       	cpi	r24, 0x08	; 8
    22d6:	b8 f4       	brcc	.+46     	; 0x2306 <DIO_EnuSetPinVal+0x148>

					{
						CLR_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    22d8:	ab e3       	ldi	r26, 0x3B	; 59
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	eb e3       	ldi	r30, 0x3B	; 59
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	48 2f       	mov	r20, r24
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	02 2e       	mov	r0, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_EnuSetPinVal+0x138>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <DIO_EnuSetPinVal+0x134>
    22fa:	80 95       	com	r24
    22fc:	84 23       	and	r24, r20
    22fe:	8c 93       	st	X, r24

						error = ES_OK ;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	65 c0       	rjmp	.+202    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}


				/** If pin number between pin8 and pin15 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	88 30       	cpi	r24, 0x08	; 8
    230a:	e8 f0       	brcs	.+58     	; 0x2346 <DIO_EnuSetPinVal+0x188>
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	80 31       	cpi	r24, 0x10	; 16
    2310:	d0 f4       	brcc	.+52     	; 0x2346 <DIO_EnuSetPinVal+0x188>

					{
						CLR_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2312:	a8 e3       	ldi	r26, 0x38	; 56
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e8 e3       	ldi	r30, 0x38	; 56
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9c 01       	movw	r18, r24
    2326:	28 50       	subi	r18, 0x08	; 8
    2328:	30 40       	sbci	r19, 0x00	; 0
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 2e       	mov	r0, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <DIO_EnuSetPinVal+0x178>
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <DIO_EnuSetPinVal+0x174>
    233a:	80 95       	com	r24
    233c:	84 23       	and	r24, r20
    233e:	8c 93       	st	X, r24

						error = ES_OK ;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	45 c0       	rjmp	.+138    	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin16 and pin23 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	80 31       	cpi	r24, 0x10	; 16
    234a:	e8 f0       	brcs	.+58     	; 0x2386 <DIO_EnuSetPinVal+0x1c8>
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	88 31       	cpi	r24, 0x18	; 24
    2350:	d0 f4       	brcc	.+52     	; 0x2386 <DIO_EnuSetPinVal+0x1c8>

					{
						CLR_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    2352:	a5 e3       	ldi	r26, 0x35	; 53
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e5 e3       	ldi	r30, 0x35	; 53
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	48 2f       	mov	r20, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 01       	movw	r18, r24
    2366:	20 51       	subi	r18, 0x10	; 16
    2368:	30 40       	sbci	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_EnuSetPinVal+0x1b8>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <DIO_EnuSetPinVal+0x1b4>
    237a:	80 95       	com	r24
    237c:	84 23       	and	r24, r20
    237e:	8c 93       	st	X, r24

							error = ES_OK ;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	25 c0       	rjmp	.+74     	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}

				/** If pin number between pin24 and pin31 set this pin as an LOW **/
				else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	88 31       	cpi	r24, 0x18	; 24
    238a:	e8 f0       	brcs	.+58     	; 0x23c6 <DIO_EnuSetPinVal+0x208>
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	80 32       	cpi	r24, 0x20	; 32
    2390:	d0 f4       	brcc	.+52     	; 0x23c6 <DIO_EnuSetPinVal+0x208>

					{
						CLR_BIT(DIO_PORTD , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    2392:	a2 e3       	ldi	r26, 0x32	; 50
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e2 e3       	ldi	r30, 0x32	; 50
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 01       	movw	r18, r24
    23a6:	28 51       	subi	r18, 0x18	; 24
    23a8:	30 40       	sbci	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_EnuSetPinVal+0x1f8>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_EnuSetPinVal+0x1f4>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24

							error = ES_OK ;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <DIO_EnuSetPinVal+0x212>
					}
				else

					{
						error = ES_OUT_OF_RANGE ;
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <DIO_EnuSetPinVal+0x212>
			}


		else
			{
				error = ES_OUT_OF_RANGE ;
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	89 83       	std	Y+1, r24	; 0x01
			}


	return error ;
    23d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <DIO_EnuGetPinVal>:

/*********************************/
/****  Get a value from a pin ****/
/*********************************/
ErrorState DIO_EnuGetPinVal (u8 Copy_U8PinNumber , u32 * Copy_PU8Value)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <DIO_EnuGetPinVal+0x6>
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <DIO_EnuGetPinVal+0x8>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	8a 83       	std	Y+2, r24	; 0x02
    23ec:	7c 83       	std	Y+4, r23	; 0x04
    23ee:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error = ES_NOK ;
    23f0:	19 82       	std	Y+1, r1	; 0x01

	/** If pin number between pin0 and pin7 Get the value on this pin **/
	if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	88 30       	cpi	r24, 0x08	; 8
    23f6:	00 f5       	brcc	.+64     	; 0x2438 <DIO_EnuGetPinVal+0x5a>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINA , ((Copy_U8PinNumber) ) ) ;
    23f8:	e9 e3       	ldi	r30, 0x39	; 57
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a9 01       	movw	r20, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <DIO_EnuGetPinVal+0x32>
    240c:	55 95       	asr	r21
    240e:	47 95       	ror	r20
    2410:	8a 95       	dec	r24
    2412:	e2 f7       	brpl	.-8      	; 0x240c <DIO_EnuGetPinVal+0x2e>
    2414:	ca 01       	movw	r24, r20
    2416:	aa 27       	eor	r26, r26
    2418:	97 fd       	sbrc	r25, 7
    241a:	a0 95       	com	r26
    241c:	ba 2f       	mov	r27, r26
    241e:	81 70       	andi	r24, 0x01	; 1
    2420:	90 70       	andi	r25, 0x00	; 0
    2422:	a0 70       	andi	r26, 0x00	; 0
    2424:	b0 70       	andi	r27, 0x00	; 0
    2426:	eb 81       	ldd	r30, Y+3	; 0x03
    2428:	fc 81       	ldd	r31, Y+4	; 0x04
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	77 c0       	rjmp	.+238    	; 0x2526 <DIO_EnuGetPinVal+0x148>
		}


	/** If pin number between pin8 and pin15 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	88 30       	cpi	r24, 0x08	; 8
    243c:	20 f1       	brcs	.+72     	; 0x2486 <DIO_EnuGetPinVal+0xa8>
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	80 31       	cpi	r24, 0x10	; 16
    2442:	08 f5       	brcc	.+66     	; 0x2486 <DIO_EnuGetPinVal+0xa8>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2444:	e6 e3       	ldi	r30, 0x36	; 54
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	08 97       	sbiw	r24, 0x08	; 8
    2456:	a9 01       	movw	r20, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <DIO_EnuGetPinVal+0x80>
    245a:	55 95       	asr	r21
    245c:	47 95       	ror	r20
    245e:	8a 95       	dec	r24
    2460:	e2 f7       	brpl	.-8      	; 0x245a <DIO_EnuGetPinVal+0x7c>
    2462:	ca 01       	movw	r24, r20
    2464:	aa 27       	eor	r26, r26
    2466:	97 fd       	sbrc	r25, 7
    2468:	a0 95       	com	r26
    246a:	ba 2f       	mov	r27, r26
    246c:	81 70       	andi	r24, 0x01	; 1
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	a0 70       	andi	r26, 0x00	; 0
    2472:	b0 70       	andi	r27, 0x00	; 0
    2474:	eb 81       	ldd	r30, Y+3	; 0x03
    2476:	fc 81       	ldd	r31, Y+4	; 0x04
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	50 c0       	rjmp	.+160    	; 0x2526 <DIO_EnuGetPinVal+0x148>
		}

	/** If pin number between pin16 and pin23 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	80 31       	cpi	r24, 0x10	; 16
    248a:	20 f1       	brcs	.+72     	; 0x24d4 <DIO_EnuGetPinVal+0xf6>
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	88 31       	cpi	r24, 0x18	; 24
    2490:	08 f5       	brcc	.+66     	; 0x24d4 <DIO_EnuGetPinVal+0xf6>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PINC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    2492:	e3 e3       	ldi	r30, 0x33	; 51
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	40 97       	sbiw	r24, 0x10	; 16
    24a4:	a9 01       	movw	r20, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_EnuGetPinVal+0xce>
    24a8:	55 95       	asr	r21
    24aa:	47 95       	ror	r20
    24ac:	8a 95       	dec	r24
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <DIO_EnuGetPinVal+0xca>
    24b0:	ca 01       	movw	r24, r20
    24b2:	aa 27       	eor	r26, r26
    24b4:	97 fd       	sbrc	r25, 7
    24b6:	a0 95       	com	r26
    24b8:	ba 2f       	mov	r27, r26
    24ba:	81 70       	andi	r24, 0x01	; 1
    24bc:	90 70       	andi	r25, 0x00	; 0
    24be:	a0 70       	andi	r26, 0x00	; 0
    24c0:	b0 70       	andi	r27, 0x00	; 0
    24c2:	eb 81       	ldd	r30, Y+3	; 0x03
    24c4:	fc 81       	ldd	r31, Y+4	; 0x04
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	29 c0       	rjmp	.+82     	; 0x2526 <DIO_EnuGetPinVal+0x148>
		}

	/** If pin number between pin24 and pin31 Get the value on this pin **/
	else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	88 31       	cpi	r24, 0x18	; 24
    24d8:	20 f1       	brcs	.+72     	; 0x2522 <DIO_EnuGetPinVal+0x144>
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	80 32       	cpi	r24, 0x20	; 32
    24de:	08 f5       	brcc	.+66     	; 0x2522 <DIO_EnuGetPinVal+0x144>

		{
			* Copy_PU8Value = GET_BIT ( DIO_PIND , ( (Copy_U8PinNumber - DIO_PIN24) ) ) ;
    24e0:	e0 e3       	ldi	r30, 0x30	; 48
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	48 97       	sbiw	r24, 0x18	; 24
    24f2:	a9 01       	movw	r20, r18
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <DIO_EnuGetPinVal+0x11c>
    24f6:	55 95       	asr	r21
    24f8:	47 95       	ror	r20
    24fa:	8a 95       	dec	r24
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <DIO_EnuGetPinVal+0x118>
    24fe:	ca 01       	movw	r24, r20
    2500:	aa 27       	eor	r26, r26
    2502:	97 fd       	sbrc	r25, 7
    2504:	a0 95       	com	r26
    2506:	ba 2f       	mov	r27, r26
    2508:	81 70       	andi	r24, 0x01	; 1
    250a:	90 70       	andi	r25, 0x00	; 0
    250c:	a0 70       	andi	r26, 0x00	; 0
    250e:	b0 70       	andi	r27, 0x00	; 0
    2510:	eb 81       	ldd	r30, Y+3	; 0x03
    2512:	fc 81       	ldd	r31, Y+4	; 0x04
    2514:	80 83       	st	Z, r24
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	a2 83       	std	Z+2, r26	; 0x02
    251a:	b3 83       	std	Z+3, r27	; 0x03

			error = ES_OK ;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <DIO_EnuGetPinVal+0x148>
		}
	else

		{
		error = ES_OUT_OF_RANGE ;
    2522:	83 e0       	ldi	r24, 0x03	; 3
    2524:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <DIO_EnuTogglePin>:

/*****************************/
/****  Toggle a pin Value ****/
/*****************************/
ErrorState DIO_EnuTogglePin(u8 Copy_U8PinNumber)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <DIO_EnuTogglePin+0x6>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    2542:	19 82       	std	Y+1, r1	; 0x01

	/** If pin number between pin0 and pin7 TOGGLE this pin **/
	 if ( ( Copy_U8PinNumber >= DIO_PIN0 )  &&  ( Copy_U8PinNumber <= DIO_PIN7 ) )
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	88 30       	cpi	r24, 0x08	; 8
    2548:	b0 f4       	brcc	.+44     	; 0x2576 <DIO_EnuTogglePin+0x40>

	 	{
	 		TOGGLE_BIT ( DIO_PORTA ,( (Copy_U8PinNumber) ) ) ;
    254a:	ab e3       	ldi	r26, 0x3B	; 59
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	eb e3       	ldi	r30, 0x3B	; 59
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <DIO_EnuTogglePin+0x32>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <DIO_EnuTogglePin+0x2e>
    256c:	84 27       	eor	r24, r20
    256e:	8c 93       	st	X, r24

	 		error = ES_OK ;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	5f c0       	rjmp	.+190    	; 0x2634 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin8 and pin15 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN8 )  &&  ( Copy_U8PinNumber <= DIO_PIN15 ) )
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	88 30       	cpi	r24, 0x08	; 8
    257a:	e0 f0       	brcs	.+56     	; 0x25b4 <DIO_EnuTogglePin+0x7e>
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	80 31       	cpi	r24, 0x10	; 16
    2580:	c8 f4       	brcc	.+50     	; 0x25b4 <DIO_EnuTogglePin+0x7e>

	 	{
		 	TOGGLE_BIT ( DIO_PORTB , ( (Copy_U8PinNumber - DIO_PIN8) ) ) ;
    2582:	a8 e3       	ldi	r26, 0x38	; 56
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e8 e3       	ldi	r30, 0x38	; 56
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9c 01       	movw	r18, r24
    2596:	28 50       	subi	r18, 0x08	; 8
    2598:	30 40       	sbci	r19, 0x00	; 0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	02 2e       	mov	r0, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_EnuTogglePin+0x70>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	0a 94       	dec	r0
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_EnuTogglePin+0x6c>
    25aa:	84 27       	eor	r24, r20
    25ac:	8c 93       	st	X, r24

		 	error = ES_OK ;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	40 c0       	rjmp	.+128    	; 0x2634 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin16 and pin23 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN16 )  &&  ( Copy_U8PinNumber <= DIO_PIN23 ) )
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 31       	cpi	r24, 0x10	; 16
    25b8:	e0 f0       	brcs	.+56     	; 0x25f2 <DIO_EnuTogglePin+0xbc>
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	88 31       	cpi	r24, 0x18	; 24
    25be:	c8 f4       	brcc	.+50     	; 0x25f2 <DIO_EnuTogglePin+0xbc>

	 	{
		 	TOGGLE_BIT ( DIO_PORTC , ( (Copy_U8PinNumber - DIO_PIN16) ) ) ;
    25c0:	a5 e3       	ldi	r26, 0x35	; 53
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e3       	ldi	r30, 0x35	; 53
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9c 01       	movw	r18, r24
    25d4:	20 51       	subi	r18, 0x10	; 16
    25d6:	30 40       	sbci	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_EnuTogglePin+0xae>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_EnuTogglePin+0xaa>
    25e8:	84 27       	eor	r24, r20
    25ea:	8c 93       	st	X, r24

		 	error = ES_OK ;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	21 c0       	rjmp	.+66     	; 0x2634 <DIO_EnuTogglePin+0xfe>
	 	}

	 /** If pin number between pin24 and pin31 TOGGLE this pin **/
	 else if ( ( Copy_U8PinNumber >= DIO_PIN24 )  &&  ( Copy_U8PinNumber <= DIO_PIN31 ) )
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	88 31       	cpi	r24, 0x18	; 24
    25f6:	e0 f0       	brcs	.+56     	; 0x2630 <DIO_EnuTogglePin+0xfa>
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	80 32       	cpi	r24, 0x20	; 32
    25fc:	c8 f4       	brcc	.+50     	; 0x2630 <DIO_EnuTogglePin+0xfa>

	 	{
		 	TOGGLE_BIT (DIO_PORTD , ( (Copy_U8PinNumber) - (DIO_PIN24) ) ) ;
    25fe:	a2 e3       	ldi	r26, 0x32	; 50
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e2 e3       	ldi	r30, 0x32	; 50
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	48 2f       	mov	r20, r24
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 01       	movw	r18, r24
    2612:	28 51       	subi	r18, 0x18	; 24
    2614:	30 40       	sbci	r19, 0x00	; 0
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 2e       	mov	r0, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_EnuTogglePin+0xec>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	0a 94       	dec	r0
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_EnuTogglePin+0xe8>
    2626:	84 27       	eor	r24, r20
    2628:	8c 93       	st	X, r24

		 	error = ES_OK ;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <DIO_EnuTogglePin+0xfe>
	 	}
	 else

	 	{
		 error = ES_OUT_OF_RANGE ;
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	89 83       	std	Y+1, r24	; 0x01
	 	}

	 return error ;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <DIO_EnuSetPortDir>:

/*********************************************/
/********  To set the Port dirction  *********/
/*********************************************/
ErrorState DIO_EnuSetPortDir( u8 Copy_U8PortNum , u8 Copy_U8PortDirectionValue)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <DIO_EnuSetPortDir+0x6>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <DIO_EnuSetPortDir+0x8>
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error=ES_NOK ;
    2652:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8PortNum)
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	3d 83       	std	Y+5, r19	; 0x05
    265c:	2c 83       	std	Y+4, r18	; 0x04
    265e:	8c 81       	ldd	r24, Y+4	; 0x04
    2660:	9d 81       	ldd	r25, Y+5	; 0x05
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	91 05       	cpc	r25, r1
    2666:	e1 f0       	breq	.+56     	; 0x26a0 <DIO_EnuSetPortDir+0x60>
    2668:	2c 81       	ldd	r18, Y+4	; 0x04
    266a:	3d 81       	ldd	r19, Y+5	; 0x05
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	2c f4       	brge	.+10     	; 0x267c <DIO_EnuSetPortDir+0x3c>
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	61 f0       	breq	.+24     	; 0x2692 <DIO_EnuSetPortDir+0x52>
    267a:	27 c0       	rjmp	.+78     	; 0x26ca <DIO_EnuSetPortDir+0x8a>
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	22 30       	cpi	r18, 0x02	; 2
    2682:	31 05       	cpc	r19, r1
    2684:	a1 f0       	breq	.+40     	; 0x26ae <DIO_EnuSetPortDir+0x6e>
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	83 30       	cpi	r24, 0x03	; 3
    268c:	91 05       	cpc	r25, r1
    268e:	b1 f0       	breq	.+44     	; 0x26bc <DIO_EnuSetPortDir+0x7c>
    2690:	1c c0       	rjmp	.+56     	; 0x26ca <DIO_EnuSetPortDir+0x8a>
		{
			case DDRA:  DIO_DDRA = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    2692:	ea e3       	ldi	r30, 0x3A	; 58
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	80 83       	st	Z, r24
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	17 c0       	rjmp	.+46     	; 0x26ce <DIO_EnuSetPortDir+0x8e>
			case DDRB:  DIO_DDRB = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    26a0:	e7 e3       	ldi	r30, 0x37	; 55
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	80 83       	st	Z, r24
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	10 c0       	rjmp	.+32     	; 0x26ce <DIO_EnuSetPortDir+0x8e>
			case DDRC:  DIO_DDRC = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    26ae:	e4 e3       	ldi	r30, 0x34	; 52
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	80 83       	st	Z, r24
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <DIO_EnuSetPortDir+0x8e>
			case DDRD:  DIO_DDRD = Copy_U8PortDirectionValue  ; error=ES_OK ;	break ;
    26bc:	e1 e3       	ldi	r30, 0x31	; 49
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	80 83       	st	Z, r24
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <DIO_EnuSetPortDir+0x8e>
			default  : 	error=ES_OUT_OF_RANGE ;		       	      	   		    break ;
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <DIO_EnuSetPortVal>:

/*********************************************/
/********  To set a value on a port  *********/
/*********************************************/
ErrorState DIO_EnuSetPortVal( u8 Copy_U8PortNum , u8 Copy_U8Value )
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <DIO_EnuSetPortVal+0x6>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <DIO_EnuSetPortVal+0x8>
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	8a 83       	std	Y+2, r24	; 0x02
    26f0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState error=ES_NOK ;
    26f2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_U8PortNum)
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	3d 83       	std	Y+5, r19	; 0x05
    26fc:	2c 83       	std	Y+4, r18	; 0x04
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	91 05       	cpc	r25, r1
    2706:	e1 f0       	breq	.+56     	; 0x2740 <DIO_EnuSetPortVal+0x60>
    2708:	2c 81       	ldd	r18, Y+4	; 0x04
    270a:	3d 81       	ldd	r19, Y+5	; 0x05
    270c:	22 30       	cpi	r18, 0x02	; 2
    270e:	31 05       	cpc	r19, r1
    2710:	2c f4       	brge	.+10     	; 0x271c <DIO_EnuSetPortVal+0x3c>
    2712:	8c 81       	ldd	r24, Y+4	; 0x04
    2714:	9d 81       	ldd	r25, Y+5	; 0x05
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	61 f0       	breq	.+24     	; 0x2732 <DIO_EnuSetPortVal+0x52>
    271a:	27 c0       	rjmp	.+78     	; 0x276a <DIO_EnuSetPortVal+0x8a>
    271c:	2c 81       	ldd	r18, Y+4	; 0x04
    271e:	3d 81       	ldd	r19, Y+5	; 0x05
    2720:	22 30       	cpi	r18, 0x02	; 2
    2722:	31 05       	cpc	r19, r1
    2724:	a1 f0       	breq	.+40     	; 0x274e <DIO_EnuSetPortVal+0x6e>
    2726:	8c 81       	ldd	r24, Y+4	; 0x04
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	83 30       	cpi	r24, 0x03	; 3
    272c:	91 05       	cpc	r25, r1
    272e:	b1 f0       	breq	.+44     	; 0x275c <DIO_EnuSetPortVal+0x7c>
    2730:	1c c0       	rjmp	.+56     	; 0x276a <DIO_EnuSetPortVal+0x8a>
	{
		case PORTA: DIO_PORTA = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    2732:	eb e3       	ldi	r30, 0x3B	; 59
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	80 83       	st	Z, r24
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	17 c0       	rjmp	.+46     	; 0x276e <DIO_EnuSetPortVal+0x8e>
		case PORTB: DIO_PORTB = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    2740:	e8 e3       	ldi	r30, 0x38	; 56
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	80 83       	st	Z, r24
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	10 c0       	rjmp	.+32     	; 0x276e <DIO_EnuSetPortVal+0x8e>
		case PORTC: DIO_PORTC = Copy_U8Value  ;		error=ES_OK ; 	 break ;
    274e:	e5 e3       	ldi	r30, 0x35	; 53
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	80 83       	st	Z, r24
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	09 c0       	rjmp	.+18     	; 0x276e <DIO_EnuSetPortVal+0x8e>
		case PORTD: DIO_PORTD = Copy_U8Value  ; 	error=ES_OK ;	 break ;
    275c:	e2 e3       	ldi	r30, 0x32	; 50
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	80 83       	st	Z, r24
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	02 c0       	rjmp	.+4      	; 0x276e <DIO_EnuSetPortVal+0x8e>
		default : 	error=ES_OUT_OF_RANGE     ;		 		 		 break ;
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	89 83       	std	Y+1, r24	; 0x01
	}

	return error ;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <ADC_EnuInit>:

/*****************************************/
/****  Define AVR_ADC Initialization  ****/
/*****************************************/
ErrorState ADC_EnuInit (void)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
	ErrorState error =ES_NOK ;
    278a:	19 82       	std	Y+1, r1	; 0x01



#elif ADC_PRESCALER == PRESCALER_64

	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    278c:	a6 e2       	ldi	r26, 0x26	; 38
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e6 e2       	ldi	r30, 0x26	; 38
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8e 7f       	andi	r24, 0xFE	; 254
    2798:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    279a:	a6 e2       	ldi	r26, 0x26	; 38
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e6 e2       	ldi	r30, 0x26	; 38
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	82 60       	ori	r24, 0x02	; 2
    27a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    27a8:	a6 e2       	ldi	r26, 0x26	; 38
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e6 e2       	ldi	r30, 0x26	; 38
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	84 60       	ori	r24, 0x04	; 4
    27b4:	8c 93       	st	X, r24
#if ADC_VREF ==INTERNAL_AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_VREF ==EXTERNAL_AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
    27b6:	a7 e2       	ldi	r26, 0x27	; 39
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e7 e2       	ldi	r30, 0x27	; 39
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	80 64       	ori	r24, 0x40	; 64
    27c2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    27c4:	a7 e2       	ldi	r26, 0x27	; 39
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e7 e2       	ldi	r30, 0x27	; 39
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	8f 77       	andi	r24, 0x7F	; 127
    27d0:	8c 93       	st	X, r24

	/******************************************************/
	/****  Define AVR_ADC Result Right or Left Adjust  ****/
	/******************************************************/
#if ADC_ADJ	== RIGHT_ADJ
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    27d2:	a7 e2       	ldi	r26, 0x27	; 39
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e7 e2       	ldi	r30, 0x27	; 39
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	8f 7d       	andi	r24, 0xDF	; 223
    27de:	8c 93       	st	X, r24
#else
#error "Wrong Result Adjust ADC_ADJ "
#endif


	error = ES_OK ;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <ADC_EnuEnable>:

/*************************************/
/****  Define AVR_ADC Turning ON  ****/
/*************************************/
ErrorState ADC_EnuEnable (void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    27f8:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA,ADCSRA_ADEN);
    27fa:	a6 e2       	ldi	r26, 0x26	; 38
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e6 e2       	ldi	r30, 0x26	; 38
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	8c 93       	st	X, r24

	error = ES_OK ;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    280c:	89 81       	ldd	r24, Y+1	; 0x01
}
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <ADC_EnuDisable>:

/**************************************/
/****  Define AVR_ADC Turning OFF  ****/
/**************************************/
ErrorState ADC_EnuDisable (void)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    2820:	19 82       	std	Y+1, r1	; 0x01

	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    2822:	a6 e2       	ldi	r26, 0x26	; 38
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e6 e2       	ldi	r30, 0x26	; 38
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	8f 77       	andi	r24, 0x7F	; 127
    282e:	8c 93       	st	X, r24

	error = ES_OK ;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    2834:	89 81       	ldd	r24, Y+1	; 0x01
}
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <ADC_EnuSelectChannel>:

/********************************************/
/****  Define AVR_ADC Channel Selection  ****/
/********************************************/
ErrorState ADC_EnuSelectChannel (u8 Copy_u8Channel)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <ADC_EnuSelectChannel+0x6>
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    284a:	19 82       	std	Y+1, r1	; 0x01

	/* Initialize Channel with 0 , All Channels are Deactivated */
	ADMUX = ADMUX & ADMUX_MUX_BITS ;
    284c:	a7 e2       	ldi	r26, 0x27	; 39
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e7 e2       	ldi	r30, 0x27	; 39
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 7e       	andi	r24, 0xE0	; 224
    2858:	8c 93       	st	X, r24

	if ( ( Copy_u8Channel >= CHANNEL0 ) && ( Copy_u8Channel <=CHANNEL7 ) )
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	88 30       	cpi	r24, 0x08	; 8
    285e:	58 f4       	brcc	.+22     	; 0x2876 <ADC_EnuSelectChannel+0x38>
	{
		ADMUX = ADMUX | Copy_u8Channel;
    2860:	a7 e2       	ldi	r26, 0x27	; 39
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e7 e2       	ldi	r30, 0x27	; 39
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	90 81       	ld	r25, Z
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	89 2b       	or	r24, r25
    286e:	8c 93       	st	X, r24

		error = ES_OK ;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	0b c0       	rjmp	.+22     	; 0x288c <ADC_EnuSelectChannel+0x4e>
	}
	else if ( ( Copy_u8Channel >= CHANNEL8 ) && ( Copy_u8Channel <=CHANNEL31 ) )
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	88 30       	cpi	r24, 0x08	; 8
    287a:	30 f0       	brcs	.+12     	; 0x2888 <ADC_EnuSelectChannel+0x4a>
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	80 32       	cpi	r24, 0x20	; 32
    2880:	18 f4       	brcc	.+6      	; 0x2888 <ADC_EnuSelectChannel+0x4a>
	{
		error = ES_OUT_OF_RANGE ;
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	02 c0       	rjmp	.+4      	; 0x288c <ADC_EnuSelectChannel+0x4e>
	}
	else
	{
		error = ES_OUT_OF_RANGE ;
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	89 83       	std	Y+1, r24	; 0x01
	}

	return error ;
    288c:	89 81       	ldd	r24, Y+1	; 0x01

}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <ADC_EnuStartConversion>:

/*******************************************/
/****  Define AVR_ADC Start Conversion  ****/
/*******************************************/
ErrorState ADC_EnuStartConversion (void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    28a2:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT ( ADCSRA , ADCSRA_ADSC );
    28a4:	a6 e2       	ldi	r26, 0x26	; 38
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e6 e2       	ldi	r30, 0x26	; 38
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 64       	ori	r24, 0x40	; 64
    28b0:	8c 93       	st	X, r24

	error = ES_OK ;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b8:	0f 90       	pop	r0
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <ADC_EnuAutoTriggering>:

/******************************************/
/****  Define AVR_ADC Auto Triggering  ****/
/******************************************/
ErrorState ADC_EnuAutoTriggering (u8 Copy_u8Status)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <ADC_EnuAutoTriggering+0x6>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <ADC_EnuAutoTriggering+0x8>
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    28ce:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Status)
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	3c 83       	std	Y+4, r19	; 0x04
    28d8:	2b 83       	std	Y+3, r18	; 0x03
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	79 f0       	breq	.+30     	; 0x2900 <ADC_EnuAutoTriggering+0x40>
    28e2:	2b 81       	ldd	r18, Y+3	; 0x03
    28e4:	3c 81       	ldd	r19, Y+4	; 0x04
    28e6:	21 30       	cpi	r18, 0x01	; 1
    28e8:	31 05       	cpc	r19, r1
    28ea:	99 f4       	brne	.+38     	; 0x2912 <ADC_EnuAutoTriggering+0x52>
		{
			case AUTO_TRIGGER  : 	SET_BIT ( ADCSRA , ADCSRA_ADATE ); 	error = ES_OK ;	break;
    28ec:	a6 e2       	ldi	r26, 0x26	; 38
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e6 e2       	ldi	r30, 0x26	; 38
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	80 62       	ori	r24, 0x20	; 32
    28f8:	8c 93       	st	X, r24
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <ADC_EnuAutoTriggering+0x52>

			case !AUTO_TRIGGER	: 	CLR_BIT ( ADCSRA , ADCSRA_ADATE );  error = ES_OK ;	break   ;
    2900:	a6 e2       	ldi	r26, 0x26	; 38
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e6 e2       	ldi	r30, 0x26	; 38
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8f 7d       	andi	r24, 0xDF	; 223
    290c:	8c 93       	st	X, r24
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	89 83       	std	Y+1, r24	; 0x01
		}

	return error ;
    2912:	89 81       	ldd	r24, Y+1	; 0x01
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <ADC_EnuEnableInterrupt>:

/*******************************************/
/****  Define AVR_ADC Interrupt Enable  ****/
/*******************************************/
ErrorState ADC_EnuEnableInterrupt (void)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	0f 92       	push	r0
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    292c:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT ( ADCSRA , ADCSRA_ADIE );
    292e:	a6 e2       	ldi	r26, 0x26	; 38
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e6 e2       	ldi	r30, 0x26	; 38
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	88 60       	ori	r24, 0x08	; 8
    293a:	8c 93       	st	X, r24

	error = ES_OK ;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    2940:	89 81       	ldd	r24, Y+1	; 0x01
}
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <ADC_EnuDisableInterrupt>:

/********************************************/
/****  Define AVR_ADC Interrupt Disable  ****/
/********************************************/
ErrorState ADC_EnuDisableInterrupt (void)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	0f 92       	push	r0
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    2954:	19 82       	std	Y+1, r1	; 0x01

	CLR_BIT ( ADCSRA , ADCSRA_ADIE );
    2956:	a6 e2       	ldi	r26, 0x26	; 38
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e6 e2       	ldi	r30, 0x26	; 38
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	87 7f       	andi	r24, 0xF7	; 247
    2962:	8c 93       	st	X, r24

	error = ES_OK ;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
}
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <ADC_EnuPolling>:

/***********************************************/
/****  Define AVR_ADC Flag (ADIF) Checking  ****/
/***********************************************/
ErrorState ADC_EnuPolling (void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    297c:	19 82       	std	Y+1, r1	; 0x01

	ADC=0;
    297e:	e4 e2       	ldi	r30, 0x24	; 36
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	11 82       	std	Z+1, r1	; 0x01
    2984:	10 82       	st	Z, r1

	while ( ! GET_BIT ( ADCSRA,ADCSRA_ADIF ) );
    2986:	e6 e2       	ldi	r30, 0x26	; 38
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	82 95       	swap	r24
    298e:	8f 70       	andi	r24, 0x0F	; 15
    2990:	88 23       	and	r24, r24
    2992:	c9 f3       	breq	.-14     	; 0x2986 <ADC_EnuPolling+0x14>

	/* Set the ADC flag To zero Manually */
	SET_BIT ( ADCSRA , ADCSRA_ADIF );
    2994:	a6 e2       	ldi	r26, 0x26	; 38
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e6 e2       	ldi	r30, 0x26	; 38
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	80 61       	ori	r24, 0x10	; 16
    29a0:	8c 93       	st	X, r24

	error = ES_OK ;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <ADC_EnuRead>:

/****************************************/
/****  Define AVR_ADC Value Reading  ****/
/****************************************/
ErrorState ADC_EnuRead (u16 * Copy_PU16Value)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <ADC_EnuRead+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9b 83       	std	Y+3, r25	; 0x03
    29be:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState error = ES_NOK ;
    29c0:	19 82       	std	Y+1, r1	; 0x01

	*Copy_PU16Value = ADC;
    29c2:	e4 e2       	ldi	r30, 0x24	; 36
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	ea 81       	ldd	r30, Y+2	; 0x02
    29cc:	fb 81       	ldd	r31, Y+3	; 0x03
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24

	error = ES_OK ;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	89 83       	std	Y+1, r24	; 0x01

	return error ;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <KEYPAD_VidInit>:

/***************************************************/
/*************** Keypad Initialization *************/
/***************************************************/
ErrorState KEYPAD_VidInit (void)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	0f 92       	push	r0
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	ErrorState error = ES_NOK ;
    29ee:	19 82       	std	Y+1, r1	; 0x01

	/*  Input Pins */
	DIO_EnuSetPinDir( KEY_R1 , INPUT ) ;
    29f0:	84 e0       	ldi	r24, 0x04	; 4
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R2 , INPUT ) ;
    29f8:	85 e0       	ldi	r24, 0x05	; 5
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R3 , INPUT ) ;
    2a00:	86 e0       	ldi	r24, 0x06	; 6
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_R4 , INPUT ) ;
    2a08:	87 e0       	ldi	r24, 0x07	; 7
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>

	/*  Output Pins */
	DIO_EnuSetPinDir( KEY_C1 , OUTPUT ) ;
    2a10:	8c e0       	ldi	r24, 0x0C	; 12
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C2 , OUTPUT ) ;
    2a18:	8d e0       	ldi	r24, 0x0D	; 13
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C3 , OUTPUT ) ;
    2a20:	8e e0       	ldi	r24, 0x0E	; 14
    2a22:	61 e0       	ldi	r22, 0x01	; 1
    2a24:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
	DIO_EnuSetPinDir( KEY_C4 , OUTPUT ) ;
    2a28:	8f e0       	ldi	r24, 0x0F	; 15
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>


	/*  Latch the Pull Up Resistor */
	DIO_EnuSetPinVal( KEY_R1 , HIGH ) ;
    2a30:	84 e0       	ldi	r24, 0x04	; 4
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R2 , HIGH ) ;
    2a38:	85 e0       	ldi	r24, 0x05	; 5
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R3 , HIGH ) ;
    2a40:	86 e0       	ldi	r24, 0x06	; 6
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	DIO_EnuSetPinVal( KEY_R4 , HIGH ) ;
    2a48:	87 e0       	ldi	r24, 0x07	; 7
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
	
	error = ES_OK ;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	89 83       	std	Y+1, r24	; 0x01
	
	return error ;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <KEYPAD_U8GetKey>:
u8 KEYPAD_U8Numbers[4][4]= KEYPAD_U8DATA ;



ErrorState KEYPAD_U8GetKey (u8 * Copy_PU8PressedKey)
{	
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	2a 97       	sbiw	r28, 0x0a	; 10
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	9a 87       	std	Y+10, r25	; 0x0a
    2a74:	89 87       	std	Y+9, r24	; 0x09
	ErrorState error = ES_NOK ;
    2a76:	1c 82       	std	Y+4, r1	; 0x04

	u32 Local_U8ButtonStatus=HIGH ;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	af 83       	std	Y+7, r26	; 0x07
    2a86:	b8 87       	std	Y+8, r27	; 0x08
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
    2a88:	1b 82       	std	Y+3, r1	; 0x03
    2a8a:	67 c0       	rjmp	.+206    	; 0x2b5a <KEYPAD_U8GetKey+0xfc>
	{
		DIO_EnuSetPinVal ( KEY_U8Columns[U8_ColCounter] , LOW ) ;
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	fc 01       	movw	r30, r24
    2a94:	ed 51       	subi	r30, 0x1D	; 29
    2a96:	fe 4f       	sbci	r31, 0xFE	; 254
    2a98:	80 81       	ld	r24, Z
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
    2aa0:	1a 82       	std	Y+2, r1	; 0x02
    2aa2:	4a c0       	rjmp	.+148    	; 0x2b38 <KEYPAD_U8GetKey+0xda>
		{

			/* Get the pin value twice or more with delay for noise canceling and also bouncing effect */
			for(u8 Local_U8I=0 ; Local_U8I < 3 ; Local_U8I++ )
    2aa4:	19 82       	std	Y+1, r1	; 0x01
    2aa6:	10 c0       	rjmp	.+32     	; 0x2ac8 <KEYPAD_U8GetKey+0x6a>
			{
				DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	fc 01       	movw	r30, r24
    2ab0:	e1 52       	subi	r30, 0x21	; 33
    2ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab4:	80 81       	ld	r24, Z
    2ab6:	9e 01       	movw	r18, r28
    2ab8:	2b 5f       	subi	r18, 0xFB	; 251
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	b9 01       	movw	r22, r18
    2abe:	0e 94 ef 11 	call	0x23de	; 0x23de <DIO_EnuGetPinVal>
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
		{

			/* Get the pin value twice or more with delay for noise canceling and also bouncing effect */
			for(u8 Local_U8I=0 ; Local_U8I < 3 ; Local_U8I++ )
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	83 30       	cpi	r24, 0x03	; 3
    2acc:	68 f3       	brcs	.-38     	; 0x2aa8 <KEYPAD_U8GetKey+0x4a>
			{
				DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;
				//_delay_ms(1) ;
			}

			if (!Local_U8ButtonStatus )
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	af 81       	ldd	r26, Y+7	; 0x07
    2ad4:	b8 85       	ldd	r27, Y+8	; 0x08
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	a1 05       	cpc	r26, r1
    2ada:	b1 05       	cpc	r27, r1
    2adc:	51 f5       	brne	.+84     	; 0x2b32 <KEYPAD_U8GetKey+0xd4>
    2ade:	0d c0       	rjmp	.+26     	; 0x2afa <KEYPAD_U8GetKey+0x9c>
				
			{
				/* Polling on the button status until relief hand */
				while (!Local_U8ButtonStatus) 	{	DIO_EnuGetPinVal( KEY_U8Rows[U8_RowCounter], &Local_U8ButtonStatus ) ;	   }
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e1 52       	subi	r30, 0x21	; 33
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	80 81       	ld	r24, Z
    2aee:	9e 01       	movw	r18, r28
    2af0:	2b 5f       	subi	r18, 0xFB	; 251
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	b9 01       	movw	r22, r18
    2af6:	0e 94 ef 11 	call	0x23de	; 0x23de <DIO_EnuGetPinVal>
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	af 81       	ldd	r26, Y+7	; 0x07
    2b00:	b8 85       	ldd	r27, Y+8	; 0x08
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	a1 05       	cpc	r26, r1
    2b06:	b1 05       	cpc	r27, r1
    2b08:	59 f3       	breq	.-42     	; 0x2ae0 <KEYPAD_U8GetKey+0x82>

				* Copy_PU8PressedKey = KEYPAD_U8Numbers[U8_RowCounter][U8_ColCounter] ;
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	ca 01       	movw	r24, r20
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	82 0f       	add	r24, r18
    2b22:	93 1f       	adc	r25, r19
    2b24:	fc 01       	movw	r30, r24
    2b26:	e9 51       	subi	r30, 0x19	; 25
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	80 81       	ld	r24, Z
    2b2c:	e9 85       	ldd	r30, Y+9	; 0x09
    2b2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b30:	80 83       	st	Z, r24
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
	{
		DIO_EnuSetPinVal ( KEY_U8Columns[U8_ColCounter] , LOW ) ;
		
		for (u8 U8_RowCounter=0 ; U8_RowCounter < KEY_PAD_ROWS ; U8_RowCounter++)
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	08 f4       	brcc	.+2      	; 0x2b40 <KEYPAD_U8GetKey+0xe2>
    2b3e:	b2 cf       	rjmp	.-156    	; 0x2aa4 <KEYPAD_U8GetKey+0x46>

				* Copy_PU8PressedKey = KEYPAD_U8Numbers[U8_RowCounter][U8_ColCounter] ;
			}
		}

		DIO_EnuSetPinVal( KEY_U8Columns[U8_ColCounter] , HIGH ) ;
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	fc 01       	movw	r30, r24
    2b48:	ed 51       	subi	r30, 0x1D	; 29
    2b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4c:	80 81       	ld	r24, Z
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
{	
	ErrorState error = ES_NOK ;

	u32 Local_U8ButtonStatus=HIGH ;
	
	for (u8 U8_ColCounter=0 ; U8_ColCounter < KEY_PAD_COLUMNS ; U8_ColCounter++)
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	84 30       	cpi	r24, 0x04	; 4
    2b5e:	08 f4       	brcc	.+2      	; 0x2b62 <KEYPAD_U8GetKey+0x104>
    2b60:	95 cf       	rjmp	.-214    	; 0x2a8c <KEYPAD_U8GetKey+0x2e>
		}

		DIO_EnuSetPinVal( KEY_U8Columns[U8_ColCounter] , HIGH ) ;
	}
	
	error = ES_OK ;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	8c 83       	std	Y+4, r24	; 0x04

	return error ;
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2b68:	2a 96       	adiw	r28, 0x0a	; 10
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <main>:




int main(void)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	e2 97       	sbiw	r28, 0x32	; 50
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61

KEYPAD_VidInit() ;
    2b8e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <KEYPAD_VidInit>
LCD_VidInit() ;
    2b92:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_VidInit>

ADC_EnuInit() ;
    2b96:	0e 94 c0 13 	call	0x2780	; 0x2780 <ADC_EnuInit>
ADC_EnuEnable() ;
    2b9a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <ADC_EnuEnable>
ADC_EnuAutoTriggering(1) ;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	0e 94 60 14 	call	0x28c0	; 0x28c0 <ADC_EnuAutoTriggering>
ADC_EnuSelectChannel(PIN0) ;
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0e 94 1f 14 	call	0x283e	; 0x283e <ADC_EnuSelectChannel>


TIM0_VidInit() ;
    2baa:	0e 94 6b 07 	call	0xed6	; 0xed6 <TIM0_VidInit>
TIM2_VidInit() ;
    2bae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TIM2_VidInit>


// FAN Control
DIO_EnuSetPinDir(PIN0,INPUT) ;
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>

// FAN
DIO_EnuSetPinDir(PIN11,OUTPUT) ;
    2bba:	8b e0       	ldi	r24, 0x0B	; 11
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
DIO_EnuSetPinVal(PIN11,LOW) ;
    2bc2:	8b e0       	ldi	r24, 0x0B	; 11
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
// LIGHT
DIO_EnuSetPinDir(PIN31,OUTPUT) ;
    2bca:	8f e1       	ldi	r24, 0x1F	; 31
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>
DIO_EnuSetPinVal(PIN31,LOW) ;
    2bd2:	8f e1       	ldi	r24, 0x1F	; 31
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>

// BUZZER
DIO_EnuSetPinDir(PIN30,OUTPUT) ;
    2bda:	8e e1       	ldi	r24, 0x1E	; 30
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <DIO_EnuSetPinDir>


u8 char_num=0 ;u8 k=0 ;
    2be2:	1e a6       	std	Y+46, r1	; 0x2e
    2be4:	1d a6       	std	Y+45, r1	; 0x2d
while(1)
{

	LCD_VidSetPosition(0,0) ;
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
	LCD_VidWriteString("Enter Username :") ;
    2bee:	80 e6       	ldi	r24, 0x60	; 96
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>

	key=Not_Pressed;
    2bf6:	10 92 1c 02 	sts	0x021C, r1
	KEYPAD_U8GetKey(&key) ;
    2bfa:	8c e1       	ldi	r24, 0x1C	; 28
    2bfc:	92 e0       	ldi	r25, 0x02	; 2
    2bfe:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <KEYPAD_U8GetKey>
	if (key==Not_Pressed) { continue ; }
    2c02:	80 91 1c 02 	lds	r24, 0x021C
    2c06:	88 23       	and	r24, r24
    2c08:	71 f3       	breq	.-36     	; 0x2be6 <main+0x6c>

	else
	{

	   if( (key>='0' && key <='9') || (key=='+') || (key=='-')  || (key=='/')|| (key=='*') )
    2c0a:	80 91 1c 02 	lds	r24, 0x021C
    2c0e:	80 33       	cpi	r24, 0x30	; 48
    2c10:	20 f0       	brcs	.+8      	; 0x2c1a <main+0xa0>
    2c12:	80 91 1c 02 	lds	r24, 0x021C
    2c16:	8a 33       	cpi	r24, 0x3A	; 58
    2c18:	80 f0       	brcs	.+32     	; 0x2c3a <main+0xc0>
    2c1a:	80 91 1c 02 	lds	r24, 0x021C
    2c1e:	8b 32       	cpi	r24, 0x2B	; 43
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <main+0xc0>
    2c22:	80 91 1c 02 	lds	r24, 0x021C
    2c26:	8d 32       	cpi	r24, 0x2D	; 45
    2c28:	41 f0       	breq	.+16     	; 0x2c3a <main+0xc0>
    2c2a:	80 91 1c 02 	lds	r24, 0x021C
    2c2e:	8f 32       	cpi	r24, 0x2F	; 47
    2c30:	21 f0       	breq	.+8      	; 0x2c3a <main+0xc0>
    2c32:	80 91 1c 02 	lds	r24, 0x021C
    2c36:	8a 32       	cpi	r24, 0x2A	; 42
    2c38:	d1 f4       	brne	.+52     	; 0x2c6e <main+0xf4>
	   	{   LCD_VidSetPosition(1,2+k) ;
    2c3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c3c:	98 2f       	mov	r25, r24
    2c3e:	9e 5f       	subi	r25, 0xFE	; 254
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	69 2f       	mov	r22, r25
    2c44:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
	   		user[char_num]=key ;
    2c48:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	20 91 1c 02 	lds	r18, 0x021C
    2c52:	fc 01       	movw	r30, r24
    2c54:	e0 5f       	subi	r30, 0xF0	; 240
    2c56:	fd 4f       	sbci	r31, 0xFD	; 253
    2c58:	20 83       	st	Z, r18
	   		LCD_VidSendData(key) ;
    2c5a:	80 91 1c 02 	lds	r24, 0x021C
    2c5e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>
	   		char_num++;
    2c62:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	8e a7       	std	Y+46, r24	; 0x2e
	   		k++ ;
    2c68:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c6a:	8f 5f       	subi	r24, 0xFF	; 255
    2c6c:	8d a7       	std	Y+45, r24	; 0x2d
	   	}

		if (key=='E')
    2c6e:	80 91 1c 02 	lds	r24, 0x021C
    2c72:	85 34       	cpi	r24, 0x45	; 69
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <main+0xfe>
    2c76:	8f c2       	rjmp	.+1310   	; 0x3196 <main+0x61c>
		{
			if (name_check(user) )
    2c78:	80 e1       	ldi	r24, 0x10	; 16
    2c7a:	92 e0       	ldi	r25, 0x02	; 2
    2c7c:	0e 94 23 19 	call	0x3246	; 0x3246 <name_check>
    2c80:	88 23       	and	r24, r24
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <main+0x10c>
    2c84:	04 c2       	rjmp	.+1032   	; 0x308e <main+0x514>
			{
				free_name(user) ;
    2c86:	80 e1       	ldi	r24, 0x10	; 16
    2c88:	92 e0       	ldi	r25, 0x02	; 2
    2c8a:	0e 94 04 19 	call	0x3208	; 0x3208 <free_name>
				k=0 ;
    2c8e:	1d a6       	std	Y+45, r1	; 0x2d
				char_num=0 ;
    2c90:	1e a6       	std	Y+46, r1	; 0x2e
				LCD_VidSendCommand(0x01) ;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
    2c98:	f4 c1       	rjmp	.+1000   	; 0x3082 <main+0x508>

				while(trials!=0)
				{
					u8 return_key=0 ;
    2c9a:	1c a6       	std	Y+44, r1	; 0x2c
					LCD_VidSetPosition(0,0) ;
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
					LCD_VidWriteString("Enter Password") ;
    2ca4:	81 e7       	ldi	r24, 0x71	; 113
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>

					key=Not_Pressed;
    2cac:	10 92 1c 02 	sts	0x021C, r1
					KEYPAD_U8GetKey(&key) ;
    2cb0:	8c e1       	ldi	r24, 0x1C	; 28
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <KEYPAD_U8GetKey>

					if( (key>='0' && key <='9') || (key=='+') || (key=='-') || (key=='/')|| (key=='*'))
    2cb8:	80 91 1c 02 	lds	r24, 0x021C
    2cbc:	80 33       	cpi	r24, 0x30	; 48
    2cbe:	20 f0       	brcs	.+8      	; 0x2cc8 <main+0x14e>
    2cc0:	80 91 1c 02 	lds	r24, 0x021C
    2cc4:	8a 33       	cpi	r24, 0x3A	; 58
    2cc6:	80 f0       	brcs	.+32     	; 0x2ce8 <main+0x16e>
    2cc8:	80 91 1c 02 	lds	r24, 0x021C
    2ccc:	8b 32       	cpi	r24, 0x2B	; 43
    2cce:	61 f0       	breq	.+24     	; 0x2ce8 <main+0x16e>
    2cd0:	80 91 1c 02 	lds	r24, 0x021C
    2cd4:	8d 32       	cpi	r24, 0x2D	; 45
    2cd6:	41 f0       	breq	.+16     	; 0x2ce8 <main+0x16e>
    2cd8:	80 91 1c 02 	lds	r24, 0x021C
    2cdc:	8f 32       	cpi	r24, 0x2F	; 47
    2cde:	21 f0       	breq	.+8      	; 0x2ce8 <main+0x16e>
    2ce0:	80 91 1c 02 	lds	r24, 0x021C
    2ce4:	8a 32       	cpi	r24, 0x2A	; 42
    2ce6:	c9 f4       	brne	.+50     	; 0x2d1a <main+0x1a0>
						   	{   LCD_VidSetPosition(1,2+k) ;
    2ce8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cea:	98 2f       	mov	r25, r24
    2cec:	9e 5f       	subi	r25, 0xFE	; 254
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	69 2f       	mov	r22, r25
    2cf2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
						   		pass[char_num]=key ;
    2cf6:	8e a5       	ldd	r24, Y+46	; 0x2e
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	20 91 1c 02 	lds	r18, 0x021C
    2d00:	fc 01       	movw	r30, r24
    2d02:	ea 5e       	subi	r30, 0xEA	; 234
    2d04:	fd 4f       	sbci	r31, 0xFD	; 253
    2d06:	20 83       	st	Z, r18
						   		LCD_VidSendData('*') ;
    2d08:	8a e2       	ldi	r24, 0x2A	; 42
    2d0a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>
						   		char_num++;
    2d0e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2d10:	8f 5f       	subi	r24, 0xFF	; 255
    2d12:	8e a7       	std	Y+46, r24	; 0x2e
						   		k++ ;
    2d14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	8d a7       	std	Y+45, r24	; 0x2d
						   	}

					if (key=='E')
    2d1a:	80 91 1c 02 	lds	r24, 0x021C
    2d1e:	85 34       	cpi	r24, 0x45	; 69
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <main+0x1aa>
    2d22:	8a c1       	rjmp	.+788    	; 0x3038 <main+0x4be>
							{
								if(pass_check(pass))
    2d24:	86 e1       	ldi	r24, 0x16	; 22
    2d26:	92 e0       	ldi	r25, 0x02	; 2
    2d28:	0e 94 58 19 	call	0x32b0	; 0x32b0 <pass_check>
    2d2c:	88 23       	and	r24, r24
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <main+0x1b8>
    2d30:	7c c0       	rjmp	.+248    	; 0x2e2a <main+0x2b0>
									{
										free_name(pass) ;
    2d32:	86 e1       	ldi	r24, 0x16	; 22
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	0e 94 04 19 	call	0x3208	; 0x3208 <free_name>
										LCD_VidSendCommand(0x01) ;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
										u16 fan_pos = 0 ;
    2d40:	18 aa       	std	Y+48, r1	; 0x30
    2d42:	1f a6       	std	Y+47, r1	; 0x2f
										u8 light_inten = 0 ;
    2d44:	1b a6       	std	Y+43, r1	; 0x2b

										while(1)
										{

											LCD_VidSetPosition(0,0) ;
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
											LCD_VidWriteString("Light  0,+,-") ;
    2d4e:	80 e8       	ldi	r24, 0x80	; 128
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
											LCD_VidSetPosition(1,0) ;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
											LCD_VidWriteString("Fan    Pot") ;
    2d5e:	8d e8       	ldi	r24, 0x8D	; 141
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
											key=Not_Pressed;
    2d66:	10 92 1c 02 	sts	0x021C, r1
											KEYPAD_U8GetKey(&key) ;
    2d6a:	8c e1       	ldi	r24, 0x1C	; 28
    2d6c:	92 e0       	ldi	r25, 0x02	; 2
    2d6e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <KEYPAD_U8GetKey>
											return_key=0 ;
    2d72:	1c a6       	std	Y+44, r1	; 0x2c

											ADC_EnuStartConversion() ;
    2d74:	0e 94 4c 14 	call	0x2898	; 0x2898 <ADC_EnuStartConversion>
											ADC_EnuPolling() ;
    2d78:	0e 94 b9 14 	call	0x2972	; 0x2972 <ADC_EnuPolling>
											ADC_EnuRead(&fan_pos) ;
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	8f 96       	adiw	r24, 0x2f	; 47
    2d80:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <ADC_EnuRead>

											fan_pos=(fan_pos*100)/1023 ;
    2d84:	2f a5       	ldd	r18, Y+47	; 0x2f
    2d86:	38 a9       	ldd	r19, Y+48	; 0x30
    2d88:	84 e6       	ldi	r24, 0x64	; 100
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	ac 01       	movw	r20, r24
    2d8e:	24 9f       	mul	r18, r20
    2d90:	c0 01       	movw	r24, r0
    2d92:	25 9f       	mul	r18, r21
    2d94:	90 0d       	add	r25, r0
    2d96:	34 9f       	mul	r19, r20
    2d98:	90 0d       	add	r25, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	2f ef       	ldi	r18, 0xFF	; 255
    2d9e:	33 e0       	ldi	r19, 0x03	; 3
    2da0:	b9 01       	movw	r22, r18
    2da2:	0e 94 ac 19 	call	0x3358	; 0x3358 <__udivmodhi4>
    2da6:	cb 01       	movw	r24, r22
    2da8:	98 ab       	std	Y+48, r25	; 0x30
    2daa:	8f a7       	std	Y+47, r24	; 0x2f
											PWM0_SetDutyCycle(fan_pos) ;
    2dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dae:	98 a9       	ldd	r25, Y+48	; 0x30
    2db0:	0e 94 45 08 	call	0x108a	; 0x108a <PWM0_SetDutyCycle>

											switch(key)
    2db4:	80 91 1c 02 	lds	r24, 0x021C
    2db8:	28 2f       	mov	r18, r24
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	3a ab       	std	Y+50, r19	; 0x32
    2dbe:	29 ab       	std	Y+49, r18	; 0x31
    2dc0:	49 a9       	ldd	r20, Y+49	; 0x31
    2dc2:	5a a9       	ldd	r21, Y+50	; 0x32
    2dc4:	40 33       	cpi	r20, 0x30	; 48
    2dc6:	51 05       	cpc	r21, r1
    2dc8:	b1 f0       	breq	.+44     	; 0x2df6 <main+0x27c>
    2dca:	89 a9       	ldd	r24, Y+49	; 0x31
    2dcc:	9a a9       	ldd	r25, Y+50	; 0x32
    2dce:	81 33       	cpi	r24, 0x31	; 49
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	5c f4       	brge	.+22     	; 0x2dea <main+0x270>
    2dd4:	29 a9       	ldd	r18, Y+49	; 0x31
    2dd6:	3a a9       	ldd	r19, Y+50	; 0x32
    2dd8:	2b 32       	cpi	r18, 0x2B	; 43
    2dda:	31 05       	cpc	r19, r1
    2ddc:	89 f0       	breq	.+34     	; 0x2e00 <main+0x286>
    2dde:	49 a9       	ldd	r20, Y+49	; 0x31
    2de0:	5a a9       	ldd	r21, Y+50	; 0x32
    2de2:	4d 32       	cpi	r20, 0x2D	; 45
    2de4:	51 05       	cpc	r21, r1
    2de6:	99 f0       	breq	.+38     	; 0x2e0e <main+0x294>
    2de8:	1b c0       	rjmp	.+54     	; 0x2e20 <main+0x2a6>
    2dea:	89 a9       	ldd	r24, Y+49	; 0x31
    2dec:	9a a9       	ldd	r25, Y+50	; 0x32
    2dee:	83 34       	cpi	r24, 0x43	; 67
    2df0:	91 05       	cpc	r25, r1
    2df2:	a1 f0       	breq	.+40     	; 0x2e1c <main+0x2a2>
    2df4:	15 c0       	rjmp	.+42     	; 0x2e20 <main+0x2a6>
											{
											case '0' :	PWM2_SetDutyCycle(0);light_inten=0 ; 	break ;
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	0e 94 45 07 	call	0xe8a	; 0xe8a <PWM2_SetDutyCycle>
    2dfc:	1b a6       	std	Y+43, r1	; 0x2b
    2dfe:	10 c0       	rjmp	.+32     	; 0x2e20 <main+0x2a6>
											case '+' :	PWM2_SetDutyCycle(light_inten+=10) ;	break ;
    2e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e02:	86 5f       	subi	r24, 0xF6	; 246
    2e04:	8b a7       	std	Y+43, r24	; 0x2b
    2e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e08:	0e 94 45 07 	call	0xe8a	; 0xe8a <PWM2_SetDutyCycle>
    2e0c:	09 c0       	rjmp	.+18     	; 0x2e20 <main+0x2a6>
											case '-' :	PWM2_SetDutyCycle(light_inten-=10) ;	break ;
    2e0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e10:	8a 50       	subi	r24, 0x0A	; 10
    2e12:	8b a7       	std	Y+43, r24	; 0x2b
    2e14:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e16:	0e 94 45 07 	call	0xe8a	; 0xe8a <PWM2_SetDutyCycle>
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <main+0x2a6>
											case 'C' :	return_key=1	;				        break ;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	8c a7       	std	Y+44, r24	; 0x2c
											default :break ;
											}

											if(return_key) {break ;}
    2e20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e22:	88 23       	and	r24, r24
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <main+0x2ae>
    2e26:	26 c1       	rjmp	.+588    	; 0x3074 <main+0x4fa>
    2e28:	8e cf       	rjmp	.-228    	; 0x2d46 <main+0x1cc>

										}
									}
								else
									{
										free_name(pass) ;
    2e2a:	86 e1       	ldi	r24, 0x16	; 22
    2e2c:	92 e0       	ldi	r25, 0x02	; 2
    2e2e:	0e 94 04 19 	call	0x3208	; 0x3208 <free_name>
										k=0;
    2e32:	1d a6       	std	Y+45, r1	; 0x2d
										char_num=0;
    2e34:	1e a6       	std	Y+46, r1	; 0x2e
										LCD_VidSendCommand(0x01) ;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
										LCD_VidSetPosition(0,0) ;
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
										LCD_VidWriteString("Wrong Password") ;
    2e44:	88 e9       	ldi	r24, 0x98	; 152
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a8 e4       	ldi	r26, 0x48	; 72
    2e52:	b3 e4       	ldi	r27, 0x43	; 67
    2e54:	8f a3       	std	Y+39, r24	; 0x27
    2e56:	98 a7       	std	Y+40, r25	; 0x28
    2e58:	a9 a7       	std	Y+41, r26	; 0x29
    2e5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e60:	89 a5       	ldd	r24, Y+41	; 0x29
    2e62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a ef       	ldi	r20, 0xFA	; 250
    2e6a:	54 e4       	ldi	r21, 0x44	; 68
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8b a3       	std	Y+35, r24	; 0x23
    2e76:	9c a3       	std	Y+36, r25	; 0x24
    2e78:	ad a3       	std	Y+37, r26	; 0x25
    2e7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e80:	8d a1       	ldd	r24, Y+37	; 0x25
    2e82:	9e a1       	ldd	r25, Y+38	; 0x26
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <main+0x324>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9a a3       	std	Y+34, r25	; 0x22
    2e9a:	89 a3       	std	Y+33, r24	; 0x21
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <main+0x3a2>
	else if (__tmp > 65535)
    2e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <main+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eba:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9a a3       	std	Y+34, r25	; 0x22
    2edc:	89 a3       	std	Y+33, r24	; 0x21
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <main+0x384>
    2ee0:	88 ec       	ldi	r24, 0xC8	; 200
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	98 a3       	std	Y+32, r25	; 0x20
    2ee6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eea:	98 a1       	ldd	r25, Y+32	; 0x20
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <main+0x372>
    2ef0:	98 a3       	std	Y+32, r25	; 0x20
    2ef2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9a a3       	std	Y+34, r25	; 0x22
    2efc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	89 a1       	ldd	r24, Y+33	; 0x21
    2f00:	9a a1       	ldd	r25, Y+34	; 0x22
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <main+0x366>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <main+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f20:	9e 8f       	std	Y+30, r25	; 0x1e
    2f22:	8d 8f       	std	Y+29, r24	; 0x1d
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <main+0x3ae>
    2f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2e:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(200) ;
										LCD_VidSendCommand(0x01) ;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
										trials-=1 ;
    2f36:	80 91 03 02 	lds	r24, 0x0203
    2f3a:	81 50       	subi	r24, 0x01	; 1
    2f3c:	80 93 03 02 	sts	0x0203, r24
											if (trials==0)
    2f40:	80 91 03 02 	lds	r24, 0x0203
    2f44:	88 23       	and	r24, r24
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <main+0x3d0>
    2f48:	95 c0       	rjmp	.+298    	; 0x3074 <main+0x4fa>
											{
												//BUZZER

												DIO_EnuSetPinVal(PIN30,HIGH) ;
    2f4a:	8e e1       	ldi	r24, 0x1E	; 30
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	0e 94 df 10 	call	0x21be	; 0x21be <DIO_EnuSetPinVal>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	aa ef       	ldi	r26, 0xFA	; 250
    2f58:	b3 e4       	ldi	r27, 0x43	; 67
    2f5a:	89 8f       	std	Y+25, r24	; 0x19
    2f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	69 8d       	ldd	r22, Y+25	; 0x19
    2f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8d 8b       	std	Y+21, r24	; 0x15
    2f7c:	9e 8b       	std	Y+22, r25	; 0x16
    2f7e:	af 8b       	std	Y+23, r26	; 0x17
    2f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f82:	6d 89       	ldd	r22, Y+21	; 0x15
    2f84:	7e 89       	ldd	r23, Y+22	; 0x16
    2f86:	8f 89       	ldd	r24, Y+23	; 0x17
    2f88:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <main+0x42a>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 8b       	std	Y+20, r25	; 0x14
    2fa0:	8b 8b       	std	Y+19, r24	; 0x13
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <main+0x4a8>
	else if (__tmp > 65535)
    2fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2faa:	98 8d       	ldd	r25, Y+24	; 0x18
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <main+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <main+0x48a>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9a 8b       	std	Y+18, r25	; 0x12
    2fec:	89 8b       	std	Y+17, r24	; 0x11
    2fee:	89 89       	ldd	r24, Y+17	; 0x11
    2ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <main+0x478>
    2ff6:	9a 8b       	std	Y+18, r25	; 0x12
    2ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9c 8b       	std	Y+20, r25	; 0x14
    3002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8b 89       	ldd	r24, Y+19	; 0x13
    3006:	9c 89       	ldd	r25, Y+20	; 0x14
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <main+0x46c>
    300c:	33 c0       	rjmp	.+102    	; 0x3074 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9c 8b       	std	Y+20, r25	; 0x14
    3020:	8b 8b       	std	Y+19, r24	; 0x13
    3022:	8b 89       	ldd	r24, Y+19	; 0x13
    3024:	9c 89       	ldd	r25, Y+20	; 0x14
    3026:	98 8b       	std	Y+16, r25	; 0x10
    3028:	8f 87       	std	Y+15, r24	; 0x0f
    302a:	8f 85       	ldd	r24, Y+15	; 0x0f
    302c:	98 89       	ldd	r25, Y+16	; 0x10
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <main+0x4b4>
    3032:	98 8b       	std	Y+16, r25	; 0x10
    3034:	8f 87       	std	Y+15, r24	; 0x0f
    3036:	1e c0       	rjmp	.+60     	; 0x3074 <main+0x4fa>
												_delay_ms(500) ;

											}
									}
							}
					else if(key=='C' && k>0 )
    3038:	80 91 1c 02 	lds	r24, 0x021C
    303c:	83 34       	cpi	r24, 0x43	; 67
    303e:	d1 f4       	brne	.+52     	; 0x3074 <main+0x4fa>
    3040:	8d a5       	ldd	r24, Y+45	; 0x2d
    3042:	88 23       	and	r24, r24
    3044:	b9 f0       	breq	.+46     	; 0x3074 <main+0x4fa>
							{
								pass[char_num]='\0' ;
    3046:	8e a5       	ldd	r24, Y+46	; 0x2e
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	fc 01       	movw	r30, r24
    304e:	ea 5e       	subi	r30, 0xEA	; 234
    3050:	fd 4f       	sbci	r31, 0xFD	; 253
    3052:	10 82       	st	Z, r1
								char_num-=1 ;
    3054:	8e a5       	ldd	r24, Y+46	; 0x2e
    3056:	81 50       	subi	r24, 0x01	; 1
    3058:	8e a7       	std	Y+46, r24	; 0x2e
								k-=1 ;
    305a:	8d a5       	ldd	r24, Y+45	; 0x2d
    305c:	81 50       	subi	r24, 0x01	; 1
    305e:	8d a7       	std	Y+45, r24	; 0x2d
								LCD_VidSetPosition(1,2+k) ;
    3060:	8d a5       	ldd	r24, Y+45	; 0x2d
    3062:	98 2f       	mov	r25, r24
    3064:	9e 5f       	subi	r25, 0xFE	; 254
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	69 2f       	mov	r22, r25
    306a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
								LCD_VidSendData(' ') ;
    306e:	80 e2       	ldi	r24, 0x20	; 32
    3070:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>

							}

					if(return_key) {LCD_VidSendCommand(0x01) ;   break ;}
    3074:	8c a5       	ldd	r24, Y+44	; 0x2c
    3076:	88 23       	and	r24, r24
    3078:	21 f0       	breq	.+8      	; 0x3082 <main+0x508>
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
    3080:	b2 cd       	rjmp	.-1180   	; 0x2be6 <main+0x6c>
				free_name(user) ;
				k=0 ;
				char_num=0 ;
				LCD_VidSendCommand(0x01) ;

				while(trials!=0)
    3082:	80 91 03 02 	lds	r24, 0x0203
    3086:	88 23       	and	r24, r24
    3088:	09 f0       	breq	.+2      	; 0x308c <main+0x512>
    308a:	07 ce       	rjmp	.-1010   	; 0x2c9a <main+0x120>
    308c:	ac cd       	rjmp	.-1192   	; 0x2be6 <main+0x6c>
					if(return_key) {LCD_VidSendCommand(0x01) ;   break ;}
				}
			}
			else
			{
				free_name(user) ;
    308e:	80 e1       	ldi	r24, 0x10	; 16
    3090:	92 e0       	ldi	r25, 0x02	; 2
    3092:	0e 94 04 19 	call	0x3208	; 0x3208 <free_name>
				k=0 ;
    3096:	1d a6       	std	Y+45, r1	; 0x2d
				char_num=0 ;
    3098:	1e a6       	std	Y+46, r1	; 0x2e
				LCD_VidSendCommand(0x01) ;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_VidSendCommand>
				LCD_VidSetPosition(0,0) ;
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
				LCD_VidWriteString("Wrong username") ;
    30a8:	87 ea       	ldi	r24, 0xA7	; 167
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a8 e4       	ldi	r26, 0x48	; 72
    30b6:	b3 e4       	ldi	r27, 0x43	; 67
    30b8:	8b 87       	std	Y+11, r24	; 0x0b
    30ba:	9c 87       	std	Y+12, r25	; 0x0c
    30bc:	ad 87       	std	Y+13, r26	; 0x0d
    30be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a ef       	ldi	r20, 0xFA	; 250
    30ce:	54 e4       	ldi	r21, 0x44	; 68
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8f 83       	std	Y+7, r24	; 0x07
    30da:	98 87       	std	Y+8, r25	; 0x08
    30dc:	a9 87       	std	Y+9, r26	; 0x09
    30de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e0:	6f 81       	ldd	r22, Y+7	; 0x07
    30e2:	78 85       	ldd	r23, Y+8	; 0x08
    30e4:	89 85       	ldd	r24, Y+9	; 0x09
    30e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	5f e3       	ldi	r21, 0x3F	; 63
    30f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	2c f4       	brge	.+10     	; 0x3102 <main+0x588>
		__ticks = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9e 83       	std	Y+6, r25	; 0x06
    30fe:	8d 83       	std	Y+5, r24	; 0x05
    3100:	3f c0       	rjmp	.+126    	; 0x3180 <main+0x606>
	else if (__tmp > 65535)
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	3f ef       	ldi	r19, 0xFF	; 255
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	57 e4       	ldi	r21, 0x47	; 71
    3112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	4c f5       	brge	.+82     	; 0x316c <main+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	6b 85       	ldd	r22, Y+11	; 0x0b
    311c:	7c 85       	ldd	r23, Y+12	; 0x0c
    311e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3120:	9e 85       	ldd	r25, Y+14	; 0x0e
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	bc 01       	movw	r22, r24
    3134:	cd 01       	movw	r24, r26
    3136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	8d 83       	std	Y+5, r24	; 0x05
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <main+0x5e8>
    3144:	88 ec       	ldi	r24, 0xC8	; 200
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9c 83       	std	Y+4, r25	; 0x04
    314a:	8b 83       	std	Y+3, r24	; 0x03
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	9c 81       	ldd	r25, Y+4	; 0x04
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <main+0x5d6>
    3154:	9c 83       	std	Y+4, r25	; 0x04
    3156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	69 f7       	brne	.-38     	; 0x3144 <main+0x5ca>
    316a:	3d cd       	rjmp	.-1414   	; 0x2be6 <main+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	89 85       	ldd	r24, Y+9	; 0x09
    3172:	9a 85       	ldd	r25, Y+10	; 0x0a
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	9e 83       	std	Y+6, r25	; 0x06
    317e:	8d 83       	std	Y+5, r24	; 0x05
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <main+0x612>
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	28 cd       	rjmp	.-1456   	; 0x2be6 <main+0x6c>
				_delay_ms(200) ;
			}
		}
		else if(key=='C' && k>0 )
    3196:	80 91 1c 02 	lds	r24, 0x021C
    319a:	83 34       	cpi	r24, 0x43	; 67
    319c:	09 f0       	breq	.+2      	; 0x31a0 <main+0x626>
    319e:	23 cd       	rjmp	.-1466   	; 0x2be6 <main+0x6c>
    31a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    31a2:	88 23       	and	r24, r24
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <main+0x62e>
    31a6:	1f cd       	rjmp	.-1474   	; 0x2be6 <main+0x6c>
		{
			user[char_num]='\0' ;
    31a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	fc 01       	movw	r30, r24
    31b0:	e0 5f       	subi	r30, 0xF0	; 240
    31b2:	fd 4f       	sbci	r31, 0xFD	; 253
    31b4:	10 82       	st	Z, r1
			char_num-=1 ;
    31b6:	8e a5       	ldd	r24, Y+46	; 0x2e
    31b8:	81 50       	subi	r24, 0x01	; 1
    31ba:	8e a7       	std	Y+46, r24	; 0x2e
			k-=1 ;
    31bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    31be:	81 50       	subi	r24, 0x01	; 1
    31c0:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_VidSetPosition(1,2+k) ;
    31c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31c4:	98 2f       	mov	r25, r24
    31c6:	9e 5f       	subi	r25, 0xFE	; 254
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	69 2f       	mov	r22, r25
    31cc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
			LCD_VidSendData(' ') ;
    31d0:	80 e2       	ldi	r24, 0x20	; 32
    31d2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_VidSendData>
    31d6:	07 cd       	rjmp	.-1522   	; 0x2be6 <main+0x6c>

000031d8 <clear_line>:




void clear_line(u8 num)
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	0f 92       	push	r0
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	89 83       	std	Y+1, r24	; 0x01
	if( num==0 || num==1 )
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	88 23       	and	r24, r24
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <clear_line+0x18>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	81 30       	cpi	r24, 0x01	; 1
    31ee:	41 f4       	brne	.+16     	; 0x3200 <clear_line+0x28>
	{	LCD_VidSetPosition(num,0) ;
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSetPosition>
		LCD_VidWriteString("                                ") ;
    31f8:	86 eb       	ldi	r24, 0xB6	; 182
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_VidWriteString>
	}
}
    3200:	0f 90       	pop	r0
    3202:	cf 91       	pop	r28
    3204:	df 91       	pop	r29
    3206:	08 95       	ret

00003208 <free_name>:


void free_name(u8 name[SIZE])
{
    3208:	df 93       	push	r29
    320a:	cf 93       	push	r28
    320c:	00 d0       	rcall	.+0      	; 0x320e <free_name+0x6>
    320e:	0f 92       	push	r0
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	9b 83       	std	Y+3, r25	; 0x03
    3216:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0;i<=SIZE;i++)
    3218:	19 82       	std	Y+1, r1	; 0x01
    321a:	0c c0       	rjmp	.+24     	; 0x3234 <free_name+0x2c>
	{
		name[i]='\0' ;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	9b 81       	ldd	r25, Y+3	; 0x03
    3226:	fc 01       	movw	r30, r24
    3228:	e2 0f       	add	r30, r18
    322a:	f3 1f       	adc	r31, r19
    322c:	10 82       	st	Z, r1
}


void free_name(u8 name[SIZE])
{
	for (u8 i=0;i<=SIZE;i++)
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	8f 5f       	subi	r24, 0xFF	; 255
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	87 30       	cpi	r24, 0x07	; 7
    3238:	88 f3       	brcs	.-30     	; 0x321c <free_name+0x14>
	{
		name[i]='\0' ;
	}

}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <name_check>:



u8 name_check(u8 name[SIZE])
{
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	00 d0       	rcall	.+0      	; 0x324c <name_check+0x6>
    324c:	00 d0       	rcall	.+0      	; 0x324e <name_check+0x8>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
	u8 flag=0 ;
    3256:	1a 82       	std	Y+2, r1	; 0x02
	for (u8 i=0;username[i]!='\0';i++)
    3258:	19 82       	std	Y+1, r1	; 0x01
    325a:	19 c0       	rjmp	.+50     	; 0x328e <name_check+0x48>
	{
		if (name[i]!=username[i])
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	fc 01       	movw	r30, r24
    3268:	e2 0f       	add	r30, r18
    326a:	f3 1f       	adc	r31, r19
    326c:	20 81       	ld	r18, Z
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	fc 01       	movw	r30, r24
    3276:	e9 50       	subi	r30, 0x09	; 9
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	80 81       	ld	r24, Z
    327c:	28 17       	cp	r18, r24
    327e:	11 f0       	breq	.+4      	; 0x3284 <name_check+0x3e>
		{
			flag=0 ;
    3280:	1a 82       	std	Y+2, r1	; 0x02
    3282:	0e c0       	rjmp	.+28     	; 0x32a0 <name_check+0x5a>
			break ;
		}
		else
		{
			flag=1 ;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	8a 83       	std	Y+2, r24	; 0x02


u8 name_check(u8 name[SIZE])
{
	u8 flag=0 ;
	for (u8 i=0;username[i]!='\0';i++)
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	88 2f       	mov	r24, r24
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	fc 01       	movw	r30, r24
    3296:	e9 50       	subi	r30, 0x09	; 9
    3298:	fe 4f       	sbci	r31, 0xFE	; 254
    329a:	80 81       	ld	r24, Z
    329c:	88 23       	and	r24, r24
    329e:	f1 f6       	brne	.-68     	; 0x325c <name_check+0x16>
			flag=1 ;
		}

	}

	return flag ;
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <pass_check>:



u8 pass_check(u8 password[SIZE])
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <pass_check+0x6>
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <pass_check+0x8>
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	9c 83       	std	Y+4, r25	; 0x04
    32be:	8b 83       	std	Y+3, r24	; 0x03

	u8 flag=0 ;
    32c0:	1a 82       	std	Y+2, r1	; 0x02
		for (u8 i=0;userpassword[i]!='\0';i++)
    32c2:	19 82       	std	Y+1, r1	; 0x01
    32c4:	19 c0       	rjmp	.+50     	; 0x32f8 <pass_check+0x48>
		{
			if (password[i]!=userpassword[i])
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	9c 81       	ldd	r25, Y+4	; 0x04
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	20 81       	ld	r18, Z
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	fc 01       	movw	r30, r24
    32e0:	e3 50       	subi	r30, 0x03	; 3
    32e2:	fe 4f       	sbci	r31, 0xFE	; 254
    32e4:	80 81       	ld	r24, Z
    32e6:	28 17       	cp	r18, r24
    32e8:	11 f0       	breq	.+4      	; 0x32ee <pass_check+0x3e>
			{
				flag=0 ;
    32ea:	1a 82       	std	Y+2, r1	; 0x02
    32ec:	0e c0       	rjmp	.+28     	; 0x330a <pass_check+0x5a>
				break ;
			}
			else
			{
				flag=1 ;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8a 83       	std	Y+2, r24	; 0x02

u8 pass_check(u8 password[SIZE])
{

	u8 flag=0 ;
		for (u8 i=0;userpassword[i]!='\0';i++)
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	8f 5f       	subi	r24, 0xFF	; 255
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	e3 50       	subi	r30, 0x03	; 3
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	80 81       	ld	r24, Z
    3306:	88 23       	and	r24, r24
    3308:	f1 f6       	brne	.-68     	; 0x32c6 <pass_check+0x16>
				flag=1 ;
			}

		}

		return flag ;
    330a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <__mulsi3>:
    331a:	62 9f       	mul	r22, r18
    331c:	d0 01       	movw	r26, r0
    331e:	73 9f       	mul	r23, r19
    3320:	f0 01       	movw	r30, r0
    3322:	82 9f       	mul	r24, r18
    3324:	e0 0d       	add	r30, r0
    3326:	f1 1d       	adc	r31, r1
    3328:	64 9f       	mul	r22, r20
    332a:	e0 0d       	add	r30, r0
    332c:	f1 1d       	adc	r31, r1
    332e:	92 9f       	mul	r25, r18
    3330:	f0 0d       	add	r31, r0
    3332:	83 9f       	mul	r24, r19
    3334:	f0 0d       	add	r31, r0
    3336:	74 9f       	mul	r23, r20
    3338:	f0 0d       	add	r31, r0
    333a:	65 9f       	mul	r22, r21
    333c:	f0 0d       	add	r31, r0
    333e:	99 27       	eor	r25, r25
    3340:	72 9f       	mul	r23, r18
    3342:	b0 0d       	add	r27, r0
    3344:	e1 1d       	adc	r30, r1
    3346:	f9 1f       	adc	r31, r25
    3348:	63 9f       	mul	r22, r19
    334a:	b0 0d       	add	r27, r0
    334c:	e1 1d       	adc	r30, r1
    334e:	f9 1f       	adc	r31, r25
    3350:	bd 01       	movw	r22, r26
    3352:	cf 01       	movw	r24, r30
    3354:	11 24       	eor	r1, r1
    3356:	08 95       	ret

00003358 <__udivmodhi4>:
    3358:	aa 1b       	sub	r26, r26
    335a:	bb 1b       	sub	r27, r27
    335c:	51 e1       	ldi	r21, 0x11	; 17
    335e:	07 c0       	rjmp	.+14     	; 0x336e <__udivmodhi4_ep>

00003360 <__udivmodhi4_loop>:
    3360:	aa 1f       	adc	r26, r26
    3362:	bb 1f       	adc	r27, r27
    3364:	a6 17       	cp	r26, r22
    3366:	b7 07       	cpc	r27, r23
    3368:	10 f0       	brcs	.+4      	; 0x336e <__udivmodhi4_ep>
    336a:	a6 1b       	sub	r26, r22
    336c:	b7 0b       	sbc	r27, r23

0000336e <__udivmodhi4_ep>:
    336e:	88 1f       	adc	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	5a 95       	dec	r21
    3374:	a9 f7       	brne	.-22     	; 0x3360 <__udivmodhi4_loop>
    3376:	80 95       	com	r24
    3378:	90 95       	com	r25
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	08 95       	ret

00003380 <__divmodhi4>:
    3380:	97 fb       	bst	r25, 7
    3382:	09 2e       	mov	r0, r25
    3384:	07 26       	eor	r0, r23
    3386:	0a d0       	rcall	.+20     	; 0x339c <__divmodhi4_neg1>
    3388:	77 fd       	sbrc	r23, 7
    338a:	04 d0       	rcall	.+8      	; 0x3394 <__divmodhi4_neg2>
    338c:	e5 df       	rcall	.-54     	; 0x3358 <__udivmodhi4>
    338e:	06 d0       	rcall	.+12     	; 0x339c <__divmodhi4_neg1>
    3390:	00 20       	and	r0, r0
    3392:	1a f4       	brpl	.+6      	; 0x339a <__divmodhi4_exit>

00003394 <__divmodhi4_neg2>:
    3394:	70 95       	com	r23
    3396:	61 95       	neg	r22
    3398:	7f 4f       	sbci	r23, 0xFF	; 255

0000339a <__divmodhi4_exit>:
    339a:	08 95       	ret

0000339c <__divmodhi4_neg1>:
    339c:	f6 f7       	brtc	.-4      	; 0x339a <__divmodhi4_exit>
    339e:	90 95       	com	r25
    33a0:	81 95       	neg	r24
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	08 95       	ret

000033a6 <__udivmodsi4>:
    33a6:	a1 e2       	ldi	r26, 0x21	; 33
    33a8:	1a 2e       	mov	r1, r26
    33aa:	aa 1b       	sub	r26, r26
    33ac:	bb 1b       	sub	r27, r27
    33ae:	fd 01       	movw	r30, r26
    33b0:	0d c0       	rjmp	.+26     	; 0x33cc <__udivmodsi4_ep>

000033b2 <__udivmodsi4_loop>:
    33b2:	aa 1f       	adc	r26, r26
    33b4:	bb 1f       	adc	r27, r27
    33b6:	ee 1f       	adc	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	a2 17       	cp	r26, r18
    33bc:	b3 07       	cpc	r27, r19
    33be:	e4 07       	cpc	r30, r20
    33c0:	f5 07       	cpc	r31, r21
    33c2:	20 f0       	brcs	.+8      	; 0x33cc <__udivmodsi4_ep>
    33c4:	a2 1b       	sub	r26, r18
    33c6:	b3 0b       	sbc	r27, r19
    33c8:	e4 0b       	sbc	r30, r20
    33ca:	f5 0b       	sbc	r31, r21

000033cc <__udivmodsi4_ep>:
    33cc:	66 1f       	adc	r22, r22
    33ce:	77 1f       	adc	r23, r23
    33d0:	88 1f       	adc	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	1a 94       	dec	r1
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <__udivmodsi4_loop>
    33d8:	60 95       	com	r22
    33da:	70 95       	com	r23
    33dc:	80 95       	com	r24
    33de:	90 95       	com	r25
    33e0:	9b 01       	movw	r18, r22
    33e2:	ac 01       	movw	r20, r24
    33e4:	bd 01       	movw	r22, r26
    33e6:	cf 01       	movw	r24, r30
    33e8:	08 95       	ret

000033ea <__divmodsi4>:
    33ea:	97 fb       	bst	r25, 7
    33ec:	09 2e       	mov	r0, r25
    33ee:	05 26       	eor	r0, r21
    33f0:	0e d0       	rcall	.+28     	; 0x340e <__divmodsi4_neg1>
    33f2:	57 fd       	sbrc	r21, 7
    33f4:	04 d0       	rcall	.+8      	; 0x33fe <__divmodsi4_neg2>
    33f6:	d7 df       	rcall	.-82     	; 0x33a6 <__udivmodsi4>
    33f8:	0a d0       	rcall	.+20     	; 0x340e <__divmodsi4_neg1>
    33fa:	00 1c       	adc	r0, r0
    33fc:	38 f4       	brcc	.+14     	; 0x340c <__divmodsi4_exit>

000033fe <__divmodsi4_neg2>:
    33fe:	50 95       	com	r21
    3400:	40 95       	com	r20
    3402:	30 95       	com	r19
    3404:	21 95       	neg	r18
    3406:	3f 4f       	sbci	r19, 0xFF	; 255
    3408:	4f 4f       	sbci	r20, 0xFF	; 255
    340a:	5f 4f       	sbci	r21, 0xFF	; 255

0000340c <__divmodsi4_exit>:
    340c:	08 95       	ret

0000340e <__divmodsi4_neg1>:
    340e:	f6 f7       	brtc	.-4      	; 0x340c <__divmodsi4_exit>
    3410:	90 95       	com	r25
    3412:	80 95       	com	r24
    3414:	70 95       	com	r23
    3416:	61 95       	neg	r22
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	8f 4f       	sbci	r24, 0xFF	; 255
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	08 95       	ret

00003420 <__prologue_saves__>:
    3420:	2f 92       	push	r2
    3422:	3f 92       	push	r3
    3424:	4f 92       	push	r4
    3426:	5f 92       	push	r5
    3428:	6f 92       	push	r6
    342a:	7f 92       	push	r7
    342c:	8f 92       	push	r8
    342e:	9f 92       	push	r9
    3430:	af 92       	push	r10
    3432:	bf 92       	push	r11
    3434:	cf 92       	push	r12
    3436:	df 92       	push	r13
    3438:	ef 92       	push	r14
    343a:	ff 92       	push	r15
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	ca 1b       	sub	r28, r26
    344a:	db 0b       	sbc	r29, r27
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	09 94       	ijmp

00003458 <__epilogue_restores__>:
    3458:	2a 88       	ldd	r2, Y+18	; 0x12
    345a:	39 88       	ldd	r3, Y+17	; 0x11
    345c:	48 88       	ldd	r4, Y+16	; 0x10
    345e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3460:	6e 84       	ldd	r6, Y+14	; 0x0e
    3462:	7d 84       	ldd	r7, Y+13	; 0x0d
    3464:	8c 84       	ldd	r8, Y+12	; 0x0c
    3466:	9b 84       	ldd	r9, Y+11	; 0x0b
    3468:	aa 84       	ldd	r10, Y+10	; 0x0a
    346a:	b9 84       	ldd	r11, Y+9	; 0x09
    346c:	c8 84       	ldd	r12, Y+8	; 0x08
    346e:	df 80       	ldd	r13, Y+7	; 0x07
    3470:	ee 80       	ldd	r14, Y+6	; 0x06
    3472:	fd 80       	ldd	r15, Y+5	; 0x05
    3474:	0c 81       	ldd	r16, Y+4	; 0x04
    3476:	1b 81       	ldd	r17, Y+3	; 0x03
    3478:	aa 81       	ldd	r26, Y+2	; 0x02
    347a:	b9 81       	ldd	r27, Y+1	; 0x01
    347c:	ce 0f       	add	r28, r30
    347e:	d1 1d       	adc	r29, r1
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	ed 01       	movw	r28, r26
    348c:	08 95       	ret

0000348e <_exit>:
    348e:	f8 94       	cli

00003490 <__stop_program>:
    3490:	ff cf       	rjmp	.-2      	; 0x3490 <__stop_program>
